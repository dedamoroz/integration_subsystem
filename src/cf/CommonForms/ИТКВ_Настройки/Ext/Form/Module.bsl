#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = НСтр("ru = 'Настройки'; en = 'Settings'");
	ИТКВ_ФормаКлиентСервер.УстановитьЗаголовок(ЭтотОбъект, Заголовок, ИТКВ_ТуллкитКлиентСервер.Представление());
	
	ИТКВ_Форма.ЗаполнитьСписокВыбораЯзыкПрограммирования(Элементы.ОбщиеЯзыкПрограммирования, Истина);
	ИТКВ_Форма.ЗаполнитьСписокВыбораМаксимальноеКоличествоВыводимыхСтрок(Элементы.КонсольРазработчикаМаксимальноеКоличествоВыводимыхСтрок);
	
	ИТКВ_Перечисления.ЗаполнитьСписок(Элементы.ОбщиеКонструкторЗапросаТонкогоКлиента, ИТКВ_Перечисления.ТипыКонструктораЗапроса(), Ложь);
	ИТКВ_Перечисления.ЗаполнитьСписок(Элементы.ОбщиеКонструкторЗапросаТолстогоКлиента, ИТКВ_Перечисления.ТипыКонструктораЗапроса(), Истина);
	ИТКВ_Перечисления.ЗаполнитьСписок(Элементы.КонсольРазработчикаРасшифровкаТаблицЗначений, ИТКВ_Перечисления.РасшифровкаТаблицЗначений());
	ИТКВ_Перечисления.ЗаполнитьСписок(Элементы.КонсольРазработчикаПолучениеПлана, ИТКВ_Перечисления.ПолучениеПлана());
	ИТКВ_Перечисления.ЗаполнитьСписок(Элементы.ОбщиеКонструкторСКДТолстогоКлиента, ИТКВ_Перечисления.ТипыКонструктораСКД());
	ИТКВ_Перечисления.ЗаполнитьСписок(Элементы.КонсольРазработчикаСохранятьДанныеПоУмолчаниюВ, ИТКВ_Перечисления.ТипыХраненияДанных());
	ИТКВ_Перечисления.ЗаполнитьСписок(Элементы.ОбщиеРедактор, ИТКВ_Перечисления.Редакторы());
	
	ЗагрузитьЗначенияНастроек();
	
	Инструмент = ИТКВ_ОбщийКлиентСервер.Свойство(Параметры, "Инструмент");
	Раздел = ИТКВ_ОбщийКлиентСервер.Свойство(Параметры, "Раздел");
	
	Если Инструмент = ИТКВ_Перечисления.ИнструментКонсольРазработчика() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКонсольРазработчика;
		
	КонецЕсли;
	
	Если Раздел = "ПодключениеККластерам" Тогда
		
		ИТКВ_ФормаКлиентСервер.СкрытьГруппу(Элементы.ГруппаОбщиеКонструкторЗапроса);
		ИТКВ_ФормаКлиентСервер.СкрытьГруппу(Элементы.ГруппаОбщиеКонструкторСКД);
		
		ТекущийЭлемент = Элементы.ГруппаОбщиеПодключенияККластерам;
		
	ИначеЕсли Раздел = "НастройкиРедактора"	Тогда
		
		ИТКВ_ФормаКлиентСервер.СкрытьГруппу(Элементы.ГруппаОбщиеКонструкторЗапроса);
		ИТКВ_ФормаКлиентСервер.СкрытьГруппу(Элементы.ГруппаОбщиеКонструкторСКД);
		ИТКВ_ФормаКлиентСервер.СкрытьГруппу(Элементы.ГруппаОбщиеПодключенияККластерам);
		
		ТекущийЭлемент = Элементы.ГруппаОбщиеРедактор;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТолькоПросмотр", Истина);
	ДополнительныеПараметры.Вставить("ВсегдаИспользоватьMonaco", Истина);
	ДополнительныеПараметры.Вставить("ИспользованиеКоманд", Ложь);
	ИТКВ_РедакторКода.Инициализация(ЭтотОбъект, "РедакторПример", ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИТКВ_РедакторКодаКлиент.Инициализация(ЭтотОбъект, "РедакторПример");
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбщиеЯзыкПрограммированияПриИзменении(Элемент)
	
	Текст = ПримерКодаДляРедактора(ОбщиеЯзыкПрограммирования);
	ИТКВ_РедакторКодаКлиент.УстановитьТекст(ЭтотОбъект, Элементы.РедакторПример, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольРазработчикаПолучениеПланаПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталог;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершенВыборКаталогаЛоговоТехнологическогоЖурнала", ЭтотОбъект);
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаОтключена(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталогПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеРедакторПриИзменении(Элемент)
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеРедакторНастройкиПриИзменении(Элемент)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОтображатьКарту", ОбщиеРедакторОтображатьКарту);
	Настройки.Вставить("ОтображатьНомераСтрок", ОбщиеРедакторОтображатьНомераСтрок);
	Настройки.Вставить("ОтображатьПробелыИТабуляции", ОбщиеРедакторОтображатьПробелыИТабуляции);
	Настройки.Вставить("ОтображатьСостояние", ОбщиеРедакторОтображатьСостояние);
	Настройки.Вставить("ЯзыкПрограммирования", ОбщиеЯзыкПрограммирования);
	Настройки.Вставить("Шрифт", ОбщиеРедакторШрифт);
	
	ИТКВ_РедакторКодаКлиент.ПрименитьНастройкиРедактора(Элементы.РедакторПример, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеРедакторКодаПутьКФайлуШаблоновНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Файлы шаблонов кода (*.st)| *.st'; en = 'Code template files (*.st)| *.st'");
	ДиалогВыбораФайла.ПолноеИмяФайла = ОбщиеРедакторКодаПутьКФайлуШаблонов;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершенВыборФайлаШаблоновКода", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИТКВ_ПодключаемыйДокументСформирован(Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Текст", ПримерКодаДляРедактора(ОбщиеЯзыкПрограммирования));
	ИТКВ_РедакторКодаКлиент.ДополнительнаяИнициализация(ЭтотОбъект, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьЗначенияНастроек();
	
	ИмяСобытия = ИТКВ_НастройкиКлиентСервер.ИмяСобытияНастройкиИзменены();
	Оповестить(ИмяСобытия);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримерФайлаНастройкиТехнологическогоЖурнала(Команда)
	
	ПолучитьФайл(ПримерФайлаНастройкиТехнологическогоЖурналаСервер(), "logcfg.xml");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКластер(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Добавление", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершеноРедактированиеПодключенияККластеру", ЭтотОбъект, ДополнительныеПараметры);
	
	ИТКВ_ФормаКлиент.ОткрытьФормуРедактированияПодключенияККластеру(ЭтотОбъект, ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйИзменитьКластер(Команда)
	
	НомерПодключения = ИТКВ_Строки.ИндексИдентификатора(Команда.Имя);
	ИндексПодключения = НомерПодключения - 1;
	ОписаниеПодключения = ОбщиеПодключенияККластерам[ИндексПодключения].Значение;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Добавление", Ложь);
	ДополнительныеПараметры.Вставить("Индекс", ИндексПодключения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершеноРедактированиеПодключенияККластеру", ЭтотОбъект, ДополнительныеПараметры);
	ИТКВ_ФормаКлиент.ОткрытьФормуРедактированияПодключенияККластеру(ЭтотОбъект, ОписаниеОповещения, , ОписаниеПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемыйУдалитьКластер(Команда)
	
	НомерПодключения = ИТКВ_Строки.ИндексИдентификатора(Команда.Имя);
	ИндексПодключения = НомерПодключения - 1;
	
	ОбщиеПодключенияККластерам.Удалить(ИндексПодключения);
	
	ОбновитьЭлементыПодключенийККластерам(ОбщиеПодключенияККластерам);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьЗначенияНастроек()
	
	Для Каждого ВидНастройки Из ВидыНастроек() Цикл
		
		ВидНастроек = ВидНастройки.Значение;
		ЗначенияНастроек = ИТКВ_Настройки.Загрузить(ВидНастройки.Значение);
		
		Для Каждого ОписаниеНастройки Из ИТКВ_НастройкиКлиентСерверПовтИсп.Список(ВидНастроек) Цикл
			
			ИмяНастройки = ОписаниеНастройки.Ключ;
			Если НастройкаИсключение(ИмяНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтотОбъект[ВидНастройки.Ключ + ИмяНастройки] = ЗначенияНастроек[ИмяНастройки];
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Исключения
	
	// Периодичность авто сохранения
	КонсольРазработчикаАвтоСохранениеДанных = ЗначениеЗаполнено(КонсольРазработчикаПериодичностьАвтоСохранения);
	Если КонсольРазработчикаАвтоСохранениеДанных Тогда
		
		КонсольРазработчикаАвтоСохранениеДанныхПериодичность = КонсольРазработчикаПериодичностьАвтоСохранения;
		
	Иначе
		
		НастройкиКонсолиРазработчика = ИТКВ_НастройкиКлиентСерверПовтИсп.Список(ВидНастроек);
		КонсольРазработчикаАвтоСохранениеДанныхПериодичность = НастройкиКонсолиРазработчика[ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиПериодАвтоСохранения()];
		
	КонецЕсли;
	
	// Загрузка настроек получения плана запроса
	Если ЗначениеЗаполнено(КонсольРазработчикаПолучениеПлана) Тогда
		
		ПараметрыПолученияПлана = КонсольРазработчикаПараметрыПолученияПлана;
		
		Если КонсольРазработчикаПолучениеПлана = ИТКВ_Перечисления.ПолучениеПланаТехнологическийЖурнал() Тогда
			
			КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталог = ПараметрыПолученияПлана.Каталог;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подключения к кластерам
	ОбновитьЭлементыПодключенийККластерам(ОбщиеПодключенияККластерам);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияНастроек()

	// Исключения
	// Параметры получения плана
	ПараметрыПолученияПлана = Неопределено;
	Если ЗначениеЗаполнено(КонсольРазработчикаПолучениеПлана) Тогда
		
		Если КонсольРазработчикаПолучениеПлана = ИТКВ_Перечисления.ПолучениеПланаТехнологическийЖурнал() Тогда
			
			ПараметрыПолученияПлана = Новый Структура;
			ПараметрыПолученияПлана.Вставить("Каталог", КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталог);
			
		КонецЕсли;
		
	КонецЕсли;
	КонсольРазработчикаПараметрыПолученияПлана = ПараметрыПолученияПлана;
	
	// АвтоСохранение
	Если КонсольРазработчикаАвтоСохранениеДанных Тогда
		
		ПериодичностьАвтоСохранения = КонсольРазработчикаАвтоСохранениеДанныхПериодичность;
		
	Иначе
		
		ПериодичностьАвтоСохранения = 0;
		
	КонецЕсли;
	КонсольРазработчикаПериодичностьАвтоСохранения = ПериодичностьАвтоСохранения;
	
	// Сохранение настроек
	Для Каждого ВидНастройки Из ВидыНастроек() Цикл
		
		ВидНастроек = ВидНастройки.Значение;
		
		ЗначенияНастроек = Новый Структура;
		Для Каждого ОписаниеНастройки Из ИТКВ_НастройкиКлиентСерверПовтИсп.Список(ВидНастроек) Цикл
			
			ИмяНастройки = ОписаниеНастройки.Ключ;
			Если НастройкаИсключение(ИмяНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияНастроек.Вставить(ИмяНастройки, ЭтотОбъект[ВидНастройки.Ключ + ИмяНастройки]);
			
		КонецЦикла;
		
		ИТКВ_Настройки.Сохранить(ЗначенияНастроек, ВидНастройки.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидыНастроек()
	
	Результат = Новый Соответствие;
	Результат.Вставить("Общие", Неопределено);
	Результат.Вставить("КонсольРазработчика", ИТКВ_Перечисления.ИнструментКонсольРазработчика());
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПримерФайлаНастройкиТехнологическогоЖурналаСервер()
	
	Макет = Обработки.ИТКВ_КонсольРазработчика.ПолучитьМакет("ИТКВ_ШаблонФайлаНастройкиТехнологическогоЖурнала");
	Шаблон = Макет.ПолучитьТекст();
	
	ПолноеИмяРасширения = ИТКВ_ТуллкитКлиентСервер.ПолноеПредставление();
	Текст = СтрШаблон(Шаблон, ПолноеИмяРасширения, КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталог, "ВыполнениеСАнализомПлана");
	
	Возврат ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеИзСтроки(Текст), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЭлементыФормы()
	
	ПолнаяВерсияТуллкит = ИТКВ_ТуллкитКлиентСервер.ПолнаяВерсия();
	Элементы.ГруппаКонсольРазработчикаАнализПланаЗапроса.Видимость = ПолнаяВерсияТуллкит;
	Элементы.КонсольРазработчикаРазбиратьСтруктуруЗапроса.Видимость = ПолнаяВерсияТуллкит;
	Элементы.ОбщиеКонструкторЗапросаТонкогоКлиента.Видимость = ПолнаяВерсияТуллкит;
	Элементы.ГруппаИнформацияДляКонструктораЗапроса.Видимость = НЕ ПолнаяВерсияТуллкит;
	Элементы.ГруппаОбщиеКонструкторСКД.Видимость = ПолнаяВерсияТуллкит;
	
	АнализПланаЗапросаТехнологическийЖурналВидимость = (КонсольРазработчикаПолучениеПлана = ИТКВ_Перечисления.ПолучениеПланаТехнологическийЖурнал());
	Элементы.ГруппаКонсольРазработчикаАнализПланаЗапросаТехнологическийЖурнал.Видимость = АнализПланаЗапросаТехнологическийЖурналВидимость;
	
	Элементы.КонсольРазработчикаПримерФайлаНастройкиТехнологическогоЖурнала.Видимость = ЗначениеЗаполнено(КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталог);
	Элементы.ГруппаИнформацияДляФайловойБазы.Видимость = ИТКВ_ОбщийКлиентСерверПовтИсп.ИнформационнаяБазаФайловая();
	
	Элементы.ГруппаОбщиеРедакторНастройки.Видимость = (ОбщиеРедактор = ИТКВ_Перечисления.РедакторMonaco()
															И ИТКВ_РедакторКодаКлиентСервер.ПоддерживаетсяПлатформойMonaco());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыПодключенийККластерам(ПодключенияККластерам)
	// Параметр нужен т.к. в 8.3.16 странное поведение после изменения список на сервер передается старый
	
	// Удаляем старые элементы и команды
	ИТКВ_Форма.УдалитьПодчиненныеЭлементы(ЭтотОбъект, Элементы.ГруппаПодключенияККластерам);
	ИТКВ_Форма.УдалитьКоманды(ЭтотОбъект, "ИзменитьКластер");
	ИТКВ_Форма.УдалитьКоманды(ЭтотОбъект, "УдалитьКластер");
	
	// Добавлем новые
	ГруппаПодключенияККластерам = Элементы.ГруппаПодключенияККластерам;
	КоличествоПодключенийВГруппе = 2;
	
	НомерПодключения = 1;
	Для Каждого ЭлементПодключение Из ПодключенияККластерам Цикл
		
		ОписаниеПодключения = ЭлементПодключение.Значение;
		
		Если НомерПодключения % КоличествоПодключенийВГруппе = 1 Тогда
			
			НомерГруппыПодключений = Цел((НомерПодключения + 1) / КоличествоПодключенийВГруппе);

			Поля = Новый Структура;
			Поля.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
			Поля.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Подключения к кластера №%1'; en = 'Connections to cluster #%1'"), НомерГруппыПодключений));
			Поля.Вставить("ОтображатьЗаголовок", Ложь);
			
			ИмяЭлемента = СтрШаблон("ГруппаПодключенияККластерам%1", НомерГруппыПодключений);
			ГруппаПодключенияККластерам = ИТКВ_Форма.ДобавитьЭлемент(ЭтотОбъект, ИмяЭлемента, "Группа", Поля, Элементы.ГруппаПодключенияККластерам);
			
		КонецЕсли;
		
		// Группа подключение к кластеру
		
		Поля = Новый Структура;
		Поля.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
		Поля.Вставить("ЦветФона", ЦветаСтиля.ЦветФонаПодсказки);
		Поля.Вставить("ОтображатьЗаголовок", Ложь);
		Поля.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Подключения к кластеру №%1'; en = 'Connections to cluster #%1'"), НомерПодключения));
		
		ИмяЭлемента = СтрШаблон("ГруппаПодключениеККластеру%1", НомерПодключения);
		ГруппаПодключениеККластеру = ИТКВ_Форма.ДобавитьЭлемент(ЭтотОбъект, ИмяЭлемента, "Группа", Поля, ГруппаПодключенияККластерам);
		
		// Изменить кластер
		ИмяКоманды = СтрШаблон("ИзменитьКластер%1", НомерПодключения);
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Картинка", БиблиотекаКартинок.ИТКВ_Сервер);
		ИТКВ_Форма.ДобавитьКоманду(ЭтотОбъект, ИмяКоманды, "ПодключаемыйИзменитьКластер",
									НСтр("ru = 'Изменить кластер'; en = 'Change cluster'"), ПараметрыКоманды);
		
		// Гиперссылка Изменить кластер
		Поля = Новый Структура;
		Поля.Вставить("Заголовок", ИТКВ_ПодключениеКСерверам.ПредставлениеПодключения(ОписаниеПодключения));
		Поля.Вставить("ИмяКоманды", ИмяКоманды);
		ИТКВ_Форма.ДобавитьЭлемент(ЭтотОбъект, ИмяКоманды, "ГиперСсылка", Поля, ГруппаПодключениеККластеру);
		
		// Удалить кластер
		ИмяКоманды = СтрШаблон("УдалитьКластер%1", НомерПодключения);
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Подсказка", НСтр("ru = 'Удалить кластер'; en = 'Delete cluster'"));
		ИТКВ_Форма.ДобавитьКоманду(ЭтотОбъект, ИмяКоманды, "ПодключаемыйУдалитьКластер",
										НСтр("ru = 'Удалить'; en = 'Delete'"), ПараметрыКоманды);
		
		// Гиперссылка Удалить кластер
		Поля = Новый Структура;
		Поля.Вставить("ИмяКоманды", ИмяКоманды);
		ИТКВ_Форма.ДобавитьЭлемент(ЭтотОбъект, ИмяКоманды, "ГиперСсылка", Поля, ГруппаПодключениеККластеру);
		
		НомерПодключения = НомерПодключения + 1;
		
	КонецЦикла;
	
	// Гиперссылка Добавить кластер
	Поля = Новый Структура;
	Поля.Вставить("ИмяКоманды", "ПодключаемаяДобавитьКластер");
	Поля.Вставить("Шрифт", ИТКВ_ОбщийКлиентСервер.ШрифтЖирный());
	ИТКВ_Форма.ДобавитьЭлемент(ЭтотОбъект, "ДобавитьКластер", "ГиперСсылка", Поля, ГруппаПодключенияККластерам);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершеноРедактированиеПодключенияККластеру(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Добавление Тогда
		
		ОбщиеПодключенияККластерам.Добавить(Результат);
		
	Иначе
		
		ОписаниеПодключения = ОбщиеПодключенияККластерам[ДополнительныеПараметры.Индекс].Значение;
		ЗаполнитьЗначенияСвойств(ОписаниеПодключения, Результат);
		
	КонецЕсли;
	
	ОбновитьЭлементыПодключенийККластерам(ОбщиеПодключенияККластерам);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенВыборКаталогаЛоговоТехнологическогоЖурнала(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонсольРазработчикаПолучениеПланаТехнологическийЖурналКаталог = Результат[0];
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Функция НастройкаИсключение(Имя)
	
	Возврат (Имя = "ИспользуемыеДополнительныеСвойства");
	
КонецФункции

&НаКлиенте
Процедура ЗавершенВыборФайлаШаблоновКода(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	ОбщиеРедакторКодаПутьКФайлуШаблонов = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПримерКодаДляРедактора(КодЯзыка)
	
	Возврат ИТКВ_РедакторКода.ПримерКодаДляНастроек(КодЯзыка);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////

// инт_МенеджерПотоковФормированияСообщений

//  

////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура - Собрать мусор
// 
// Процедура выполняет анализ содержимого регистра. Для каждого из существующих потоков проверяется его состояние. 
// Если поток не активен, но не удалился автоматически - он признается проблемным.
// Для проблемных потоков производится анализ сообщений. Если есть сообщения не обработанные потоком, то они возвращаются в общий пул сообщений к обработке. 
Процедура СобратьМусор() Экспорт
 	Выборка = РегистрыСведений.инт_МенеджерПотоковФормированияСообщений.Выбрать();
    
    Пока Выборка.Следующий() Цикл
    	Поток = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПотока);
        Если Поток = Неопределено ИЛИ Не Поток.Состояние = СостояниеФоновогоЗадания.Активно Тогда
        	ОбработатьОткатПотока(Выборка.ИдентификаторПотока, Выборка.СоставПотока);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

// Процедура - Зарегистрировать поток
//
// Параметры:
//  ИдентификаторПотока     -   УникальныйИдентификатор   - Идентификатор фонового задания, реализующего поток.
//  МассивОбъектов         -   Массив   - Массив УникальныхИдентификаторов сообщений обрабатываемых в потоке
//
Процедура ЗарегистрироватьПоток(ИдентификаторПотока, МассивОбъектов) Экспорт
	СоставПотока = СтрСоединить(МассивОбъектов, ";");
    Запись = РегистрыСведений.инт_МенеджерПотоковФормированияСообщений.СоздатьМенеджерЗаписи();
    Запись.ИдентификаторПотока = ИдентификаторПотока;
    Запись.СоставПотока = СоставПотока;
    Запись.Записать();
    
КонецПроцедуры

Процедура ОбработатьЗавершениеРаботыПотока(ИдентификаторПотока) Экспорт
    ТекстСообщенияЖР = СтрШаблон("Поток с идентификатором <%1> успешно завершен", ИдентификаторПотока);
	УдалитьПотокИзМенеджера(ИдентификаторПотока);
    ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.МенеджерПотоковФормированияСообщений", УровеньЖурналаРегистрации.Информация,,,ТекстСообщенияЖР);
КонецПроцедуры

// Функция - Количество потоков к созданию
// 
// Возвращаемое значение:
// Число  - Количество потоков которое можно еще создать в системе.
//
Функция КоличествоПотоковКСозданию() Экспорт
	МаксимальноеКоличествоПотоков= инт_ФормированиеИсходящихСообщенийПовтИсп.КоличествоПотоковФормированияСообщений();
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |    КОЛИЧЕСТВО(РАЗЛИЧНЫЕ инт_МенеджерПотоковФормированияСообщений.ИдентификаторПотока) КАК КоличествоПотоков
                   |ИЗ
                   |    РегистрСведений.инт_МенеджерПотоковФормированияСообщений КАК инт_МенеджерПотоковФормированияСообщений";
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
    	КоличествоПотоков = Выборка.КоличествоПотоков;
    КонецЕсли;
    
    Возврат ?(КоличествоПотоков >= МаксимальноеКоличествоПотоков, 0, МаксимальноеКоличествоПотоков-КоличествоПотоков);
КонецФункции
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ОбработатьОткатПотока(ИдентификаторПотока, СоставПотока)
    НачатьТранзакцию();
    Попытка
        Поток = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторПотока);
        Если Поток = Неопределено Тогда
            СообщениеОбОшибке = СтрШаблон("Поток с идентификатором <%1> не найден в списке фоновых заданий. Будет выполнен откат состава потока.",
            ИдентификаторПотока);
        Иначе
            СообщениеОбОшибке = СтрШаблон("Поток с идентификатором <%1> завершился не штатно.
            |
            |Состояние потока: %2
            |ИнформацияОбОшибке(Если есть): %3",
            Поток.УникальныйИдентификатор,
            Поток.Состояние,
            ПодробноеПредставлениеОшибки(Поток.ИнформацияОбОшибке));
        КонецЕсли;
        ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.МенеджерПотоковФормированияСообщений",УровеньЖурналаРегистрации.Ошибка, ,,СообщениеОбОшибке);
        
        УдалитьПотокИзМенеджера(ИдентификаторПотока);
        
        ОбработатьОткатСтатусаСообщений(СоставПотока);
         
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        СообщениеОбОшибке = СтрШаблон("При попытке обработки потока завершившегося с ошибкой с идентификатором <%1>, возникла ошибка.
        |
        | Информация об ошибке: %2", ИдентификаторПотока, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.МенеджерПотоковФормированияСообщений",УровеньЖурналаРегистрации.Ошибка,,,СообщениеОбОшибке);
    КонецПопытки;
		
КонецПроцедуры

Процедура ОбработатьОткатСтатусаСообщений(СоставПотока)
    МассивИдентификаторовСообщений = СтрРазделить(СоставПотока, ";", Ложь);
    
    Для Каждого Сообщение Из МассивИдентификаторовСообщений Цикл
        ИдентификаторСообщения = Новый УникальныйИдентификатор(Сообщение);
        Статус = РегистрыСведений.инт_ТекущийСтатусИсходящихСообщений.ТекущийСтатусСообщенияПоИдентификатору(ИдентификаторСообщения);
        // Если статус "ФормированиеСообщения" значит Фоновое по какой-то причине упало раньше, чем обработало это сообщение.Вернем его в пул сообщений к формированию.
        Если Статус = Перечисления.инт_СтатусыИсходящихСообщений.ФормированиеСообщения Тогда
            // Возможно, что когда-нибудь потом мы начнем отслеживать падения и так же убирать из пула сообщения, которые приводят к падению через попытки. но потом.
            ТекстСообщенияЖР = СтрШаблон("Сообщение с идентификатором <%1> попало в поток который завершился аварийно. Ему будет возвращен статус <Новый>");
            ЗаписьЖурналаРегистрации("ПодсистемаИнтеграции.МенеджерПотоковФормированияСообщений", УровеньЖурналаРегистрации.Информация,,,ТекстСообщенияЖР);
            
            РегистрыСведений.инт_ТекущийСтатусИсходящихСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Перечисления.инт_СтатусыИсходящихСообщений.Новый);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

// Процедура - Удалить поток из менеджера
//
// Параметры:
//  ИдентификаторПотока  -   УникальныйИдентификтор   - УИД Фонового задания потока. Удаляется или при успешном завершении, или при сборке мусора.
//
Процедура УдалитьПотокИзМенеджера(ИдентификаторПотока)
   Запись = РегистрыСведений.инт_МенеджерПотоковФормированияСообщений.СоздатьМенеджерЗаписи();
   Запись.ИдентификаторПотока = ИдентификаторПотока;
   Запись.Удалить();
КонецПроцедуры

#КонецОбласти

#КонецЕсли

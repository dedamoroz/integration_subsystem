#Область ПрограммныйИнтерфейс

Функция Список(ВидИнструмента = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ВидИнструмента = Неопределено Тогда

		ФоновоеВыполнение = ИТКВ_ОбщийВызовСервера.ИнформационнаяБазаФайловая();
		Результат.Вставить("ФоновоеВыполнение", ФоновоеВыполнение);
		Результат.Вставить("ВыгруженныеФайлы", "");
		
		Результат.Вставить("ЯзыкПрограммирования", "");
		Результат.Вставить("УведомлениеОЗавершенииДлительныхОпераций", Истина);
		Результат.Вставить("ПодключенияККластерам", Новый СписокЗначений);
		
		Результат.Вставить("ИспользуемыеДополнительныеСвойства", Новый Массив);
		
		Если ИТКВ_ОбщийВызовСервера.ВариантВстроенногоЯзыкаРусский() Тогда
			ТипКонструктораЗапросовТонкогоКлиента = "УлучшенныйТонкий";
		Иначе
			ТипКонструктораЗапросовТонкогоКлиента = "Тонкий";
		КонецЕсли;
		Результат.Вставить(ИмяНастройкиКонструкторЗапросаТонкогоКлиента(), ТипКонструктораЗапросовТонкогоКлиента);
		
		Результат.Вставить(ИмяНастройкиКонструкторЗапросаТолстогоКлиента(), "Толстый");
		Результат.Вставить(ИмяНастройкиКонструкторСКДТолстогоКлиента(), "Толстый");
		
		// Редактор
		Результат.Вставить("Редактор", ИТКВ_Перечисления.РедакторMonaco());
		
		Результат.Вставить("РедакторОтображатьНомераСтрок", Ложь);
		Результат.Вставить("РедакторОтображатьКарту", Ложь);
		Результат.Вставить("РедакторОтображатьСостояние", Ложь);
		Результат.Вставить("РедакторОтображатьПробелыИТабуляции", Ложь);
		Результат.Вставить("РедакторКодаПутьКФайлуШаблонов", "");
		
		ШрифтРедактора = Новый Шрифт("Courier New", 14);
		Результат.Вставить("РедакторШрифт", ШрифтРедактора);
		
	ИначеЕсли ВидИнструмента = ИТКВ_Перечисления.ИнструментКонсольРазработчика() Тогда
		
		Результат.Вставить("АвтоСохранениеПередВыполнением", Истина);
		Результат.Вставить(ИмяНастройкиПериодАвтоСохранения(), 60);
		
		Результат.Вставить(ИмяНастройкиПолучениеПлана(), "Отключено");
		Результат.Вставить("ПараметрыПолученияПлана", Неопределено);
		
		Результат.Вставить(ИмяНастройкиСохранятьДанныеПоУмолчаниюВ(), "Файл");
		
		Результат.Вставить("ВыделятьОсобыеЗначенияВРезультате", Истина);
		Результат.Вставить("ЧередованиеЦветовСтрокВРезультате", Истина);
		Результат.Вставить("МаксимальноеКоличествоВыводимыхСтрок", 1000);
		Результат.Вставить(ИмяНастройкиРасшифровкаТаблицЗначений(), "Отключена");
		Результат.Вставить("РазбиратьСтруктуруЗапроса", Истина);
		Результат.Вставить("ОбратныйПорядокЗапросовПакета", Истина);
		Результат.Вставить("ВыделятьАктивнуюСтроку", Истина);
		Результат.Вставить("РасчетСуммыВыделенныхЯчеек", Истина);
		Результат.Вставить("ВопросПередУдалениемСтрокДанныхБольшеНеПоказывать", Ложь);
		Результат.Вставить("ВопросПередУдалениемВнешнихИсточниковБольшеНеПоказывать", Ложь);
		Результат.Вставить("ВопросПередЗаменойПараметраНаЗначениеБольшеНеПоказывать", Ложь);
		
	ИначеЕсли ВидИнструмента = ИТКВ_Перечисления.ИнструментРедакторОбъекта() Тогда
		
		Результат.Вставить("ИсторияВыбранных", Новый СписокЗначений);
		
	ИначеЕсли ВидИнструмента = ИТКВ_Перечисления.ИнструментПоискСсылокНаОбъект() Тогда
		
		Результат.Вставить("ИсторияВыбранных", Новый СписокЗначений);
		
	Иначе
		
		ВызватьИсключение "!";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючНастроек(ВидИнструмента = Неопределено) Экспорт
	
	Если ВидИнструмента = Неопределено Тогда
		
		Результат = "Общие настройки";
		
	ИначеЕсли ВидИнструмента = ИТКВ_Перечисления.ИнструментКонсольРазработчика() Тогда
		
		Результат = "Консоль разработчика (настройки)";
		
	ИначеЕсли ВидИнструмента = ИТКВ_Перечисления.ИнструментКонсольРазработчика() Тогда
		
		Результат = "Консоль разработчика (настройки)";
		
	ИначеЕсли ВидИнструмента = ИТКВ_Перечисления.ИнструментРедакторОбъекта() Тогда
		
		Результат = "Редактор объекта (настройки)";
		
	ИначеЕсли ВидИнструмента = ИТКВ_Перечисления.ИнструментПоискСсылокНаОбъект() Тогда
		
		Результат = "Поиск ссылок на объект (настройки)";
		
	Иначе
		
		ВызватьИсключение "!";
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеПеречисленияРасшифровкаТаблицЗначений(Значение, Обратное = Ложь) Экспорт
	
	Соответствие = СоответствиеРасшифровкаТаблицЗначений(Обратное);
	Возврат Соответствие.Получить(Значение);

КонецФункции

Функция ПреобразованиеПеречисленияКонструкторЗапроса(Значение, Обратное = Ложь) Экспорт
	
	Соответствие = СоответствиеКонструкторЗапроса(Обратное);
	Возврат Соответствие.Получить(Значение);

КонецФункции

Функция ПреобразованиеПеречисленияКонструкторСКД(Значение, Обратное = Ложь) Экспорт
	
	Соответствие = СоответствиеКонструкторСКД(Обратное);
	Возврат Соответствие.Получить(Значение);

КонецФункции

Функция ПреобразованиеПеречисленияПолучениеПлана(Значение, Обратное = Ложь) Экспорт
	
	Соответствие = СоответствиеПолучениеПлана(Обратное);
	Возврат Соответствие.Получить(Значение);

КонецФункции

Функция ПреобразованиеПеречисленияТипХраненияДанных(Значение, Обратное = Ложь) Экспорт
	
	Соответствие = СоответствиеТипыХраненияДанных(Обратное);
	Возврат Соответствие.Получить(Значение);

КонецФункции

Функция ИмяНастройкиПериодАвтоСохранения() Экспорт
	
	Возврат "ПериодичностьАвтоСохранения";
	
КонецФункции

Функция ИмяНастройкиРасшифровкаТаблицЗначений() Экспорт
	
	Возврат "РасшифровкаТаблицЗначений";
	
КонецФункции

Функция ИмяНастройкиКонструкторЗапросаТонкогоКлиента() Экспорт
	
	Возврат "КонструкторЗапросаТонкогоКлиента";
	
КонецФункции

Функция ИмяНастройкиКонструкторЗапросаТолстогоКлиента() Экспорт
	
	Возврат "КонструкторЗапросаТолстогоКлиента";
	
КонецФункции

Функция ИмяНастройкиКонструкторСКДТолстогоКлиента() Экспорт
	
	Возврат "КонструкторСКДТолстогоКлиента";
	
КонецФункции

Функция ИмяНастройкиПолучениеПлана() Экспорт
	
	Возврат "ПолучениеПлана";
	
КонецФункции

Функция ИмяНастройкиСохранятьДанныеПоУмолчаниюВ() Экспорт
	
	Возврат "СохранятьДанныеПоУмолчаниюВ";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоответствиеРасшифровкаТаблицЗначений(Обратное = Ложь)
	
	Результат = Новый Соответствие;
	Результат.Вставить(ИТКВ_Перечисления.РасшифровкаТаблицЗначенийОтключена(), "Отключена");
	Результат.Вставить(ИТКВ_Перечисления.РасшифровкаТаблицЗначенийПолная(), "Полная");
	Результат.Вставить(ИТКВ_Перечисления.РасшифровкаТаблицЗначенийУпрощенная(), "Упрощенная");
	
	Если Обратное Тогда
		
		Результат = ИТКВ_ОбщийКлиентСервер.ОбратноеСоответствие(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеКонструкторЗапроса(Обратное = Ложь)
	
	Результат = Новый Соответствие;
	Результат.Вставить(ИТКВ_Перечисления.ТипКонструктораЗапросаТолстый(), "Толстый");
	Результат.Вставить(ИТКВ_Перечисления.ТипКонструктораЗапросаУлучшенныйТонкий(), "УлучшенныйТонкий");
	Результат.Вставить(ИТКВ_Перечисления.ТипКонструктораЗапросаТонкий(), "Тонкий");
	
	Если Обратное Тогда
		
		Результат = ИТКВ_ОбщийКлиентСервер.ОбратноеСоответствие(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеКонструкторСКД(Обратное = Ложь)
	
	Результат = Новый Соответствие;
	Результат.Вставить(ИТКВ_Перечисления.ТипКонструктораСКДТолстый(), "Толстый");
	Результат.Вставить(ИТКВ_Перечисления.ТипКонструктораСКДТонкий(), "Тонкий");
	
	Если Обратное Тогда
		
		Результат = ИТКВ_ОбщийКлиентСервер.ОбратноеСоответствие(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеПолучениеПлана(Обратное = Ложь)
	
	Результат = Новый Соответствие;
	Результат.Вставить(ИТКВ_Перечисления.ПолучениеПланаОтключено(), "Отключено");
	Результат.Вставить(ИТКВ_Перечисления.ПолучениеПланаТехнологическийЖурнал(), "ТехнологическийЖурнал");
	
	Если Обратное Тогда
		
		Результат = ИТКВ_ОбщийКлиентСервер.ОбратноеСоответствие(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеТипыХраненияДанных(Обратное = Ложь)
	
	Результат = Новый Соответствие;
	Результат.Вставить(ИТКВ_Перечисления.ТипХраненияДанныхФайл(), "Файл");
	Результат.Вставить(ИТКВ_Перечисления.ТипХраненияДанныхНастройка(), "Настройка");
	
	Если Обратное Тогда
		
		Результат = ИТКВ_ОбщийКлиентСервер.ОбратноеСоответствие(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

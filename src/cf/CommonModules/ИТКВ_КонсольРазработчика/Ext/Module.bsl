#Область ПрограммныйИнтерфейс

// Получает значение переменной
//
// Параметры:
//  Имя  - Строка - Имя переменной
//
// Возвращаемое значение:
//   Произвольный	- Значение переменной
//
Функция ЗначениеПеременной(Имя) Экспорт
	
	Результат = ХранилищеСистемныхНастроек.Загрузить(КлючОбъектаПеременные(), Имя);
	
	Возврат Результат;
	
КонецФункции

// Записывает значение переменной
//
// Параметры:
//  Имя  - Строка - Имя переменной
//  Значение  - Произвольный - Значение переменной
//
Процедура ЗаписатьЗначениеПеременной(Имя, Знач Значение) Экспорт
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъектаПеременные(), Имя, Значение);
	
КонецПроцедуры

// Загружает данные из настроек
//
// Параметры:
//	Имя - Строка - Имя настройки
//
// Возвращаемое значение:
//	Хранилище - Данные
//
Функция ЗагрузитьДанныеИзНастроек(Имя, Пользователь = Неопределено) Экспорт
	
	Результат = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекДанные(), Имя, , Пользователь);
	
	Возврат Результат;
	
КонецФункции

Процедура ПереносНастроекПриПереходеУИРКToolkit() Экспорт
	
	ПереносНастроек("Консоль разработчика (УИР) (данные)", КлючНастроекДанные());
	ПереносНастроек("Консоль разработчика (УИР) (переменные)", КлючОбъектаПеременные());
	
КонецПроцедуры

// Сохраняет данные в хранилище системных настроек
//
// Параметры:
//	Имя - Строка - Имя настройки
//	Данные - Данные - Данные
//
Процедура СохранитьДанные(Имя, Данные) Экспорт
	
	ДвоичныеДанныеMCR = ИТКВ_MCRФормат.ДвоичныеДанныеMCR(Данные);
	ЗаписываемыеДанные = Новый ХранилищеЗначения(ДвоичныеДанныеMCR, Новый СжатиеДанных(9));
	
	ХранилищеСистемныхНастроек.Сохранить(КлючНастроекДанные(), Имя, ЗаписываемыеДанные);
	
КонецПроцедуры

// Удаляет данные из хранилища системных настроек по имени
//
// Параметры:
//  Имя  - Строка - Имя настройки данных
//
Процедура УдалитьДанныеВНастройках(Имя) Экспорт
	
	ХранилищеСистемныхНастроек.Удалить(КлючНастроекДанные(), Имя, Неопределено);
	УдалитьИзПоследнихРабочихДанных(Имя, ИТКВ_Перечисления.ТипХраненияДанныхНастройка());
	
КонецПроцедуры

// Получает наборы данных сохраненных в настройках
//
// Возвращаемое значение:
//   Структура - Данные сохраненные в настройках
//
Функция СохраненныеДанныеВНастройках(ТолькоСвои = Истина) Экспорт
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючОбъекта", КлючНастроекДанные());
	
	Если ТолькоСвои Тогда
		Отбор.Вставить("Пользователь", ТекущийПользователь);
	КонецЕсли;
	
	НастройкиПользователя = Новый СписокЗначений;
	НастройкиДругихПользователей = Новый СписокЗначений;
	
	Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Пользователь = ТекущийПользователь Тогда
			
			НастройкиПользователя.Добавить(Выборка.КлючНастроек);
		
		Иначе
			
			НастройкиДругихПользователей.Добавить(Выборка.Пользователь, Выборка.КлючНастроек);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	
	НастройкиПользователя.СортироватьПоПредставлению();
	Результат.Вставить("Пользователь", НастройкиПользователя);
	
	НастройкиДругихПользователей.СортироватьПоПредставлению();
	Результат.Вставить("Другие", НастройкиДругихПользователей);
	
	Возврат Результат;
	
КонецФункции

// Получает последние рабочие данные
//
// Возвращаемое значение:
//   ТаблицаЗначений - Последние рабочие данные
//
Функция ПоследниеРабочиеДанные() Экспорт
	
	Результат = ЗначениеПеременной("ПоследниеРабочиеДанные");
	
	Если Результат = Неопределено Тогда
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Тип");
		Результат.Колонки.Добавить("Имя");

	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из Результат Цикл
		
		СтрокаТЗ.Тип = ИТКВ_НастройкиКлиентСерверПовтИсп.ПреобразованиеПеречисленияТипХраненияДанных(СтрокаТЗ.Тип, Истина);

	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Сохраняет последние рабочие данные
//
// Параметры:
//   Значение - ТаблицаЗначений - Значение последних рабочих данных
//
Процедура СохранитьПоследниеРабочиеДанные(Значение) Экспорт
	
	Результат = Значение;
	
	Для Каждого СтрокаТЗ Из Результат Цикл
		
		СтрокаТЗ.Тип = ИТКВ_НастройкиКлиентСерверПовтИсп.ПреобразованиеПеречисленияТипХраненияДанных(СтрокаТЗ.Тип);

	КонецЦикла;
	
	ЗаписатьЗначениеПеременной("ПоследниеРабочиеДанные", Результат);

КонецПроцедуры

// Получает все последние данные
//
// Возвращаемое значение:
//   Структура - Набор последних данных
//    *Файлы - Массив(Строка) - Файлы
//    *Настройки - Массив(Строка) - Настройки
//    *Все - Массив(Структура) - Все
//
Функция ПоследниеРабочиеДанныеВсе() Экспорт
	
	// Загружаем значение настройки
	ПоследниеРабочиеДанные = ПоследниеРабочиеДанные();
	
	// Все
	ПоследниеРабочиеДанныеВсе = Новый Массив;
	
	НомерСтроки = 1;
	Для Каждого Строка Из ПоследниеРабочиеДанные Цикл
		
		ПоследниеРабочиеДанныеВсе.Добавить(Новый Структура("Имя, Тип", Строка.Имя, Строка.Тип));
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки > 7 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоследниеРабочиеФайлы = ПоследниеРабочиеДанные.Скопировать(Новый Структура("Тип", ИТКВ_Перечисления.ТипХраненияДанныхФайл()), "Имя").ВыгрузитьКолонку("Имя");
	ПоследниеРабочиеНастройки = ПоследниеРабочиеДанные.Скопировать(Новый Структура("Тип", ИТКВ_Перечисления.ТипХраненияДанныхНастройка()), "Имя").ВыгрузитьКолонку("Имя");
	
	Результат = Новый Структура;
	Результат.Вставить("Файлы", ПоследниеРабочиеФайлы);
	Результат.Вставить("Настройки", ПоследниеРабочиеНастройки);
	Результат.Вставить("Все", ПоследниеРабочиеДанныеВсе);
	
	Возврат Результат;
	
КонецФункции

// Добавляет в последние рабочие данные
//
// Параметры:
//   Имя - Строка - Имя
//   Тип - Перечисление.ИТКВ_ТипыХраненияДанных - Тип хранения данных
//
Процедура ДобавитьВПоследниеРабочиеДанные(Имя, Тип) Экспорт
	
	ПоследниеРабочиеДанные = ПоследниеРабочиеДанные();
	
	// Добавляем файл в начало списка
	ДобавитьЭлементВПоследниеРабочиеДанные(ПоследниеРабочиеДанные, Имя, Тип);
	
	СохранитьПоследниеРабочиеДанные(ПоследниеРабочиеДанные);
	
КонецПроцедуры

// Удаляет из последних рабочих данных
//
// Параметры:
//   Имя - Строка - Имя рабочих данных
//   Тип - Перечисление.ИТКВ_ТипыХраненияДанных - Тип хранения данных
//
Процедура УдалитьИзПоследнихРабочихДанных(Имя, Тип) Экспорт
	
	ПоследниеРабочиеДанные = ПоследниеРабочиеДанные();
	
	НайденныеСтроки = ПоследниеРабочиеДанные.НайтиСтроки(Новый Структура("Тип, Имя", Тип, Имя));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПоследниеРабочиеДанные.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
	СохранитьПоследниеРабочиеДанные(ПоследниеРабочиеДанные);
	
КонецПроцедуры

Процедура АвтоматическоеСохранение(Параметры, АдресРезультата = Неопределено) Экспорт
	
	СохраняемыеДанные = Новый Структура;
	СохраняемыеДанные.Вставить("Данные", Новый ХранилищеЗначения(ИТКВ_MCRФормат.ДвоичныеДанныеMCR(Параметры.Данные), Новый СжатиеДанных(9)));
	СохраняемыеДанные.Вставить("Тип", Параметры.Тип);
	
	ИТКВ_КонсольРазработчика.ЗаписатьЗначениеПеременной("АвтоматическоеСохранениеДанных", СохраняемыеДанные);
	
КонецПроцедуры

// Подготавливает данные для сравнения
//
// Параметры:
//	ДанныеЭталон - Данные - Данные эталон
//	ДанныеНовый - Данные - Данные новый
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
Процедура ПодготовитьДанныеДляСравнения(Параметры, АдресРезультата) Экспорт
	
	Шаг = 1; КоличествоШагов = 2;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Эталон", ПодготовитьРезультатДляСравнения(Параметры.Эталон,
				ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Первый результат'; en = 'First result'"), Шаг, КоличествоШагов)));
	
	Результат.Вставить("Новый", ПодготовитьРезультатДляСравнения(Параметры.Новый,
				ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Второй результат'; en = 'Second result'"), Шаг, КоличествоШагов)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ЗначенияВнешнихИсточников(Данные, СКД = Ложь) Экспорт
	
	Если СКД Тогда
		Результат = Новый Структура;
	Иначе
		Результат = Новый Соответствие;
	КонецЕсли;
		
	Для Каждого ВнешнийИсточник Из ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ВнешниеИсточники(Данные) Цикл
		
		ОписаниеЗначения = ВнешнийИсточник.Значение;
		Имя = ОписаниеЗначения.Имя;
		
		Если ОписаниеЗначения.Тип = ИТКВ_Перечисления.ТипЗначенияВнешнегоИсточникаВыражение() Тогда
			
			Комментарий = СтрШаблон(НСтр("ru = 'Внешний источник: %1'; en = 'External source: %1'"), Имя);
			Значение = ИТКВ_ОбщийВызовСервера.ВычислитьВыражениеНаВстроенномЯзыке(ОписаниеЗначения.Значение, Комментарий);
			
		ИначеЕсли ЭтоАдресВременногоХранилища(ОписаниеЗначения.Значение) Тогда
			
			Значение = ПолучитьИзВременногоХранилища(ОписаниеЗначения.Значение);
			
		Иначе
			
			Значение = ОписаниеЗначения.Значение;
			
		КонецЕсли;
		
		Результат.Вставить(Имя, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючНастроекДанные()
	
	Возврат "Консоль разработчика (Infostart Toolkit) (данные)";
	
КонецФункции

Функция КлючОбъектаПеременные()
	
	Возврат "Консоль разработчика (Infostart Toolkit) (переменные)";
	
КонецФункции

Процедура ДобавитьЭлементВПоследниеРабочиеДанные(ПоследниеРабочиеДанные, Имя, Тип)
	
	НайденныеСтроки = ПоследниеРабочиеДанные.НайтиСтроки(Новый Структура("Тип, Имя", Тип, Имя));
	Если НайденныеСтроки.Количество() Тогда
		
		Строка = НайденныеСтроки[0];
		ПоследниеРабочиеДанные.Сдвинуть(Строка, -ПоследниеРабочиеДанные.Индекс(Строка));
		
	Иначе
		
		Строка = ПоследниеРабочиеДанные.Вставить(0);
		Строка.Тип = Тип;
		Строка.Имя = Имя;
		
	КонецЕсли;
	
	// Удалим лишние строки
	НайденныеСтроки = ПоследниеРабочиеДанные.НайтиСтроки(Новый Структура("Тип", Тип));
	Если НайденныеСтроки.Количество() > 7 Тогда
		ПоследниеРабочиеДанные.Удалить(НайденныеСтроки[НайденныеСтроки.ВГраница()]);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьРезультатДляСравнения(Данные, ГлавнаяОперация)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", Данные);
	Параметры.Вставить("ГлавнаяОперация", ГлавнаяОперация);
	
	Если ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ЭтоОдинИзТиповСтрокиЗапрос(Данные.Тип) Тогда
		
		Параметры.Вставить("Режим", ИТКВ_Перечисления.РежимВыполненияЗапросаВыполнение());
		Параметры.Вставить("ИгнорироватьЛимитСтрок", Истина);
		Возврат ИТКВ_Запрос.ПолучитьРезультат(Параметры);
		
	ИначеЕсли ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ЭтоОдинИзТиповСтрокиСКД(Данные.Тип) Тогда
		
		Параметры.Вставить("Режим", ИТКВ_Перечисления.РежимВыполненияСКДВыполнение());
		Возврат ИТКВ_СКД.ПолучитьРезультат(Параметры);
		
	КонецЕсли;
	
КонецФункции

Процедура ПереносНастроек(СтарыйКлюч, НовыйКлюч) Экспорт
	
	СписокНастроек = ХранилищеСистемныхНастроек.ПолучитьСписок(СтарыйКлюч);
	Для Каждого Настройка Из СписокНастроек Цикл
		
		Имя = Настройка.Значение;
		
		ДанныеНастройки = ХранилищеСистемныхНастроек.Загрузить(СтарыйКлюч, Имя);
		ХранилищеСистемныхНастроек.Сохранить(НовыйКлюч, Имя, ДанныеНастройки);
		ХранилищеСистемныхНастроек.Удалить(СтарыйКлюч, Имя, Неопределено);

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

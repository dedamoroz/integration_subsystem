#Область ПрограммныйИнтерфейс

// Проверяет строка многострочная?
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, если строка многострочная
//
Функция МногострочнаяСтрока(Строка) Экспорт
	
	Возврат Булево(СтрНайти(Строка, Символы.ПС));
	
КонецФункции

// Проверяет является ли строка корректным идентификатором, строка вида СуммаКонтрагента, _Идентификатор
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, идентификатор некорректный
//
Функция НекорректныйИдентификатор(Строка, ДополнительныеСимволы = "_") Экспорт
	
	ПервыйСимволСимволы = НаборСимволовРусскиеЛатинскиеБуквы() + ДополнительныеСимволы;
	ПоследующиеСимволы = НаборСимволовРусскиеЛатинскиеБуквы() + НаборСимволовЦифры() + ДополнительныеСимволы;
	
	Результат = Ложь;
	
	Если ПустаяСтрока(Строка) ИЛИ Не СтрНайти(ПервыйСимволСимволы, Лев(Строка, 1)) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Для Сч = 2 По СтрДлина(Строка) Цикл
		
		Символ = Сред(Строка, Сч, 1);
		
		Если Не СтрНайти(ПоследующиеСимволы, Символ) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует строку к коректному идентификатору если это возможно
//
// Параметры:
//   Строка - Строка - Преобразуемая строка
//
// Возвращаемое значение:
//   Строка - Корректный идентификатор, Неопределено - невозможно преобразовать к корректному идентификатору
//
Функция КорректныйИдентификатор(Строка) Экспорт
	
	НаборСимволовРусскиеЛатинскиеБуквы = НаборСимволовРусскиеЛатинскиеБуквы();
	ПервыйСимволСимволы = НаборСимволовРусскиеЛатинскиеБуквы + "_";
	ПоследующиеСимволы = НаборСимволовРусскиеЛатинскиеБуквы + НаборСимволовЦифры() + "_";
	
	Результат = "";
	ПервыйСимвол = Лев(Строка, 1);
	Если СтрНайти(ПервыйСимволСимволы, ПервыйСимвол) Тогда
		Результат = Результат + ПервыйСимвол;
	КонецЕсли;
	
	ПредыдущийСимвол = Неопределено;
	Для Сч = 2 По СтрДлина(Строка) Цикл
		
		Символ = Сред(Строка, Сч, 1);
		
		Если ПредыдущийСимвол = " " И СтрНайти(НаборСимволовРусскиеЛатинскиеБуквы, Символ) Тогда
			
			Результат = Результат + ВРег(Символ);
			
		ИначеЕсли СтрНайти(ПоследующиеСимволы, Символ) Тогда
			
			Результат = Результат + Символ;
		
		КонецЕсли;
		
		ПредыдущийСимвол = Символ;
		
	КонецЦикла;
	
	Если НекорректныйИдентификатор(Результат) Тогда
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ИндексИдентификатора(Строка) Экспорт
	
	НаборСимволовЦифры = НаборСимволовЦифры();
	Длина = СтрДлина(Строка);
	
	Индекс = Длина;
	Пока Индекс > 1 Цикл
		
		Если Не СтрНайти(НаборСимволовЦифры, Сред(Строка, Индекс, 1)) Тогда
			Прервать;
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Если Индекс = Длина Тогда
		Возврат 0;
	КонецЕсли;
		
	Результат = Сред(Строка, Индекс + 1);
	Возврат Число(Результат);
	
КонецФункции

// Чтение целого число из строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Число	- Прочитанное целое число
//
Функция РазборПрочитатьЦелоеЧисло(Строка, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс > 0 Цикл
			
			Если Не СтрНайти(НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс);
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл
			
			Если Не СтрНайти(НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс);
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Число(Результат);
	
КонецФункции

// Чтение шестнадцатеричного числа из строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Число	- Прочитанное целое число
//
Функция РазборПрочитатьШестнадцатеричноеЧисло(Строка, НачальныйИндекс = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если НачальныйИндекс = Неопределено Тогда
		НачальныйИндекс = 1;
	КонецЕсли;
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл
		
		Если Не СтрНайти(НаборСимволовШестнадцатеричныеЦифры(), Сред(Строка, Индекс, 1)) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс);
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Чтение незначащих символов (пробел, табуляция, перенос строки)
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанные незначимые символы
//
Функция РазборПрочитатьНезначимые(Строка, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс > 0 Цикл
			
			Если Не СтрНайти(НаборСимволовЦифры(), Сред(Строка, Индекс, 1)) Тогда
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс);
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл
			
			Если Не СтрНайти(НаборНезначащихСимволов(), Сред(Строка, Индекс, 1)) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс);
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Чтение идентификатора строки
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный идентификатор
//
Функция РазборПрочитатьИдентификатор(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	НаборСимволовИдентификатор = НаборСимволовРусскиеЛатинскиеБуквы() + НаборСимволовЦифры() + "_";
	НаборСимволовИдентификаторПервыйСимвол = НаборСимволовРусскиеЛатинскиеБуквы() + "_";
	
	Для Индекс = НачальныйИндекс По СтрДлина(Строка) Цикл
		
		Символ = Сред(Строка, Индекс, 1);
		Если Индекс = НачальныйИндекс Тогда
			НаборСимволов = НаборСимволовИдентификаторПервыйСимвол;
		Иначе
			НаборСимволов = НаборСимволовИдентификатор;
		КонецЕсли;
		
		Если Не СтрНайти(НаборСимволов, Символ) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс);
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Чтение набора символов
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НаборСимволов - Строка - Набор символов
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка
//
Функция РазборПропуститьНаборСимволов(Строка, НаборСимволов, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	Результат = "";
	
	Для Индекс = 1 По СтрДлина(НаборСимволов) Цикл
		Результат = Результат + РазборПропуститьСимвол(Строка, Сред(НаборСимволов, Индекс, 1), НачальныйИндекс, СмещатьИндекс);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Чтение символа
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачальныйИндекс - Число - Начальный индекс
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанный символ
//
Функция РазборПрочитатьСимвол(Строка, НачальныйИндекс = 1, СмещатьИндекс = Истина) Экспорт
	
	Результат = Сред(Строка, НачальныйИндекс, 1);
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = НачальныйИндекс + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Чтение строки до символа
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   Символ - Строка - Стоп символ
//   НачальныйИндекс - Число - Начальный индекс
//   Направление - НаправлениеПоиска - Направление поиска (по умолчанию: НаправлениеПоиска.СНачала)
//   СмещатьИндекс - Булево - Смещать индекс (по умолчанию: Истина)
//
// Возвращаемое значение:
//   Строка	- Прочитанная строка до стоп символа
//
Функция РазборПрочитатьДоСимвола(Строка, Символ, НачальныйИндекс = Неопределено, Направление = Неопределено, СмещатьИндекс = Истина) Экспорт
	
	Если Направление = Неопределено Тогда
		Индекс = СтрНайти(Строка, Символ, , НачальныйИндекс);
	Иначе
		Индекс = СтрНайти(Строка, Символ, Направление, НачальныйИндекс);
	КонецЕсли;
	
	Если Направление = НаправлениеПоиска.СКонца Тогда
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = СтрДлина(Строка);
		КонецЕсли;
		
		Результат = Сред(Строка, Индекс + 1, НачальныйИндекс - Индекс);
		
	Иначе
		
		Если НачальныйИндекс = Неопределено Тогда
			НачальныйИндекс = 1;
		КонецЕсли;
		
		Результат = Сред(Строка, НачальныйИндекс, Индекс - НачальныйИндекс);
		
	КонецЕсли;
	
	Если СмещатьИндекс Тогда
		НачальныйИндекс = Индекс;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Найти текст, пропустить
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   Текст - Строка - Искомый текст
//   НачальныйИндекс - Число - Начальный индекс
//   НомерВхождения - Число - Номер вхождения
//
// Возвращаемое значение:
//   Булево	- Истина, Искомый текст найден
//
Функция РазборНайтиТекст(Строка, Текст, НачальныйИндекс = 1, НомерВхождения = 1) Экспорт
	
	Индекс = СтрНайти(Строка, Текст, , НачальныйИндекс, НомерВхождения);
	Если ЗначениеЗаполнено(Индекс) Тогда
		
		РазборПропуститьНаборСимволов(Строка, Текст, Индекс);
		НачальныйИндекс = Индекс;
		
		Возврат Истина
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Прочитать блок, PlanSQL='select'
//
// Параметры:
//   Строка - Строка - Разбираемая строка
//   НачалоБлока - Строка - Текст начала читаемого блока
//   КонецБлока - Строка - Текст конца читаемого блока
//   НачальныйИндекс - Число - Начальный индекс
//
// Возвращаемое значение:
//   Булево	- Истина, Искомый текст найден
//
Функция РазборПрочитатьБлок(Строка, НачалоБлока, КонецБлока, НачальныйИндекс = 1) Экспорт
	
	Результат = "";
	Если РазборНайтиТекст(Строка, НачалоБлока, НачальныйИндекс) Тогда
		
		СимволБлока = РазборПрочитатьСимвол(Строка, НачальныйИндекс, Ложь);
		Если СимволБлока = Символ(34) ИЛИ СимволБлока = "'" Тогда
			РазборПропуститьНаборСимволов(Строка, СимволБлока, НачальныйИндекс);
		Иначе
			СимволБлока = "";
		КонецЕсли;
		
		ИндексНачалаБлока = НачальныйИндекс;
		ИскомыйТекстКонецБлока = СимволБлока + КонецБлока;
		РазборНайтиТекст(Строка, ИскомыйТекстКонецБлока, НачальныйИндекс);
		ИндексКонцаБлока = НачальныйИндекс - СтрДлина(ИскомыйТекстКонецБлока);
		
		Результат = Сред(Строка, ИндексНачалаБлока, ИндексКонцаБлока - ИндексНачалаБлока);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает число из строки 36-E6 в 0.000006
//
// Параметры:
//   Строка - Строка - Экспоненциальное число
//
// Возвращаемое значение:
//   Число - Число
//
Функция ЭкспоненциальноеЧисло(Строка) Экспорт

	Результат = 0;
	Строка = ВРег(СокрЛП(Строка));
	Если СтрДлина(Строка) > 0 Тогда
		
		ИндексЭкспоненты  = СтрНайти(Строка, "E");
		Если ИндексЭкспоненты = 0 Тогда
			
			Результат = Число(Строка);
			
		Иначе
			
			ЧислоДоЭкспоненты = Число(Лев(Строка, ИндексЭкспоненты - 1));
			ЧислоПослеЭкспоненты = Число(Сред(Строка, ИндексЭкспоненты + 1));
			Результат =  ЧислоДоЭкспоненты * Pow(10 , ЧислоПослеЭкспоненты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет замену символов в строке.
// Предназначена для простых случаев, например, для замены латиницы на похожие кириллические символы.
//
// Параметры:
//  ЗаменяемыеСимволы - Строка - строка символов, каждый из которых требует замены;
//  Значение          - Строка - исходная строка, в которой требуется замена символов;
//  СимволыЗамены     - Строка - строка символов, на каждый из которых нужно заменить символы параметра
//                               ЗаменяемыеСимволы.
// 
// Возвращаемое значение:
//  Строка - строка после замены символов.
//
Функция ЗаменитьОдниСимволыДругими(ЗаменяемыеСимволы, Значение, СимволыЗамены) Экспорт
	
	Результат = Значение;
	
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Результат = СтрЗаменить(Результат, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), Сред(СимволыЗамены, НомерСимвола, 1));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку пустой уникальный идентификатор
// Возвращаемое значение:
//   Строка - Пустой уникальный идентификатор
Функция ПустойУникальныйИдентификатор() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции

// Получает короткое представление имени файла
// Параметры:
//   ПолноеИмяФайла - Строка - Полное имя файла
// Возвращаемое значение:
//   Строка - короткое представление имени файла
Функция ПолноеИмяФайлаКратко(ПолноеИмяФайла) Экспорт
	
	ПозицияСимвола = СтрНайти(ПолноеИмяФайла, ПолучитьРазделительПути(), НаправлениеПоиска.СКонца);
	ПутьКФайлу = Лев(ПолноеИмяФайла, ПозицияСимвола - 1);
	ИмяФайла = Сред(ПолноеИмяФайла, ПозицияСимвола + 1);
	
	КраткоеПолноеИмяФайла = "";
	Если СтрДлина(ПутьКФайлу) > 7 Тогда
		ПутьКФайлу = Лев(ПутьКФайлу, 7) + "...";
		КраткоеПолноеИмяФайла = ПутьКФайлу + ПолучитьРазделительПути() + ИмяФайла;
	Иначе
		КраткоеПолноеИмяФайла = ПолноеИмяФайла;
	КонецЕсли;
	
	Возврат КраткоеПолноеИмяФайла;
	
КонецФункции

// Добавляет табуляцию в многострочный текст
//
// Параметры:
//   Текст - Строка - Текст
//   ДобавлятьВПервуюСтрока - Булево - Добавлять в первую строку
//   Количество - Число - Количество добавляемых табуляций
//
// Возвращаемое значение:
//   Строка - Текст с добавленной табуляцией
//
Функция ДобавитьТабВМногострочныйТекст(Текст, ДобавлятьВПервуюСтрока = Истина, Количество = 1) Экспорт
	
	ВставляемыеСимволы = "";
	Для Счетчик = 1 По Количество Цикл
		ВставляемыеСимволы = ВставляемыеСимволы + Символы.Таб;
	КонецЦикла;
	
	Результат = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + ВставляемыеСимволы);
	Если ДобавлятьВПервуюСтрока Тогда
		Результат = ВставляемыеСимволы + Результат;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Форматирует текст укорачивая до заданной длины
//
// Параметры:
//   Текст - Строка - Текст
//   Количество - Число - Количество символов
//   Многострочная - Булево - Многострочное использование
//
// Возвращаемое значение:
//   Строка - Отформатированный текст
//
Функция Сокращенно(Текст, Количество, Многострочная = Ложь) Экспорт
	
	ТекстМногострочный = МногострочнаяСтрока(Текст);
	
	Если ТекстМногострочный
		И НЕ Многострочная Тогда
		
		ПерваяСтрока = СтрПолучитьСтроку(Текст, 1);
		Результат = Сократить(ПерваяСтрока, Количество, Истина);
		
	Иначе
		
		Результат = Сократить(Текст, Количество);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает текст "Временная таблица" на нужном языке
//
// Возвращаемое значение:
//   Строка - текст "Временная таблица" на нужном языке
//
Функция ИмяВнешнегоИсточника() Экспорт
	
	Возврат НСтр("ru = 'Таблица'; en = 'Table'");
	
КонецФункции

// Возвращает текст "Параметр" на нужном языке
//
// Возвращаемое значение:
//   Строка - текст "Параметр" на нужном языке
//
Функция ТекстПараметр() Экспорт
	
	Возврат НСтр("ru = 'Параметр'; en = 'Parameter'");
	
КонецФункции

// Возвращает текст "n строк" с верным окончанием
//
// Параметры:
//   Количество - Число - Количество строк
//
// Возвращаемое значение:
//   Строка - Текст "n строк" с верным окончанием
//
Функция ТекстНекотороеКоличествоСтрок(Количество) Экспорт
	
	Если Количество = 0 Тогда
		Возврат НСтр("ru = '0 строк'; en = '0 rows'");
	КонецЕсли;
	
	Возврат СтрокаСЧислом(НСтр("ru = '%1 строк; %1 строка; %1 строки; %1 строки; %1 строк; %1 строк';
							   |en = '%1 rows; %1 row; %1 rows; %1 rows; %1 rows; %1 rows'"), Количество, ВидЧисловогоЗначения.Количественное);
	
КонецФункции

// Возвращает Число в виде строки
//
// Параметры:
//   Число - Число - Преобразуемое число
//
// Возвращаемое значение:
//   Строка - Число в виде строки
//
Функция ЧислоВСтроку(Число) Экспорт
	
	Возврат Формат(Число, "ЧН=; ЧГ=");
	
КонецФункции

// Возвращает краткое представление интервала времени (в секундах)
//
// Параметры:
//   КоличествоСекунд - Число - Количество секунд в интервале
//
// Возвращаемое значение:
//   Строка - Представление интервала
//
Функция КраткоеПредставлениеИнтервалаВремени(КоличествоСекунд) Экспорт
	
	Если КоличествоСекунд = 0 Тогда
		Возврат НСтр("ru = 'меньше секунды'; en = 'less than a second'");
	КонецЕсли;
	
	СекундВМинуте = 60;
	СекундВЧасе = 60 * СекундВМинуте;
	СекундВДне = 24 * СекундВЧасе;
	СекундВНеделе = 7 * СекундВДне;
	СекундМесяце = 30 * СекундВНеделе;
	
	Результат = Новый Массив;
	ОстатокИнтервала = КоличествоСекунд;
	
	Месяцев = Цел(ОстатокИнтервала / СекундМесяце);
	ОстатокИнтервала = ОстатокИнтервала % СекундМесяце;
	Если ЗначениеЗаполнено(Месяцев) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 мес.'; en = '%1 m.'"), Месяцев));
	КонецЕсли;
	
	Недель = Цел(ОстатокИнтервала / СекундВНеделе);
	ОстатокИнтервала = ОстатокИнтервала % СекундВНеделе;
	Если ЗначениеЗаполнено(Недель) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 нед.'; en = '%1 w.'"), Недель));
	КонецЕсли;
	
	Дней = Цел(ОстатокИнтервала / СекундВДне);
	ОстатокИнтервала = ОстатокИнтервала % СекундВДне;
	Если ЗначениеЗаполнено(Дней) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 дн.'; en = '%1 d.'"), Дней));
	КонецЕсли;
	
	Часов = Цел(ОстатокИнтервала / СекундВЧасе);
	ОстатокИнтервала = ОстатокИнтервала % СекундВЧасе;
	Если ЗначениеЗаполнено(Часов) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 ч.'; en = '%1 h.'"), Часов));
	КонецЕсли;
	
	Минут = Цел(ОстатокИнтервала / СекундВМинуте);
	ОстатокИнтервала = ОстатокИнтервала % СекундВМинуте;
	Если ЗначениеЗаполнено(Минут) Тогда
		Результат.Добавить(СтрШаблон(НСтр("ru = '%1 мин.'; en = '%1 min.'"), Минут));
	КонецЕсли;
	
	Если КоличествоСекунд < 15 * 60 Тогда
	
		Если Минут > 1 Тогда
			ОстатокИнтервала = Цел(ОстатокИнтервала / 15) * 15; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОстатокИнтервала) Тогда
			
			Если ОстатокИнтервала < 1 Тогда
				Разрядность = 3;
			ИначеЕсли ОстатокИнтервала < 5 Тогда
				Разрядность = 2;
			Иначе
				Разрядность = 1;
			КонецЕсли;
			
			Результат.Добавить(СтрШаблон(НСтр("ru = '%1 сек.'; en = '%1 sec.'"), Окр(ОстатокИнтервала, Разрядность)));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

// Возвращает расширение по полному имени файла
//
// Параметры:
//   ПолноеИмяФайла - Строка - Полное имя файла
//
// Возвращаемое значение:
//   Строка - Расширение файла
//
Функция РасширениеФайла(ПолноеИмяФайла) Экспорт
	
	ИндексТочки = СтрНайти(ПолноеИмяФайла, ".", НаправлениеПоиска.СКонца);
	Результат = "";
	Если ЗначениеЗаполнено(ИндексТочки) Тогда
		Результат = ВРег(Сред(ПолноеИмяФайла, ИндексТочки + 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает новый идентификатор который генерируется с учетом используемых
//
// Параметры:
//   Префикс - Строка - Префикс
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Строка - Новый идентификатор
//
Функция НовыйИдентификатор(Префикс, ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	НачальныйНомер = 0;
	
	Для Каждого ИспользуемыйИдентификатор Из ЗанятыеИдентификаторы Цикл
		
		Если СтрСравнить(Лев(ИспользуемыйИдентификатор, СтрДлина(Префикс)), Префикс) = 0 Тогда // Строка начинается с префикса
			
			ИспользуемыйНомер = Сред(ИспользуемыйИдентификатор, СтрДлина(Префикс) + 1);
			
			Если ЭтоЦелоеЧисло(ИспользуемыйНомер) Тогда
				НачальныйНомер = Макс(НачальныйНомер, Число(ИспользуемыйНомер));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрШаблон("%1%2", Префикс, ЧислоВСтроку(НачальныйНомер + 1));
	
КонецФункции

// Проверяет идентификатор
//
// Параметры:
//   Идентификатор - Строка - Идентификатор
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Массив - Ошибки проверки
//
Функция ПроверкаИдентификатора(Идентификатор, ЗанятыеИдентификаторы = Неопределено, ДополнительныеСимволы = "") Экспорт
	
	Ошибки = Новый Массив;
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	Если НекорректныйИдентификатор(Идентификатор, ДополнительныеСимволы) Тогда
		
		Шаблон = НСтр("ru = 'Неверное имя. Имя должно состоять из одного слова, начинаться с буквы или ""%1""
                              |и не содержать специальных символов кроме ""%1""';
							  |en = 'Invalid name. The name must consist of one word, begin with a letter or ""%1""
                              |and do not contain special characters except ""%1""'");
		Ошибки.Добавить(СтрШаблон(Шаблон, ДополнительныеСимволы));
		
	КонецЕсли;
	
	ИдентификаторИспользуется = (ЗанятыеИдентификаторы.Найти(Идентификатор) <> Неопределено);
	Если ИдентификаторИспользуется Тогда
		Ошибки.Добавить(НСтр("ru = 'Идентификатор используется'; en = 'ID used'"));
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

// Проверяет идентификатор строка
//
// Параметры:
//   Идентификатор - Строка - Идентификатор строка
//   ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//
// Возвращаемое значение:
//   Массив - Ошибки проверки
//
Функция ПроверкаИдентификатораСтрока(Идентификатор, ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Ошибки = Новый Массив;
	
	Если ЗанятыеИдентификаторы = Неопределено Тогда
		ЗанятыеИдентификаторы = Новый Массив;
	КонецЕсли;
	
	Если Идентификатор = "" Тогда
		Ошибки.Добавить(НСтр("ru = 'Пустой идентификатор'; en = 'Empty id'"));
	КонецЕсли;
	
	ИдентификаторИспользуется = (ЗанятыеИдентификаторы.Найти(Идентификатор) <> Неопределено);
	Если ИдентификаторИспользуется Тогда
		Ошибки.Добавить(НСтр("ru = 'Идентификатор используется'; en = 'ID used'"));
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

// Возвращает пустой UID "00000000000000000000000000000000"
//
// Возвращаемое значение:
//   Строка - Пустой UID
//
Функция ПустойUID() Экспорт
	
	Возврат "00000000000000000000000000000000";
	
КонецФункции

// Проверяет является ли строка UID
//
// Параметры:
//   ПроверяемаяСтрока - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, это UID
//
Функция ЭтоUID(ПроверяемаяСтрока) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверяемаяСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Длина = СтрДлина(ПроверяемаяСтрока);
	Формат = "HHHHHHHH-HHHH-HHHH-HHHH-HHHHHHHHHHHH";
	Если Длина <> СтрДлина(Формат) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	НаборСимволовШестнадцатеричныеЦифры = НаборСимволовШестнадцатеричныеЦифры();
	
	Для Сч = 1 По Длина Цикл
		
		Символ = Сред(ПроверяемаяСтрока, Сч, 1);
		СимволФормата = Сред(Формат, Сч, 1);
		
		Если (СимволФормата = "H"
						И СтрНайти(НаборСимволовШестнадцатеричныеЦифры, Символ) = 0)
				ИЛИ (СимволФормата <> "H"
						И Символ <> СимволФормата) Тогда
				
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет является ли строка представление битой ссылки
//
// Параметры:
//   ПроверяемаяСтрока - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, представление битой ссылки
//
Функция ЭтоПредставлениеБитаяСсылка(Строка) Экспорт
	
	Возврат СтрНачинаетсяС(Строка, НСтр("ru = '<Объект не найден>'; en = '<Object not found>'"));
	
КонецФункции

Функция ЭтоНавигационнаяСсылка(Строка) Экспорт
	
	Возврат Булево(СтрНайти(Строка, МаркерНавигационнойСсылки()));
	
КонецФункции

Функция МаркерНавигационнойСсылки() Экспорт
	
	Возврат "e1cib/data/";
	
КонецФункции

// Сокращает текст до N символов
//
// Параметры:
//   Текст - Строка - Текст
//   Количество - Число - Количество символов
//   ВсегдаДобавлятьЗавершение - Булево - Всегда добавлять завершающий символы...
//
// Возвращаемое значение:
//   Строка - Сокращенная строка
//
Функция Сократить(Текст, Количество, ВсегдаДобавлятьЗавершение = Ложь) Экспорт
	
	Завершение = "...";
	НормальнаяДлина = Количество - СтрДлина(Завершение);
	
	Длина = СтрДлина(Текст);
	Если Длина > НормальнаяДлина Тогда
		
		Результат = Лев(Текст, НормальнаяДлина) + Завершение;
		
	Иначе
		
		Результат = Текст;
		Если ВсегдаДобавлятьЗавершение Тогда
			Результат = Результат + Завершение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить строку Этапа процесса по шаблону 
//
// Параметры:
//   Текст - Строка - Текст
//   Шаг - Число - Шаг
//   КоличествоШагов - Число - Общее число шагов
//
// Возвращаемое значение:
//   Строка	- Представление этапа
//
Функция ТекстЭтапаПроцесса(Текст, Шаг, КоличествоШагов, ГлавнаяОперация = Неопределено) Экспорт
	
	Если КоличествоШагов = 1 Тогда
		Результат = Текст;
	Иначе
		Результат = СтрШаблон("(%1/%2) - %3", Шаг, КоличествоШагов, Текст);
	КонецЕсли;
	
	Шаг = Шаг + 1;
	
	Если ЗначениеЗаполнено(ГлавнаяОперация) Тогда
		
		Результат = СтрШаблон("%1 (%2)", ГлавнаяОперация, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВШаблоне(Строка) Экспорт
	
	Возврат СтрШаблон(Строка, "%", "%%");
	
КонецФункции

Функция УдалитьПрефикс(Строка, Префикс) Экспорт
	
	Если СтрНачинаетсяС(Строка, Префикс) Тогда
		
		Результат = Сред(Строка, СтрДлина(Префикс) + 1);
		
	Иначе
		
		Результат = Строка;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьПостфикс(Строка, Постфикс) Экспорт
	
	Если СтрЗаканчиваетсяНа(Строка, Постфикс) Тогда
		
		Результат = Лев(Строка, СтрДлина(Строка) - СтрДлина(Постфикс) - 1);
		
	Иначе
		
		Результат = Строка;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Зашифровать(Строка) Экспорт

	Результат = "";
	Для Сч = 1 По СтрДлина(Строка) Цикл
		
		КодСимвола = КодСимвола(Сред(Строка, Сч, 1));
		Результат = Результат + Символ(КодСимвола * 4);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Расшифровать(Строка) Экспорт
	
	Результат = "";
	Для Сч = 1 По СтрДлина(Строка) Цикл
		
		КодСимвола = КодСимвола(Сред(Строка, Сч, 1));
		Результат = Результат + Символ(Цел(КодСимвола / 4));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АнализируемаяСтрокаПоискаПоПодобию(Строка) Экспорт
	
	Возврат НРег(Строка);
	
КонецФункции

Функция НайденоПоПодобию(Строка, ЧастиПодобия) Экспорт
	
	Результат = Истина;
	Для Каждого ЧастьПодобия Из ЧастиПодобия Цикл
		
		Если Не СтрНайти(Строка, ЧастьПодобия) Тогда
				
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЧастиПоискаПоПодобию(Строка) Экспорт
	
	Результат = СтрРазделить(Строка, " ", Ложь);
	
	Для Индекс = 0 По Результат.ВГраница() Цикл
		Результат[Индекс] = НРег(Результат[Индекс]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстНеопределено() Экспорт
	
	Возврат НСтр("ru = 'Не определено'; en = 'Undefined'");
	
КонецФункции

Функция ТекстЗаданиеВыполняется() Экспорт
	
	Возврат НСтр("ru = 'Задание выполняется'; en = 'Task in progress'");
	
КонецФункции

Функция ТекстЗаданиеЗавершеноСОшибками() Экспорт
	
	Возврат НСтр("ru = 'Задание завершено с ошибками'; en = 'Job completed with errors'");
	
КонецФункции

Функция ПредставлениеИдентификатора(Строка) Экспорт
	
	Результат = Сред(Строка, 1, 1);
	Для Сч = 2 По СтрДлина(Строка) Цикл
		
		ПредыдущийСимвол = Сред(Строка, Сч - 1, 1);
		ТекущийСимвол = Сред(Строка, Сч, 1);
		СледующийСимвол = Сред(Строка, Сч + 1, 1);
		ПослеследующийСимвол = Сред(Строка, Сч + 2, 1);
		
		Если ТекущийСимвол = "_" Тогда
			
			Результат = Результат + " ";
			Продолжить;
			
		ИначеЕсли ВРег(ТекущийСимвол) = ТекущийСимвол Тогда
			
			Если ВРег(ПредыдущийСимвол) <> ПредыдущийСимвол
					ИЛИ (ПредыдущийСимвол <> "_"
						И ВРег(ПредыдущийСимвол) = ПредыдущийСимвол
						И ВРег(СледующийСимвол) <> СледующийСимвол) Тогда
			
				Результат = Результат + " ";
				Если ВРег(СледующийСимвол) <> СледующийСимвол
						ИЛИ ВРег(ПослеследующийСимвол) <> ПослеследующийСимвол Тогда
					ТекущийСимвол = НРЕГ(ТекущийСимвол);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Результат + ТекущийСимвол;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиИВыделитьОформлением(Строка, Поиск) Экспорт
	
	ШрифтВыделения = Новый Шрифт(,, Истина); // жирный
    ЦветВыделения = Новый Цвет(0, 153, 0); // светло-зеленый из стандартной подсветки ввода по строке
	
	СтрокаНРег = НРег(Строка);
	ДлинаСтроки = СтрДлина(Строка);
	ЧастиПоиска = ЧастиПоискаПоПодобию(Поиск);
	
	МассивРезультирующихСтрок = Новый Массив;
	
	СтрокаНРег = НРег(Строка);
	ДлинаСтроки = СтрДлина(Строка);
	
	// Получим список диапазонов символов для выделения
	Диапазоны = Новый СписокЗначений;
	Для НомерСлова = 1 По ЧастиПоиска.Количество() Цикл
		
		СловоПодсветки = ЧастиПоиска[НомерСлова - 1];
		ДлинаСлова = СтрДлина(СловоПодсветки);
		
		ПозицияНачалаСлова = 1;
		Пока ПозицияНачалаСлова <> 0 И ПозицияНачалаСлова <= ДлинаСтроки Цикл
			
			ПозицияНачалаСлова = СтрНайти(СтрокаНРег, СловоПодсветки, , ПозицияНачалаСлова);
			Если ПозицияНачалаСлова > 0 Тогда
				
				ОписаниеДиапазона = Новый Массив;
				ОписаниеДиапазона.Добавить(ПозицияНачалаСлова);
				ОписаниеДиапазона.Добавить(ПозицияНачалаСлова + ДлинаСлова - 1);
				
				Диапазоны.Добавить(ОписаниеДиапазона, Формат(ПозицияНачалаСлова, "ЧЦ=3; ЧВН="));
				ПозицияНачалаСлова = ПозицияНачалаСлова + ДлинаСлова;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сортируем список диапазонов по возрастанию начал диапазонов
	Диапазоны.СортироватьПоПредставлению();
	
	// Сформируем массив результирующих строк с разным оформлением (выделением)
	Результат = Новый Массив;
	
	СтартоваяПозиция = 1;
	Для Каждого ЭлементДиапазона Из Диапазоны Цикл
		
		НачалоДиапазона = ЭлементДиапазона.Значение[0];
		КонецДиапазона = ЭлементДиапазона.Значение[1];
		
		Если НачалоДиапазона > СтартоваяПозиция Тогда // Часть строки без подсветки
			
			ЧастьБезВыделения = Сред(Строка, СтартоваяПозиция, НачалоДиапазона - СтартоваяПозиция);
			Результат.Добавить(Новый ФорматированнаяСтрока(ЧастьБезВыделения));
			СтартоваяПозиция = НачалоДиапазона;
			
		КонецЕсли;
		
		Если КонецДиапазона >= СтартоваяПозиция Тогда // Часть строки с подсветкой
			
			ЧастьВыделяемая = Сред(Строка, СтартоваяПозиция, КонецДиапазона - СтартоваяПозиция + 1);
			Результат.Добавить(Новый ФорматированнаяСтрока(ЧастьВыделяемая, ШрифтВыделения, ЦветВыделения));
			СтартоваяПозиция = КонецДиапазона + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтартоваяПозиция <= ДлинаСтроки Тогда // "хвост" без выделения
		
		Хвост = Сред(Строка, СтартоваяПозиция, ДлинаСтроки - СтартоваяПозиция + 1);
		Результат.Добавить(Новый ФорматированнаяСтрока(Хвост));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Результат);
	
КонецФункции

Функция СимволКовычки() Экспорт
	
	Возврат """";
	
КонецФункции

Функция СимволДвойныеКовычки() Экспорт
	
	Возврат СимволКовычки() + СимволКовычки();
	
КонецФункции

Функция ЛокализированнаяСтрокаЗначениеИзНСтр(Строка) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Индекс = 1;
	НомерСтроки = 1;
	КонечныйИндекс = СтрДлина(Строка);
	
	Пока Индекс <= КонечныйИндекс Цикл
		
		// "<...>"
		РазборПрочитатьНезначимые(Строка, Индекс);
		// "<Код языка>"
		КодЯзыка = РазборПрочитатьИдентификатор(Строка, Индекс);
		// "<...>"
		РазборПрочитатьНезначимые(Строка, Индекс);
		
		// "="
		Символ = РазборПрочитатьСимвол(Строка, Индекс);
		Если Символ <> "=" Тогда
			Результат.Добавить(ТекущийЯзыкСистемы(), Строка);
			Прервать;
		КонецЕсли;
		
		// "<...>"
		РазборПрочитатьНезначимые(Строка, Индекс);
		// "'"
		СимволНачалаГраницы = РазборПрочитатьСимвол(Строка, Индекс);
		
		// "<'Строка'>"
		СимволГраница = "'";
		ИндексНачала = Индекс;
		Пока Истина Цикл
			
			РазборПрочитатьДоСимвола(Строка, "'", Индекс);
			Индекс = Индекс + 1;
			
			Символ = РазборПрочитатьСимвол(Строка, Индекс, Ложь);
			Если Символ = СимволГраница Тогда
				Индекс = Индекс + 1;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		СтрокаНаЯзыке = Сред(Строка, ИндексНачала, Индекс - ИндексНачала - 1);
		Результат.Добавить(КодЯзыка, СтрокаНаЯзыке);
		
		// "<...>"
		РазборПрочитатьНезначимые(Строка, Индекс);
		// ";"
		Символ = РазборПрочитатьСимвол(Строка, Индекс);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЛокализированнаяСтрокаНСтрИзЗначения(Значение) Экспорт
	
	Результат = Новый Массив;
	Для Каждого ЭлементЗначения Из Значение Цикл
		
		КодЯзыка = ЭлементЗначения.Значение;
		Представление = ЭлементЗначения.Представление;
		
		Если Представление = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = СтрЗаменить(Представление, "'", "''");
		
		СтрокаПредставления = КодЯзыка + " = " + "'" + Представление + "'";
		Результат.Добавить(СтрокаПредставления);
		
	КонецЦикла;
	
	Результат = СтрСоединить(Результат, "; ");
	Возврат Результат;
	
КонецФункции

Функция ЛокализированнаяСтрокаНаНесколькихЯзыках(Строка) Экспорт
	
	ЛокализированнаяСтрокаЗначение = ЛокализированнаяСтрокаЗначение(Строка);
	Возврат (ЛокализированнаяСтрокаЗначение.Количество() > 1);
	
КонецФункции

Функция ЛокализированнаяСтрокаПредставлениеНаТекущемЯзыке(Строка) Экспорт
	
	КодЯзыка = ИТКВ_ОбщийКлиентСервер.КодТекущегоЯзыка();
	ЛокализированнаяСтрокаЗначение = ЛокализированнаяСтрокаЗначение(Строка);
	
	ЭлементПредставления = ЛокализированнаяСтрокаЗначение.НайтиПоЗначению(КодЯзыка);
	Если ЭлементПредставления = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = ЭлементПредставления.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЛокализированнаяСтрокаОбновитьПредставление(Строка, Представление, КодЯзыка = Неопределено) Экспорт

	Если КодЯзыка = Неопределено Тогда
		КодЯзыка = ИТКВ_ОбщийКлиентСервер.КодТекущегоЯзыка();
	КонецЕсли;
	
	Результат = ЛокализированнаяСтрокаЗначение(Строка);
	
	ЭлементНаЯзыке = Результат.НайтиПоЗначению(КодЯзыка);
	Если ЭлементНаЯзыке = Неопределено Тогда
		Результат.Добавить(КодЯзыка, Представление);
	Иначе
		ЭлементНаЯзыке.Представление = Представление;
	КонецЕсли;
	
	Строка = ЛокализированнаяСтрокаНСтрИзЗначения(Результат);
	
КонецПроцедуры

// Возвращает признак того, что переданное значение является, либо не является, числом.
//
// Параметры:
//  ПроверяемоеЗначение - Строка - значение, которое проверяется на соответствие числу.
//
// Возвращаемое значение:
//   Булево - признак того, что переданное значение является, либо не является, числом.
//
Функция ЭтоЧисло(Знач ПроверяемоеЗначение) Экспорт
	
	Если ПроверяемоеЗначение = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	Возврат ОписаниеЧисла.ПривестиЗначение(ПроверяемоеЗначение) <> 0;
	
КонецФункции

// Приводит строковое значение к дате.
//
// Параметры:
//  Значение - Строка - строковое значение, которое приводится к дате.
//
// Возвращаемое значение:
//   Дата - приведенное значение.
//
Функция СтрокаВДату(Знач Значение) Экспорт
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат ПустаяДата;
	КонецЕсли;
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	Дата = ОписаниеДаты.ПривестиЗначение(Значение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда
		
		Возврат Дата;
	КонецЕсли;
	
	#Область ПодготовкаЧастейДаты
	
	КоличествоСимволов = СтрДлина(Значение);
	
	Если КоличествоСимволов > 25 Тогда
		Возврат ПустаяДата;
	КонецЕсли;
	
	ЧастиЗначения = Новый Массив;
	ЧастьЗначения = "";
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		
		Символ = Сред(Значение, НомерСимвола, 1);
		
		Если ЭтоЧисло(Символ) Тогда
			
			ЧастьЗначения = ЧастьЗначения + Символ;
			
		Иначе
			
			Если Не ПустаяСтрока(ЧастьЗначения) Тогда
				ЧастиЗначения.Добавить(ЧастьЗначения);
			КонецЕсли;
			
			ЧастьЗначения = "";
			
		КонецЕсли;
		
		Если НомерСимвола = КоличествоСимволов
			И Не ПустаяСтрока(ЧастьЗначения) Тогда
			
			ЧастиЗначения.Добавить(ЧастьЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЧастиЗначения.Количество() < 3 Тогда
		Возврат ПустаяДата;
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 4 Тогда
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 5 Тогда
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	Если ЧастиЗначения.Количество() < 6 Тогда
		ЧастиЗначения.Добавить("00");
	КонецЕсли;
	
	#КонецОбласти
	
	// Если формат ггггММддЧЧммсс:
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[1] + ЧастиЗначения[0]
		+ ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];
	
	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда
		
		Возврат Дата;
	КонецЕсли;
	
	// Если формат ггггддММЧЧммсс
	НормализованноеЗначение = ЧастиЗначения[2] + ЧастиЗначения[0] + ЧастиЗначения[1]
		+ ЧастиЗначения[3] + ЧастиЗначения[4] + ЧастиЗначения[5];
	
	Дата = ОписаниеДаты.ПривестиЗначение(НормализованноеЗначение);
	
	Если ТипЗнч(Дата) = Тип("Дата")
		И ЗначениеЗаполнено(Дата) Тогда
		
		Возврат Дата;
	КонецЕсли;
	
	Возврат ПустаяДата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает набор символов букв русского и английского языков
// Возвращаемое значение:
//   Строка - Набор символов букв
Функция НаборСимволовРусскиеЛатинскиеБуквы()
	
	Возврат НаборСимволовРусскиеБуквы() + НаборСимволовЛатинскиеБуквы();
	
КонецФункции

Функция НаборСимволовЛатинскиеБуквы()
	
	НаборСимволов = НаборЛатинскиеБуквы();
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции

Функция НаборСимволовРусскиеБуквы()
	
	НаборСимволов = НаборРусскиеБуквы();
	Возврат НаборСимволов + НРег(НаборСимволов);
	
КонецФункции

Функция НаборЛатинскиеБуквы()
	
	Возврат "QWERTYUIOPASDFGHJKLZXCVBNM";
	
КонецФункции

Функция НаборРусскиеБуквы()
	
	Возврат "ЙЦУКЕЁНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
	
КонецФункции

Функция НаборРусскиеЛатинскиеБуквы()
	
	Возврат НаборЛатинскиеБуквы() + НаборРусскиеБуквы();
	
КонецФункции

Функция НаборСимволовЦифры()
	
	Возврат "0123456789";
	
КонецФункции

Функция НаборСимволовШестнадцатеричныеЦифры()
	
	Возврат "0123456789ABCDEFabcdef";
	
КонецФункции

Функция НаборНезначащихСимволов()
	
	Возврат Символы.ПС + Символы.ВК + Символы.Таб + " ";
	
КонецФункции

Функция РазборПропуститьСимвол (Строка, Символ, НачальныйИндекс, СмещатьИндекс = Истина)
	
	Результат = "";
	
	Если Сред(Строка, НачальныйИндекс, 1) = Символ Тогда
		
		Результат = Символ;
		
		Если СмещатьИндекс Тогда
			НачальныйИндекс = НачальныйИндекс + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЦелоеЧисло(Строка)
	
	Если ПустаяСтрока(Строка) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Результат = Истина;
	
	Для Счетчик = 1 По СтрДлина(Строка) Цикл
		
		Если Не СтрНайти(НаборСимволовЦифры(), Сред(Строка, Счетчик, 1)) Тогда
			
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЛокализированнаяСтрокаЗначение(Строка)
	
	Если ТипЗнч(Строка) = Тип("СписокЗначений") Тогда
		Результат = Строка;
	Иначе
		Результат = ЛокализированнаяСтрокаЗначениеИзНСтр(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ИмяПеременнойВозвратаРезультата(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'Результат'; en = 'Result'", Язык);
	
КонецФункции

Функция ОписаниеШаблонов(Язык) Экспорт
	
	Результат = Новый Массив;
	
	ИмяПеременнойВозврата = ИмяПеременнойВозвратаРезультата(Язык);
	
	Имя = НСтр("ru = 'ВыгрузитьЗапрос'; en = 'UploadQuery'", Язык);
	Подсказка = НСтр("ru = 'Выгрузить результат запроса'; en = 'Unload query result'", Язык);
	ШаблонТекста = НСтр("ru = 'Запрос = Новый Запрос;
                   |Запрос.Текст = ""$0"";
                   |%1 = Запрос.Выполнить().Выгрузить();';
				   |en = 'Query = New Query;
                   |Query.Text = ""$0"";
                   |%1 = Query.Execute().Unload();'", Язык);
	ОписаниеШаблона = ОписаниеШаблона(Имя, Подсказка, СтрШаблон(ШаблонТекста, ИмяПеременнойВозврата));
	Результат.Добавить(ОписаниеШаблона);
	
	Имя = НСтр("ru = 'ВыгрузитьКолонкуЗапроса'; en = 'UploadQueryColumn'", Язык);
	Подсказка = НСтр("ru = 'Выгрузить колонку результата запроса'; en = 'Unload query result column'", Язык);
	ШаблонТекста = НСтр("ru = 'Запрос = Новый Запрос;
                         |Запрос.Текст = ""$0"";
                         |%1 = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Поле"");';
						 |en = 'Query = New Query;
                         |Query.Text = ""$0"";
                         |%1 = Query.Execute().Unload().UnloadColumn(""Field"");'", Язык);
	ОписаниеШаблона = ОписаниеШаблона(Имя, Подсказка, СтрШаблон(ШаблонТекста, ИмяПеременнойВозврата));
	Результат.Добавить(ОписаниеШаблона);
	
	// ----------------
	Имя = НСтр("ru = 'ИзменитьДанныеОбъекта'; en = 'ModifyObjectData'", Язык);
	Подсказка = НСтр("ru = 'Изменить данные объекта и записать'; en = 'Change object data and write'", Язык);
	Текст = НСтр("ru = 'Объект = Строка.Поле.ПолучитьОбъект();
                         |//Объект.ОбменДанными.Загрузка = Истина;
                         |//Объект.ДополнительныеСвойства.Вставить(""ОтключитьМеханизмРегистрации"");
                         |//Объект.ДополнительныеСвойства.Вставить(""ПропуститьПроверкуЗапретаИзменения"");
                         |//Объект.ИмяПоля = $0;
                         |Объект.Записать();';
						 |en = 'Object = Row.Field.GetObject();
                         |//Object.DataExchange.Load = True;
                         |//Object.AdditionalProperties.Insert(""ОтключитьМеханизмРегистрации"");
                         |//Object.AdditionalProperties.Insert(""ПропуститьПроверкуЗапретаИзменения"");
                         |//Object.FieldName = $0;
                         |Object.Write();'", Язык);
	ОписаниеШаблона = ОписаниеШаблона(Имя, Подсказка, Текст);
	Результат.Добавить(ОписаниеШаблона);
	
	Возврат Результат;
	
КонецФункции

Функция ПодсказкаПоШаблонам(Язык) Экспорт
	
	Результат = "";
	ОписаниеШаблонов = ОписаниеШаблонов(Язык);
	Если ЗначениеЗаполнено(ОписаниеШаблонов) Тогда
		
		Результат = Символы.ПС + НСтр("ru = 'Шаблоны:'; en = 'Templates:'") + Символы.ПС;
		
		Подсказки = Новый Массив;
		Для Каждого ОписаниеШаблона Из ОписаниеШаблонов Цикл
			
			ИмяШаблона = ОписаниеШаблона["prefix"];
			ПояснениеШаблона = ОписаниеШаблона["description"];
			ТекстШаблона = ОписаниеШаблона["body"];
			
			Подсказка = СтрШаблон("%1 - %2 (%3)", ИмяШаблона, ПояснениеШаблона, ИТКВ_Строки.Сокращенно(ТекстШаблона, 40));
			
			Подсказки.Добавить(Подсказка);
			
		КонецЦикла;
		
		Результат = Результат + СтрСоединить(Подсказки, Символы.ПС);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблоныJSONСтрока() Экспорт
	
	Шаблоны = ОписаниеШаблонов("ru");
	Возврат ШаблоныJSON(Шаблоны);
	
КонецФункции

Функция ЭтоРедакторКодаMonaco(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) <> Тип("ПолеФормы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (Элемент.Вид = ВидПоляФормы.ПолеHTMLДокумента);

КонецФункции

Функция ПоддерживаетсяПлатформойMonaco() Экспорт
	
	Возврат ИТКВ_ОбщийКлиентСервер.ПоддерживаетсяПлатформой(ВерсияПоддержкиMonaco());
	
КонецФункции

Функция ВерсияПоддержкиMonaco() Экспорт
	
	Возврат "8.3.14.1565";
	
КонецФункции

Функция ПустойГраницыВыделения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоСтроки", 1);
	Результат.Вставить("НачалоКолонки", 1);
	Результат.Вставить("КонецСтроки", 1);
	Результат.Вставить("КонецКолонки", 1);

	Возврат Результат;
	
КонецФункции

Функция ТипЯзыка(Элемент) Экспорт
	
	ДополнительнаяИнформация = ДополнительнаяИнформация(Элемент);
	Возврат ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительнаяИнформация, "Тип");
	
КонецФункции

Функция РежимКомпоновкиДанных(Элемент) Экспорт
	
	ДополнительнаяИнформация = ДополнительнаяИнформация(Элемент);
	Возврат ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительнаяИнформация, "РежимКомпоновкиДанных");
	
КонецФункции

Функция ДополнительнаяИнформация(Элемент) Экспорт
	
	ПредупреждениеПриРедактировании = Элемент.ПредупреждениеПриРедактировании;
	Если ПустаяСтрока(ПредупреждениеПриРедактировании) Тогда
		
		Результат = Новый Структура;
		
	Иначе
		
		Результат = ИТКВ_ОбщийКлиентСервер.JSONСтрокуВКоллекцию(Элемент.ПредупреждениеПриРедактировании);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФиксированныеНастройкиВыражения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтображатьНомераСтрок", Ложь);
	Результат.Вставить("ОтображатьКарту", Ложь);
	Результат.Вставить("ОтображатьСостояние", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НомерСимволаПоКурсору(Текст, НомерСтроки, НомерКолонки) Экспорт
	
	Результат = 0;
	Если Текст = "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПереносСтроки = Символы.ПС;
	Если СтрНайти(Текст, Символы.ПС + Символы.ВК) Тогда
		ПереносСтроки = Символы.ПС + Символы.ВК;
	КонецЕсли;
	
	Для НомерСтрокиТекста = 1 По НомерСтроки - 1 Цикл
		Результат = Результат + СтрДлина(СтрПолучитьСтроку(Текст, НомерСтрокиТекста)) + СтрДлина(ПереносСтроки);
	КонецЦикла;
	
	Результат = Результат + НомерКолонки;
	
	Возврат Результат;
	
КонецФункции

Функция КурсорПоНомеруСимвола(Текст, Номер) Экспорт
	
	ГраницаСимволов = Номер - 1;
	ЛеваяЧасть = Лев(Текст, ГраницаСимволов);
	
	НомерСтроки = 1;
	НомерКолонки = 1;
	Для НомерСимвола = 1 По ГраницаСимволов Цикл
		
		Символ = Сред(ЛеваяЧасть, НомерСимвола, 1);
		Если Символ = Символы.ВК Тогда
			Продолжить;
		КонецЕсли;
		
		Если Символ = Символы.ПС Тогда
			НомерСтроки = НомерСтроки + 1;
			НомерКолонки = 1;
		Иначе
			НомерКолонки = НомерКолонки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("НомерКолонки", НомерКолонки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеШаблона(Имя, Представление, Текст)
	
	Результат = Новый Структура;
	Результат.Вставить("prefix", Имя);
	Результат.Вставить("body", Текст);
	Результат.Вставить("description", Представление);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблоныJSON(ОписанияШаблонов)
	
	#Если НЕ ВебКлиент Тогда

		ЗаписьJSON = Новый ЗаписьJSON;
		
		Параметры = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
		ЗаписьJSON.УстановитьСтроку(Параметры);
		
		Шаблоны = Новый Структура;
		Для Каждого ОписаниеШаблона Из ОписанияШаблонов Цикл
			Шаблоны.Вставить(ОписаниеШаблона.prefix, ОписаниеШаблона);
		КонецЦикла;
		
		Коллекция = Новый Структура;
		Коллекция.Вставить("snippets", Шаблоны);
		ЗаписатьJSON(ЗаписьJSON, Коллекция);
		
		Возврат ЗаписьJSON.Закрыть();
		
	#КонецЕсли
	
КонецФункции

#КонецОбласти


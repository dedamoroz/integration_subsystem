#Область ПрограммныйИнтерфейс

Функция ОписаниеТиповПоТипу(Знач Тип) Экспорт
	
	Типы = Новый Массив;
	
	Если ТипЗнч(Тип) = ТипЗнч("Строка") Тогда
		
		Тип = Тип(Тип);
		
	КонецЕсли;
	
	Типы.Добавить(Тип);
	
	Возврат Новый ОписаниеТипов(Типы);
	
КонецФункции

// Возвращает Описание типов строка)
//
// Параметры:
//   ДлинаСтроки - Число - Длина строки
//
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов строка
//
Функция ОписаниеСтрока(ДлинаСтроки = 0) Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
	
КонецФункции

// Возвращает Описание типов Число
//
// Параметры:
//   ЧислоРазрядов - Число - Число разрядов
//   ЧислоРазрядовДробнойЧасти - Число - Число разрядов дробной части
//
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов Число
//
Функция ОписаниеЧисло(Разрядность = 0, РазрядностьДробнойЧасти = 0, Неотрицательный = Ложь) Экспорт
	
	Если Неотрицательный Тогда
		
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Неотрицательный;
		
	Иначе
		
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
		
	КонецЕсли;
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнакЧисла);
	
	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
КонецФункции

// Возвращает Описание типов Булево
//
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов Булево
//
Функция ОписаниеБулево() Экспорт
	
	Возврат Новый ОписаниеТипов("Булево");
	
КонецФункции

Функция ОписаниеДата(ЗначениеЧастиДаты = Неопределено) Экспорт
	
	Если ЗначениеЧастиДаты = Неопределено Тогда
		ЗначениеЧастиДаты = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	КвалификаторДаты = Новый КвалификаторыДаты(ЗначениеЧастиДаты);
	Возврат Новый ОписаниеТипов("Дата", , , КвалификаторДаты);
	
КонецФункции

// Возвращает Описание типов Картинка
//
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов Картинка
//
Функция ОписаниеКартинка() Экспорт
	
	Возврат Новый ОписаниеТипов("Картинка");
	
КонецФункции

// Возвращает Описание типов УникальныйИдентификатор
//
// Возвращаемое значение:
//   ОписаниеТипов - Описание типов УникальныйИдентификатор
//
Функция ОписаниеУникальныйИдентификатор() Экспорт
	
	Возврат Новый ОписаниеТипов("УникальныйИдентификатор");
	
КонецФункции

Функция ОписаниеИмяМетаданных() Экспорт
	
	Возврат ОписаниеСтрока(ИТКВ_МетаданныеКлиентСерверПовтИсп.МаксимальнаяДлинаИмени());
	
КонецФункции

Функция ОписаниеКоллекцияИИмяМетаданных() Экспорт
	
	Возврат ОписаниеСтрока(ИТКВ_МетаданныеКлиентСерверПовтИсп.МаксимальнаяДлинаИмени() * 2 + 1);
	
КонецФункции

Функция ОписаниеСинонимМетаданных() Экспорт
	
	Возврат ОписаниеСтрока(ИТКВ_МетаданныеКлиентСерверПовтИсп.МаксимальнаяДлинаСинонима());
	
КонецФункции

Функция ОписаниеПодсказкаМетаданных() Экспорт
	
	Возврат ОписаниеСтрока(ИТКВ_МетаданныеКлиентСерверПовтИсп.МаксимальнаяДлинаПодсказки());
	
КонецФункции

// Возвращает количество ссылочных типов содержащихся в описании типов
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Число - Количество ссылочных типов 
//
Функция КоличествоСсылочных(ОписаниеТипов) Экспорт
	
	Количество = 0;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если Не ЭтоПростой(Тип) Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

// Возвращает первый ссылочный тип содержащийся в описании типов
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Тип - Первый ссылочный тип
//
Функция ПервыйСсылочный(ОписаниеТипов) Экспорт
	
	Количество = 0;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если Не ЭтоПростой(Тип) Тогда
			Возврат Тип;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает первый ссылочный тип описание содержащийся в описании типов
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   ОписаниеТипов - Описание первый ссылочный тип
//
Функция ПервыйСсылочныйОписание(ОписаниеТипов) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если Не ЭтоПростой(Тип) Тогда
			
			Результат = ИТКВ_ТипыКлиентСервер.ОписаниеТиповПоТипу(Тип);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ссылочные типы
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Массив - Ссылочные типы
//
Функция СсылочныеТипы(ОписаниеТипов) Экспорт
	
	Типы = Новый Массив;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ЭтоПростой(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		Типы.Добавить(Тип);
		
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(Типы);
	
КонецФункции

// Проверяет есть ли в описании ссылочные типы
//
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, есть ссылочные типы
//
Функция ЕстьСсылочныеТипы(ОписаниеТипов, ИсключаяПеречисления = Ложь) Экспорт
	
	Результат = Ложь;
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ЭтоСсылочный(Тип, ИсключаяПеречисления) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет это ссылочный тип
//
// Параметры:
//  Тип  - Тип - Тип
//  ИсключаяПеречисления  - Булево - Исключать перечисление из ссылочных типов
//
// Возвращаемое значение:
//   Булево - Истина, ссылочный тип
//
Функция ЭтоСсылочный(Тип, ИсключаяПеречисления = Ложь) Экспорт
	
	ПростойТип = ЭтоПростой(Тип);
	Результат = Не ПростойТип;
	Если ИсключаяПеречисления Тогда
		
		#Если Сервер Тогда
			
			Если ИТКВ_Метаданные.ТипВсеСсылкиКоллекции("Перечисления").СодержитТип(Тип) Тогда
				Результат = Ложь;
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет одно описание типов к другому
//
// Параметры:
//
//  Приемник  - ОписаниеТипов - Приемник 
//  Источник  - ОписаниеТипов - Источник
//
// Возвращаемое значение:
//   ОписаниеТипов - Результат сложения типов
//
Функция СложитьОписания(ТипЗначения1, ТипЗначения2) Экспорт
	
	ДобавляемыеТипы = Новый Массив;
	
	Для Каждого Тип Из ТипЗначения2.Типы() Цикл
		
		ДобавляемыеТипы.Добавить(Тип);
		
	КонецЦикла;
	
	КвалификаторЧисла = ОбъединитьКвалификаторыЧисла(ТипЗначения1, ТипЗначения2);
	КвалификаторСтроки = ОбъединитьКвалификаторыСтроки(ТипЗначения1, ТипЗначения2);
	КвалификаторДаты = ОбъединитьКвалификаторыДаты(ТипЗначения1, ТипЗначения2);
	
	Возврат Новый ОписаниеТипов(ТипЗначения1, ДобавляемыеТипы, , КвалификаторЧисла, КвалификаторСтроки, КвалификаторДаты);
	
КонецФункции

Функция Количество(ОписаниеТипов, ИсключатьNull = Истина) Экспорт
	
	Результат = ОписаниеТипов.Типы().Количество();
	Если ИсключатьNull Тогда
		
		Если ОписаниеТипов.СодержитТип(Тип("Null")) Тогда
			Результат = Результат - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеБезNull(ОписаниеТипов) Экспорт
	
	Возврат	Новый ОписаниеТипов(ОписаниеТипов, , "Null");
	
КонецФункции

Функция ОписаниеИзСтроки(Тип) Экспорт
	
	СимволСкобки = СтрНайти(Тип, "(");

	Если СимволСкобки = 0 Тогда
		
		Результат = Новый ОписаниеТипов(Тип);
		
	Иначе
		
		Имя = ИТКВ_Строки.РазборПрочитатьИдентификатор(Тип);
		Параметр = ИТКВ_Строки.РазборПрочитатьЦелоеЧисло(Тип, СимволСкобки + 1);
		
		Если Имя = "Строка" Тогда
			
			КвалификаторСтроки = Новый КвалификаторыСтроки(Параметр);
			Результат = Новый ОписаниеТипов(Имя, , КвалификаторСтроки);
			
		Иначе // Число
			
			КвалификаторЧисла = Новый КвалификаторыЧисла(Параметр);
			Результат = Новый ОписаниеТипов(Имя, КвалификаторЧисла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоПростой(Тип)
	
	Результат = Тип = Тип("Null") ИЛИ Тип = Тип("Неопределено") ИЛИ Тип = Тип("Число") ИЛИ Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево")
				ИЛИ Тип = Тип("УникальныйИдентификатор") ИЛИ Тип = Тип("ХранилищеЗначения") ИЛИ Тип = Тип("Тип") ИЛИ Тип = Тип("МоментВремени") ИЛИ Тип = Тип("Структура")
				ИЛИ Тип = Тип("ОписаниеТипов") ИЛИ Тип = Тип("ВидДвиженияБухгалтерии") ИЛИ Тип = Тип("ВидДвиженияНакопления") ИЛИ Тип = Тип("ВидСчета")
				ИЛИ Строка(Тип) = "НеизвестныйОбъект";
				
	#Если Сервер Тогда
					
		Результат = Результат ИЛИ Тип = Тип("РезультатЗапроса");
		
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция ОбъединитьКвалификаторыСтроки(Первый, Второй)
	
	Возврат Новый КвалификаторыСтроки(Макс(Первый.КвалификаторыСтроки.Длина, Второй.КвалификаторыСтроки.Длина));
	
КонецФункции

Функция ОбъединитьКвалификаторыЧисла(Первый, Второй)
	
	Если Первый.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой
			ИЛИ Второй.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Любой  Тогда
			
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
		
	Иначе
		
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Неотрицательный;
		
	КонецЕсли;
	
	Возврат Новый КвалификаторыЧисла(Макс(Первый.КвалификаторыЧисла.Разрядность, Второй.КвалификаторыЧисла.Разрядность),
										Макс(Первый.КвалификаторыЧисла.РазрядностьДробнойЧасти, Второй.КвалификаторыЧисла.РазрядностьДробнойЧасти),	ДопустимыйЗнакЧисла);
	
КонецФункции

Функция ОбъединитьКвалификаторыДаты(Первый, Второй)
	
	Если Первый.КвалификаторыДаты.ЧастиДаты = Второй.КвалификаторыДаты.ЧастиДаты Тогда
		
		ЧастьДаты = Первый.КвалификаторыДаты.ЧастиДаты;
		
	Иначе
		
		ЧастьДаты = ЧастиДаты.ДатаВремя;
		
	КонецЕсли;
	
	Возврат Новый КвалификаторыДаты(ЧастьДаты);
	
КонецФункции

#КонецОбласти

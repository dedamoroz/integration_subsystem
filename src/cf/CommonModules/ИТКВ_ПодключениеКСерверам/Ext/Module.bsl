#Область ПрограммныйИнтерфейс

Процедура Проверка(Параметры, АдресРезультата) Экспорт
	
	Результат = ПроверкаПодключения(Параметры);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ИспользованиеЛицензий() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Кластер", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(100));
	Результат.Колонки.Добавить("База", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(100));
	Результат.Колонки.Добавить("Лицензия", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(100));
	Результат.Колонки.Добавить("Сеанс", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(100));
	Результат.Колонки.Добавить("ИдентификаторСеанса", ИТКВ_ТипыКлиентСервер.ОписаниеУникальныйИдентификатор());
	
	ОбщиеНастройки = ИТКВ_Настройки.Загрузить();
	
	ПодключенияККластерам = ОбщиеНастройки["ПодключенияККластерам"];
	Для Каждого Подключение Из ПодключенияККластерам Цикл
		
		ОписаниеПодключения = Подключение.Значение;
		
		Попытка
			
			ИспользованиеЛицензийПоКластеру(Результат, ОписаниеПодключения);
			
		Исключение
			
			НеОбрабатываемИсключение = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Результат.Свернуть("Кластер,База,Лицензия,Сеанс,ИдентификаторСеанса");
	
	Результат.Колонки.Добавить("Лицензий", ИТКВ_ТипыКлиентСервер.ОписаниеЧисло(10));
	Для Каждого Строка Из Результат Цикл
		
		Строка.Лицензий = 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеПодключения(ОписаниеПодключения) Экспорт
	
	ЧастиОписания = Новый Массив;
	ЧастиОписания.Добавить(ОписаниеПодключения["Сервер"]);
	
	Администратор = ОписаниеПодключения["Администратор"];
	Если ЗначениеЗаполнено(Администратор) Тогда
		ЧастиОписания.Добавить(Администратор);
	КонецЕсли;
	
	Результат = СтрСоединить(ЧастиОписания, "; ");
	Результат = СтрШаблон("%1 (%2)", Результат, ОписаниеПодключения["Подключение"]);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверкаПодключения(Параметры)
	
	Если Параметры.Подключение = ИТКВ_ПодключениеКСерверамКлиентСервер.ТипПодключенияCOM()
			И ИТКВ_ОбщийКлиентСерверПовтИсп.ИнформационнаяБазаФайловая() Тогда
			
		Возврат НСтр("ru = 'Недоступно в файловой базе'; en = 'Not available in the file database'");
			
	КонецЕсли;
	
	Попытка
			
		Соединение = ОткрытьСоединение(Параметры);
		Результат = Неопределено;
			
	Исключение
			
		Результат = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ИспользованиеЛицензийПоКластеру(Результат, ОписаниеПодключения)
	
	Соединение = ОткрытьСоединение(ОписаниеПодключения);
	
	Подключение = ОписаниеПодключения.Подключение;
	
	Если Подключение = ИТКВ_ПодключениеКСерверамКлиентСервер.ТипПодключенияCOM() Тогда
		
		ЗаполнитьИспользованиеЛицензийCOM(Результат, Соединение, ОписаниеПодключения);
		
	ИначеЕсли Подключение = ИТКВ_ПодключениеКСерверамКлиентСервер.ТипПодключенияRAS() Тогда
		
		ЗаполнитьИспользованиеЛицензийRAS(Результат, Соединение, ОписаниеПодключения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОткрытьСоединение(Параметры)
	
	Если Параметры.Подключение = ИТКВ_ПодключениеКСерверамКлиентСервер.ТипПодключенияCOM() Тогда
		
		Соединитель = Новый COMОбъект("V83.COMConnector");
		Результат = Соединитель.ConnectAgent(Параметры.Сервер);
		
	ИначеЕсли Параметры.Подключение = ИТКВ_ПодключениеКСерверамКлиентСервер.ТипПодключенияRAS() Тогда
		
		ЧастиАдресаПодключения = СтрРазделить(Параметры.Сервер, ":");
		Сервер = ЧастиАдресаПодключения[0];
		
		Порт = 0;
		Если ЧастиАдресаПодключения.Количество() > 1 Тогда
			Порт = Число(СокрЛП(ЧастиАдресаПодключения[1]));
		КонецЕсли;
		
		Если ИТКВ_ОбщийКлиентСервер.ПоддерживаетсяПлатформой("8.3.14") Тогда
			
			// Опасности не представляет код фиксированный
			// BSLLS:ExecuteExternalCodeInCommonModule-off
			Результат = Вычислить("Новый АдминистрированиеСервера(Сервер, Порт)");
			// BSLLS:ExecuteExternalCodeInCommonModule-on
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Получение данных через RAS доступно с платформы версии 8.3.14';
									|en = 'Data acquisition via RAS is available from platform version 8.3.14'");
			
		КонецЕсли;
		
		Результат.ВыполнитьАутентификацию(Параметры.Администратор, Параметры.Пароль);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИспользованиеЛицензийCOM(Результат, Соединение, ОписаниеПодключения)
	
	Для Каждого ОписаниеКластера Из Соединение.GetClusters() Цикл
		
		Попытка
			
			Кластер = ОписаниеКластера.HostName;
			Соединение.Authenticate(ОписаниеКластера, ОписаниеПодключения.Администратор, ОписаниеПодключения.Пароль);
			
		Исключение
			
			Продолжить;
			
		КонецПопытки;
		
		ИнформационныеБазы = Соединение.GetInfoBases(ОписаниеКластера);
		Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
			
			База = ИнформационнаяБаза.Name;
			
			Сеансы = Соединение.GetInfoBaseSessions(ОписаниеКластера, ИнформационнаяБаза);
			Для Каждого Сеанс Из Сеансы Цикл
				
				Лицензия = Сеанс.License;
				Если Лицензия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Кластер = Кластер;
				НоваяСтрока.База = База;
				НоваяСтрока.Лицензия = Лицензия.FullPresentation;
				НоваяСтрока.Сеанс = Сеанс.UserName;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИспользованиеЛицензийRAS(Результат, Соединение, ОписаниеПодключения)
	
	Кластеры = Соединение.ПолучитьКластеры();
	Для Каждого Кластер Из Кластеры Цикл
		
		Попытка
			
			ПредставлениеКластера = СтрШаблон("%1 (%2)", Кластер.Имя, Кластер.ИмяКомпьютера);
			Кластер.ВыполнитьАутентификацию(ОписаниеПодключения.Администратор, ОписаниеПодключения.Пароль);
			
		Исключение
			
			Продолжить;
			
		КонецПопытки;
		
		ИнформационныеБазы = Кластер.ПолучитьИнформационныеБазы();
		Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
			
			База = ИнформационнаяБаза.Имя;
			
			Сеансы = ИнформационнаяБаза.ПолучитьСеансы();
			Для Каждого Сеанс Из Сеансы Цикл
				
				Для Каждого Лицензия Из Сеанс.Лицензии Цикл
					
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.Кластер = ПредставлениеКластера;
					НоваяСтрока.База = База;
					НоваяСтрока.Лицензия = Лицензия.КраткоеПредставление;
					НоваяСтрока.Сеанс = СтрШаблон("%1 (%2)", Сеанс.ИмяПользователя, Сеанс.ИмяПриложения);
					НоваяСтрока.ИдентификаторСеанса = Сеанс.ИдентификаторСеанса;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет запрос, возвращает результат
//
// Параметры:
//	Данные - Данные - Данные
//	Режим - РежимВыполненияЗапроса - Режим выполнения
//	ИгнорироватьЛимитСтрок - Булево - Игнорировать лимит строк
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//	* АдресРезультата - Строка - Адрес временного хранилища результата
//	* АдресДанныхРасшифровки - Строка - Адрес временного хранилища расшифровки
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
// Возвращаемое значение:
//	Структура - информация о выполнении
//
Функция ПолучитьРезультат(Параметры, АдресРезультата = Неопределено) Экспорт
	
	Данные = Параметры.Данные;
	
	Режим = Параметры.Режим;
	РежимВыполнения = Режим;
	ИгнорироватьЛимитСтрок = Параметры.ИгнорироватьЛимитСтрок;
	ГлавнаяОперация = ИТКВ_ОбщийКлиентСервер.Свойство(Параметры, "ГлавнаяОперация");
	Настройки = ИТКВ_Настройки.Загрузить(ИТКВ_Перечисления.ИнструментКонсольРазработчика());
	
	ВыводРезультата = ИТКВ_ОбщийКлиентСервер.ЭтоРежимВыполненияСРезультатом(РежимВыполнения);
	Если ВыводРезультата Тогда
		КоличествоШагов = 2;
	Иначе
		КоличествоШагов = 1;
	КонецЕсли;
	Шаг = 1;
	
	ТекстЭтапа = НСтр("ru = 'Выполнение запроса'; en = 'Query execution'");
	ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(ТекстЭтапа, Шаг, КоличествоШагов, ГлавнаяОперация));
	
	АнализируетсяПланЗапроса = (РежимВыполнения = ИТКВ_Перечисления.РежимВыполненияЗапросаВыполнение()
									И Настройки["ПолучениеПлана"] <> ИТКВ_Перечисления.ПолучениеПланаОтключено())
									И ИТКВ_ТуллкитКлиентСервер.ПолнаяВерсия();
	РезультатыВыполнения = ВыполнитьЗапрос(Данные, РежимВыполнения, АнализируетсяПланЗапроса, Настройки["ОбратныйПорядокЗапросовПакета"]);
	ОшибкаПриВыполнении = (РезультатыВыполнения.ОшибкаПриВыполнении <> Неопределено);
	
	ДанныеРасшифровки = Новый Соответствие;
	
	Результат = Новый Структура;
	Результат.Вставить("РежимВыполнения", РежимВыполнения);
	
	Если АнализируетсяПланЗапроса Тогда
		
		Результат.Вставить("UID", РезультатыВыполнения.UID);
		Результат.Вставить("IDПроцесса", РезультатыВыполнения.IDПроцесса);
		Результат.Вставить("НачалоВыполнения", РезультатыВыполнения.НачалоВыполнения);
		
		ОписанияТиповПараметров = Новый Массив;
		Для Каждого Параметр Из Данные.Параметры Цикл
			ОписанияТиповПараметров.Добавить(Параметр.Значение);
		КонецЦикла;
		Результат.Вставить("ОписанияТиповПараметров", ОписанияТиповПараметров);
		
	КонецЕсли;

	Результат.Вставить("ОшибкаПриВыполнении", РезультатыВыполнения.ОшибкаПриВыполнении);
	
	Если Не ОшибкаПриВыполнении Тогда
		
		Если (Режим <> ИТКВ_Перечисления.РежимВыполненияЗапросаСРезультатамиВременныхТаблиц()) Тогда
			Результат.Вставить("ВремяВыполнения", РезультатыВыполнения.ВремяВыполнения);
		КонецЕсли;
		
		Если ВыводРезультата Тогда
			
			ТекстЭтапа = НСтр("ru = 'Вывод результата, расчет ширины колонок'; en = 'The output result, the calculation of width of columns'");
			ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(ТекстЭтапа, Шаг, КоличествоШагов, ГлавнаяОперация));
			
			Если ИгнорироватьЛимитСтрок Тогда
				МаксимумСтрок = 0;
			ИначеЕсли Данные.МаксимумСтрок = Неопределено Тогда
				МаксимумСтрок = Настройки["МаксимальноеКоличествоВыводимыхСтрок"];
			Иначе
				МаксимумСтрок = Данные.МаксимумСтрок;
			КонецЕсли;
			Если МаксимумСтрок = 0 Тогда
				МаксимумСтрок = 1000000000000;
			КонецЕсли;
			
			МетодРасшифровкиТаблицЗначений = Настройки["РасшифровкаТаблицЗначений"];
			ВыделятьОсобыеЗначенияВРезультате = Настройки["ВыделятьОсобыеЗначенияВРезультате"];
			
			ВсеСтрокиВыведены = Истина;
			ТабличныйДокументРезультат = Новый ТабличныйДокумент;
			Для ИндексРезультата = 0 По РезультатыВыполнения.Результат.ВГраница() Цикл
				
				РезультатВыполнения = РезультатыВыполнения.Результат[ИндексРезультата];
				
				// Подготовка областей вывода
				Области = ПодготовитьОбластиВыводаРезультата(РезультатВыполнения.Колонки, ВыделятьОсобыеЗначенияВРезультате, Настройки["ЧередованиеЦветовСтрокВРезультате"]);
				
				// Подготовка - вывод строк результата --------------------------------------------------------------
				СтрокиЗапроса = Новый ТабличныйДокумент;
				СтрокиЗапроса.НачатьАвтогруппировкуСтрок();
				
				НомерСтроки = 0;
				ИменаКолонокИтогов = РезультатыВыполнения.ИменаКолонокИтогов[ИндексРезультата];
				РезультатСИерархией = ЗначениеЗаполнено(ИменаКолонокИтогов);
				РезультатВыводаСтрокПакета = ВывестиСтрокиВыборки(РезультатВыполнения, СтрокиЗапроса, Области, РезультатСИерархией, НомерСтроки, МаксимумСтрок);
				ВыведеноСтрок = НомерСтроки;
				
				Если РезультатВыводаСтрокПакета.ВыведеныВсе Тогда
					КоличествоСтрок = ВыведеноСтрок;
				Иначе
					
					КоличествоСтрок = РезультатВыводаСтрокПакета.КоличествоСтрок;
					ВсеСтрокиВыведены = Ложь;
					
				КонецЕсли;
				
				СтрокиЗапроса.ЗакончитьАвтогруппировкуСтрок();
				
				// Собираем результат одного запроса ----------------------------------------------------------------
				ТабличныйДокументРезультатаЗапроса = Новый ТабличныйДокумент;
				ТабличныйДокументРезультатаЗапроса.НачатьАвтогруппировкуСтрок();
				
				// Вывод заголовка запроса
				ОписаниеТаблицы = РезультатыВыполнения.ОписаниеТаблиц[ИндексРезультата];
				ОписаниеВыводаТаблицы = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ПолучитьОписаниеНастройкиВыводаТаблицы(Данные, ОписаниеТаблицы.ТаблицаДляПомещения);
				
				ВывестиТаблицу = (ОписаниеВыводаТаблицы.Вывод <> ИТКВ_Перечисления.ВидВыводаТаблицыНеВыводить());
				Если ВывестиТаблицу Тогда
					
					// Вывод заголовка
					ОбластьЗаголовокЗапроса = Области.ЗаголовокЗапроса;
					ОбластьЗаголовокЗапроса.Параметры.Заголовок = ОписаниеТаблицы.Заголовок;
					ОбластьЗаголовокЗапроса.Параметры.Пояснение = ПояснениеЗаголовкаЗапросаВРезультате(ВыведеноСтрок, КоличествоСтрок);
					
					ВывестиОткрыто = (ОписаниеВыводаТаблицы.Вывод <> ИТКВ_Перечисления.ВидВыводаТаблицыСвернуто());
					ТабличныйДокументРезультатаЗапроса.Вывести(ОбластьЗаголовокЗапроса, 0, , ВывестиОткрыто);
					
					// Вывод шапки таблицы
					ТабличныйДокументРезультатаЗапроса.Вывести(Области.ШапкаТаблицы, 1);
					
					ЗаполнениеРасшифровокДляТаблицЗначений(СтрокиЗапроса, РезультатВыполнения.Колонки, ДанныеРасшифровки, МетодРасшифровкиТаблицЗначений);
					
					// Вывод строк таблицы
					Если ВыделятьОсобыеЗначенияВРезультате Тогда
						ДополнительнаяОбработкаСтрок(СтрокиЗапроса, РезультатВыполнения.Колонки);
					КонецЕсли;
					ТабличныйДокументРезультатаЗапроса.Вывести(СтрокиЗапроса, 1);
					
					ТабличныйДокументРезультатаЗапроса.ЗакончитьАвтогруппировкуСтрок();
					
					ШиринаКолонок = Новый Массив;
					АлгоритмОпределенияОптимальнойШириныКолонок = 1;
					ШиринаНаКартинку = 2;
					
					Если АлгоритмОпределенияОптимальнойШириныКолонок = 0 Тогда // Ширина по Наименованию колонки (простой и быстрый алгоритм)
						
						Для Каждого Колонка Из РезультатВыполнения.Колонки Цикл
							ШиринаКолонок.Добавить(Макс(СтрДлина(Колонка.Имя) + 1 + ШиринаНаКартинку, Колонка.Ширина));
						КонецЦикла;
						
					ИначеЕсли АлгоритмОпределенияОптимальнойШириныКолонок = 1 Тогда // Ширина по содержимому, анализируем первые 10 строк (более сложный алгоритм)
						
						Для Каждого Колонка Из РезультатВыполнения.Колонки Цикл
							ШиринаКолонок.Добавить(СтрДлина(Колонка.Имя) + 1 + ШиринаНаКартинку);
						КонецЦикла;
						
						КоличествоАнализируемыхСтрок = Мин(СтрокиЗапроса.ВысотаТаблицы, 20);
						Для НомерКолонки = 1 По ШиринаКолонок.Количество() Цикл
							
							ИндексКолонки = НомерКолонки - 1;
							
							Для НомерСтроки = 1 По КоличествоАнализируемыхСтрок Цикл
								
								ОбластьСтрока = СтрокиЗапроса.Область(НомерСтроки, НомерКолонки);
								ДлинаТекстаПоля = СтрДлина(СокрЛП(ОбластьСтрока.Текст)) + 1;
								
								ШиринаКолонок[ИндексКолонки] = Макс(ДлинаТекстаПоля * КоэффициентШириныКолонок(ДлинаТекстаПоля, ОбластьСтрока.Шрифт.Жирный), ШиринаКолонок[ИндексКолонки]);
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
					МаксимальнаяШирина = 100;
					НомерКолонки = 1;
					Для НомерКолонки = 1 По ШиринаКолонок.Количество() Цикл
						ШиринаКолонки = ШиринаКолонок[НомерКолонки - 1];
						ШиринаКолонок[НомерКолонки - 1] = Мин(ШиринаКолонки, МаксимальнаяШирина);
					КонецЦикла;
					
					УстановитьШиринуКолонок(ТабличныйДокументРезультат, РезультатВыполнения.Колонки, ШиринаКолонок);
					
				КонецЕсли;
				
				// Вывод результата запроса со своим форматом строк
				ТабличныйДокументРезультат.Вывести(ТабличныйДокументРезультатаЗапроса).СоздатьФорматСтрок();
				
			КонецЦикла;
			
			Результат.Вставить("Результат", ТабличныйДокументРезультат);
			Результат.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
			
			Если ЗначениеЗаполнено(АдресРезультата) Тогда
				
				// Заполним количество элементов в результате (для пакета - количество запросов с результатом, для одного запроса - количество строк
				Если РезультатыВыполнения.КоличествоЗапросовСРезультатом = 1 Тогда
					
					КоличествоВРезультате = СтрШаблон(НСтр("ru = 'Таблица, %1'; en = 'Table, %1'"), ПояснениеЗаголовкаЗапросаВРезультате(ВыведеноСтрок, КоличествоСтрок));
					
				Иначе
					
					ШаблонФорматаЧисла = НСтр("ru = '%1 таблиц; %1 таблица; %1 таблицы; %1 таблицы; %1 таблиц; %1 таблиц'; en = '%1 tables; %1 table; %1 tables; %1 tables; %1 tables; %1 tables'");
					КоличествоВРезультате = СтрокаСЧислом(ШаблонФорматаЧисла, РезультатыВыполнения.КоличествоЗапросовСРезультатом, ВидЧисловогоЗначения.Количественное);
					
				КонецЕсли;
				Результат.Вставить("Количество", КоличествоВРезультате);
				
				Результат.Вставить("ВсеСтрокиВыведены", ВсеСтрокиВыведены);
				Результат.Вставить("КоличествоЗапросовСРезультатом", РезультатыВыполнения.КоличествоЗапросовСРезультатом);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ИТКВ_ВременноеХранилище.Поместить(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат ТабличныйДокументРезультат;
	
КонецФункции

// Детальный замер пакетного запроса
//
// Параметры:
//	Данные - Данные - Данные
//	АдресРезультата - Строка - Адрес временного хранилища результата
//
Процедура ДетальныйЗамер(Параметры, АдресРезультата) Экспорт
	
	Данные = Параметры.Данные;
	
	КоличествоШагов = 2;
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Представление", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(100));
	ТЗРезультат.Колонки.Добавить("КоличествоСтрок", ИТКВ_ТипыКлиентСервер.ОписаниеЧисло(10));
	ТЗРезультат.Колонки.Добавить("Время", ИТКВ_ТипыКлиентСервер.ОписаниеЧисло(10, 3));
	ТЗРезультат.Колонки.Добавить("Доля", ИТКВ_ТипыКлиентСервер.ОписаниеЧисло(10, 2));
	
	Шаг = 1;
	ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Инициализация параметров, временных таблиц';
																						|en = 'Initialization of parameters, temporary tables'"), Шаг, КоличествоШагов));
	
	Запрос = НачальнаяИнициализация(Данные);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Данные.Текст);
	
	ТекстОшибки = "";
	Попытка
		
		ИнициализацияПередВыполнением(Данные, Запрос);
		
		КоличествоЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
		Для НомерЗапроса = 1 По КоличествоЗапросов Цикл
			
			ЗапросПакета = СхемаЗапроса.ПакетЗапросов[НомерЗапроса - 1];
			
			Шаг = 2;
			Состояние = СтрШаблон(НСтр("ru = 'Замер выполнения запроса (%1/%2)'; en = 'Measurement of query execution (%1/%2)'"), НомерЗапроса, КоличествоЗапросов);
			ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(Состояние, Шаг, КоличествоШагов));
			
			ОписаниеЗапросаПакета = ОписаниеЗапросаПакета(ЗапросПакета);
			Запрос.Текст = ОписаниеЗапросаПакета.Текст;
			
			// Начало замера   {
			НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			Результат = Запрос.Выполнить();
			
			// Конец замера {
			ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
			
			НоваяСтрока = ТЗРезультат.Добавить();
			НоваяСтрока.Представление = ОписаниеЗапросаПакета.Представление;
			НоваяСтрока.Время = ИТКВ_ОбщийКлиентСервер.МиллисекВСек(ВремяВыполнения);
			
			НоваяСтрока.КоличествоСтрок = КоличествоСтрокВРезультатеЗапроса(Результат, ЗапросПакета);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	// Дополнительная обработка результата
	ОбщееВремя = ТЗРезультат.Итог("Время");
	Для Каждого Строка Из ТЗРезультат Цикл
		
		Если ЗначениеЗаполнено(ОбщееВремя) Тогда
			Строка.Доля = ИТКВ_ОбщийКлиентСервер.ПроцентОтОбщего(Строка.Время, ОбщееВремя, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", ТекстОшибки);
	Результат.Вставить("Результат", ТЗРезультат);
	ИТКВ_ВременноеХранилище.Поместить(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение результата для обработки
//
// Параметры:
//	Данные - Данные - Данные
//	АдресРезультата - Строка - Адрес временного хранилища результата
//
Процедура РезультатДляОбработки(Параметры, АдресРезультата) Экспорт
	
	Данные = Параметры.Данные;
	
	КоличествоШагов = 2;
	
	Шаг = 1;
	ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Выполнение запроса'; en = 'Query execution'"), Шаг, КоличествоШагов));
	
	Запрос = НачальнаяИнициализация(Данные);
	
	РезультатВыполнения = Неопределено;
	ОшибкаПриВыполнении = "";
	
	Попытка
		
		ИнициализацияПередВыполнением(Данные, Запрос);
		РезультатВыполнения = Запрос.ВыполнитьПакет();
		
	Исключение
		
		ОшибкаПриВыполнении = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", ИТКВ_ЗапросКлиентСервер.ИнформацияООшибке(ОшибкаПриВыполнении));
	
	ТекстЭтапа = НСтр("ru = 'Подготовка результата'; en = 'Preparation of the result'");
	ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(ТекстЭтапа, Шаг, КоличествоШагов));
	
	Результат.Вставить("Результат", ПодготовитьПакетРезультатовДляОбработки(РезультатВыполнения));
	
	ИТКВ_ВременноеХранилище.Поместить(Результат, АдресРезультата);
	
КонецПроцедуры

// Возвращает значения параметров
//
// Параметры:
//  Данные  - Данные - Данные
//  ПолучитьЗначения  - Булево - Получить значения
//
// Возвращаемое значение:
//   Структура - Значения параметров запроса
//
Функция ЗначенияПараметров(Данные, ПолучитьЗначения = Истина) Экспорт
	
	ЗначенияПараметров = Новый Структура;
	Для Каждого Параметр Из Данные.Параметры Цикл
		
		Имя = Параметр.Ключ;
		ЗначенияПараметров.Вставить(Имя, ЗначениеПараметра(Данные, Имя, ПолучитьЗначения));
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Возвращает значения параметров
//
// Параметры:
//  Данные  - Данные - Данные
//  Имя  - Имя - Данные
//  ПолучитьЗначения  - Булево - Получить значения
//
// Возвращаемое значение:
//   Структура - Значения параметров запроса
//
Функция ЗначениеПараметра(Данные, Имя, ПолучитьЗначения = Истина) Экспорт
	
	Результат = Данные.ЗначенияПараметров.Получить(Имя);
	ОписаниеТипов = Данные.Параметры.Получить(Имя);
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ПолучитьЗначения Тогда
			
			ОписаниеЗначения = Результат;
			Если ОписаниеЗначения.Вид = ИТКВ_Перечисления.СложныйПараметрЗапросаВыражение() Тогда
				
				Комментарий = СтрШаблон(НСтр("ru = 'Параметр: %1'; en = 'Parameter: %1'"), Имя);
				Результат = ИТКВ_ОбщийВызовСервера.ВычислитьВыражениеНаВстроенномЯзыке(ОписаниеЗначения.Значение, Комментарий);
				
			ИначеЕсли ОписаниеЗначения.Вид = ИТКВ_Перечисления.СложныйПараметрЗапросаТаблицаЗначений() Тогда
				
				Если ЭтоАдресВременногоХранилища(ОписаниеЗначения.Значение) Тогда
					Результат = ПолучитьИзВременногоХранилища(ОписаниеЗначения.Значение);
				Иначе
					Результат = ОписаниеЗначения.Значение;
				КонецЕсли;
				
			ИначеЕсли ОписаниеЗначения.Вид = ИТКВ_Перечисления.СложныйПараметрЗапросаГраница() Тогда
				
				ОписаниеГраницы = ОписаниеЗначения.Значение;
				Результат = ГраницаИзОписания(ОписаниеГраницы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		
	ИначеЕсли ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ТипПараметраТаблицаЗначений(ОписаниеТипов) Тогда
		
		Результат = Новый ТаблицаЗначений;
		
	Иначе
		
		Результат = ОписаниеТипов.ПривестиЗначение(Результат);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Получает количество запросов в пакете
//
// Параметры:
//  Схема  - СхемаЗапроса - Объект схема запроса
//  УчитыватьВременныеТаблицы  - Булево - Учитывать временные таблицы
//  УчитыватьЗапросы  - Булево - Учитывать запросы
//
// Возвращаемое значение:
//   Число - Количество запросов с результатом
//
Функция КоличествоВПакете(Схема, УчитыватьВременныеТаблицы = Истина, УчитыватьЗапросы = Истина) Экспорт
	
	Результат = 0;
	
	Для Каждого ЗапросСхемы Из Схема.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросСхемы) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
			
			Если УчитыватьВременныеТаблицы  Тогда
				Результат = Результат + 1;
			КонецЕсли;
			
		Иначе
			
			Если УчитыватьЗапросы Тогда
				Результат = Результат + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПервыйЗапросСхемыСРезультатом(Схема, УчитыватьВременныеТаблицы = Ложь) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого ЗапросСхемы Из Схема.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросСхемы) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ УчитыватьВременныеТаблицы
				И ЗначениеЗаполнено(ЗапросСхемы.ТаблицаДляПомещения) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = ЗапросСхемы;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуютсяИтоги(Схема) Экспорт
	
	ЗапросСхемы = ПервыйЗапросСхемыСРезультатом(Схема);
	Возврат (ЗапросСхемы.ОбщиеИтоги ИЛИ ЗначениеЗаполнено(ЗапросСхемы.КонтрольныеТочкиИтогов));
	
КонецФункции

// Проверяет текст запроса извлекает параметры, используемые временные таблицы
//
// Параметры:
//	Текст - Строка - Текст запроса
//
// Возвращаемое значение:
//	Структура - информация о проверке
//		*ТекстОшибки - Строка - Текст ошибки
//		*Параметры - Соответстие - Описание параметров запроса
//		*ВременныеТаблицы - Соответстие - Описание используемых временных таблиц
//
Функция ПроверитьТекст(Текст) Экспорт
	
	ТекстОшибки = "";
	Параметры = Новый Соответствие;
	ВременныеТаблицы = Новый Соответствие;
	ВнешниеИсточники = Новый Соответствие;
	
	Попытка
		
		Параметры = НайтиПараметры(Текст);
		
		// Временные таблицы, внешние источники, внешние источники (параметры
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Текст);
		Для Каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
			
			Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТаблицы = ЗапросПакета.ТаблицаДляПомещения;
			Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
				
				ОписаниеВременнойТаблицы = Новый Структура;
				ВременныеТаблицы.Вставить(ИмяТаблицы, ОписаниеВременнойТаблицы);
				
			КонецЕсли;
			
			СобратьВнешниеИсточники(ЗапросПакета, ВнешниеИсточники, Параметры);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("Параметры", Параметры);
	Результат.Вставить("ВременныеТаблицы", ВременныеТаблицы);
	Результат.Вставить("ВнешниеИсточники", ВнешниеИсточники);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПараметры(Текст, ТекстОшибки = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Попытка
		
		Запрос = Новый Запрос(Текст);
		НайденныеПараметры = Запрос.НайтиПараметры();
		
		Для Каждого ОписаниеПараметра Из НайденныеПараметры Цикл
			
			ТипЗначения = ОписаниеПараметра.ТипЗначения;
			
			// Тип фиксированная длина неверно редактируется в ячейке "123" становится "123   "
			Если ТипЗначения.СодержитТип(Тип("Строка"))
					И ТипЗначения.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
				
				КвалификаторСтрокиПеременнаяДлина = Новый КвалификаторыСтроки(ТипЗначения.КвалификаторыСтроки.Длина, ДопустимаяДлина.Переменная);
				
				// Убираем тип Строка
				ТипЗначения = Новый ОписаниеТипов(ТипЗначения, , "Строка");
				// Добавляем тип Строка
				ТипЗначения = Новый ОписаниеТипов(ТипЗначения, "Строка", , ТипЗначения.КвалификаторыЧисла, КвалификаторСтрокиПеременнаяДлина, ТипЗначения.КвалификаторыДаты);
				
			КонецЕсли;
			
			// Тип Число(0,0) при ограничении ячейки не позволяет ввести значения < 1 например 0,1 (наверное это баг)
			Если ТипЗначения.СодержитТип(Тип("Число"))
					И ТипЗначения.КвалификаторыЧисла.Разрядность = 0 Тогда
				
				РасширенныйКвалификаторЧисла = Новый КвалификаторыЧисла(30, 8);
				ТипЗначения = Новый ОписаниеТипов(ТипЗначения, , "Число"); // Убираем тип Число	
				ТипЗначения = Новый ОписаниеТипов(ТипЗначения, "Число", , РасширенныйКвалификаторЧисла, ТипЗначения.КвалификаторыСтроки, ТипЗначения.КвалификаторыДаты); // Добавляем тип Число
				
			КонецЕсли;
			
			Если ИТКВ_Типы.СодержитТипТаблицаЗначений(ТипЗначения) Тогда
				ТипЗначения = ИТКВ_Перечисления.СложныйПараметрЗапросаТаблицаЗначений();
			КонецЕсли;
			
			Результат.Вставить(ОписаниеПараметра.Имя, ТипЗначения);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает границу по описанию границы
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы
//
// Возвращаемое значение:
//   Граница - Граница
//
Функция ГраницаИзОписания(ОписаниеГраницы) Экспорт
	
	Если ОписаниеГраницы.Вид = ИТКВ_Перечисления.ВидГраницыВключая() Тогда
		Вид = ВидГраницы.Включая;
	Иначе
		Вид = ВидГраницы.Исключая;
	КонецЕсли;
	
	Возврат Новый Граница(ОписаниеГраницы.Значение, Вид);
	
КонецФункции

// Возвращает описание границы
//
// Параметры:
//  Граница  - Граница - Граница
//
// Возвращаемое значение:
//   Структура - Описание границы
//
Функция ОписаниеИзГраницы(Граница) Экспорт
	
	Если Граница.ВидГраницы = ВидГраницы.Включая Тогда
		Вид = ИТКВ_Перечисления.ВидГраницыВключая();
	Иначе
		Вид = ИТКВ_Перечисления.ВидГраницыИсключая();
	КонецЕсли;
	
	Возврат ИТКВ_ЗапросКлиентСервер.ОписаниеГраницы(Граница.Значение, Вид);
	
КонецФункции

// Получает дату из описания границы (значение сложного параметра)
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы (значение сложного параметра)
//
// Возвращаемое значение:
//   Дата - Дата
//
Функция ДатаИзОписанияГраницы(ОписаниеГраницы) Экспорт
	
	Результат = Неопределено;
	ГраницаЗначение = ОписаниеГраницы.Значение;
	
	Если ТипЗнч(ГраницаЗначение) = Тип("Дата") Тогда
		Результат = ГраницаЗначение;
	ИначеЕсли ТипЗнч(ГраницаЗначение) = Тип("МоментВремени") Тогда
		Результат = ГраницаЗначение.Дата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает момент времени из описания границы (значение сложного параметра)
//
// Параметры:
//  ОписаниеГраницы  - Структура - Описание границы (значение сложного параметра)
//
// Возвращаемое значение:
//   Дата - Дата
//
Функция МоментВремениИзОписанияГраницы(ОписаниеГраницы) Экспорт
	
	Результат = Неопределено;
	ГраницаЗначение = ОписаниеГраницы.Значение;
	
	Если ТипЗнч(ГраницаЗначение) = Тип("Дата") Тогда
		Результат = Новый МоментВремени(ГраницаЗначение);
	ИначеЕсли ТипЗнч(ГраницаЗначение) = Тип("МоментВремени") Тогда
		Результат = ГраницаЗначение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеПараметраВТекст(Значение, Язык = "ru") Экспорт
	
	Результат = Неопределено;
	ТипЗначения = ТипЗнч(Значение);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Если ОбъектМетаданных = Неопределено Тогда
		
		Если ТипЗначения = Тип("Булево")
			ИЛИ ТипЗначения = Тип("Число")
			ИЛИ ТипЗначения = Тип("Строка") Тогда
			
			Результат = ВРег(ИТКВ_Код.Значение(Значение));
			
		ИначеЕсли ТипЗначения = Тип("Дата") Тогда
			
			Год = ИТКВ_Строки.ЧислоВСтроку(Год(Значение));
			Месяц = Месяц(Значение);
			День = День(Значение);
			
			Если НачалоДня(Значение) = Значение Тогда
				
				Шаблон = НСтр("ru = 'ДАТАВРЕМЯ(%1, %2, %3)'; en = 'DATETIME(%1, %2, %3)'", Язык);
				Результат = СтрШаблон(Шаблон, Год, Месяц, День);
				
			Иначе
				
				Шаблон = НСтр("ru = 'ДАТАВРЕМЯ(%1, %2, %3, %4, %5, %6)'; en = 'DATETIME(%1, %2, %3, %4, %5, %6)'", Язык);
				Результат = СтрШаблон(Шаблон, Год, Месяц, День, Час(Значение), Минута(Значение), Секунда(Значение));
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = Тип("Тип") Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Значение);
			Если ОбъектМетаданных <> Неопределено Тогда
				
				Шаблон = НСтр("ru = 'ТИП(%1)'; en = 'TYPE(%1)'", Язык);
				Результат = СтрШаблон(Шаблон, ИТКВ_Метаданные.ПолноеИмя(ОбъектМетаданных));
				
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = Тип("ВидДвиженияНакопления")
				ИЛИ ТипЗначения = Тип("ВидДвиженияНакопления")
				ИЛИ ТипЗначения = Тип("ВидСчета") Тогда
			
			Шаблон = НСтр("ru = 'ЗНАЧЕНИЕ(%1)'; en = 'VALUE(%1)'", Язык);
			Результат = СтрШаблон(Шаблон, ИТКВ_Код.Значение(Значение));
			
		КонецЕсли;
		
	Иначе
		
		ИмяОбъектаМетаданных = ОбъектМетаданных.Имя;
		ИмяОбъектаКоллекцииМетаданных = ИТКВ_Метаданные.ИмяОбъектаКоллекции(ОбъектМетаданных, Язык);
		ИмяОбъектаКоллекции = ИТКВ_Метаданные.ИмяОбъектаКоллекции(ОбъектМетаданных, Язык);
		
		ДоступныеТипыОбъекта = ИТКВ_МетаданныеКлиентСерверПовтИсп.ДоступныеТипыОбъекта(Язык);
		
		Если ДоступныеТипыОбъекта.Найти(ИмяОбъектаКоллекцииМетаданных) <> Неопределено Тогда
			
			Если Значение.Пустая() Тогда
				
				ИмяПредопределенного = НСтр("ru = 'ПустаяСсылка'; en = 'EmptyRef'", Язык);
				
			ИначеЕсли ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоПеречисление(ИмяОбъектаКоллекции) Тогда
				
				ИмяПредопределенного = XMLСтрока(Значение);
				
			Иначе
				
				ИмяПредопределенного = Значение.ИмяПредопределенныхДанных;
				
			КонецЕсли;
			
			Шаблон = НСтр("ru = 'ЗНАЧЕНИЕ(%1.%2.%3)'; en = 'VALUE(%1.%2.%3)'", Язык);
			Результат = СтрШаблон(Шаблон, ИмяОбъектаКоллекцииМетаданных, ИмяОбъектаМетаданных, ИмяПредопределенного);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеВТекст(Значение, Язык = Неопределено) Экспорт
	
	Если Язык = Неопределено Тогда
		Язык = ИТКВ_ОбщийКлиентСервер.КодТекущегоЯзыка();
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов")
			И Значение.Типы().Количество() = 1 Тогда
		
		Тип = Значение.Типы()[0];
		Если Тип = Тип("Дата") Тогда
			
			Результат = НСтр("ru = 'ДАТА'; en = 'DATE'", Язык);
			
		ИначеЕсли Тип = Тип("Строка") Тогда
			
			Результат = НСтр("ru = 'СТРОКА'; en = 'STRING'", Язык);
			
		ИначеЕсли Тип = Тип("Булево") Тогда
			
			Результат = НСтр("ru = 'БУЛЕВО'; en = 'BOOLEAN'", Язык);
			
		ИначеЕсли Тип = Тип("Число") Тогда
			
			КвалификаторыЧисла = Значение.КвалификаторыЧисла;
			
			Если ЗначениеЗаполнено(КвалификаторыЧисла.РазрядностьДробнойЧасти) Тогда
				
				Шаблон = НСтр("ru = 'ЧИСЛО(%1, %2)'; en = 'NUMBER(%1, %2)'", Язык);
				Результат = СтрШаблон(Шаблон, КвалификаторыЧисла.Разрядность, КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли ЗначениеЗаполнено(КвалификаторыЧисла.Разрядность) Тогда
				
				Шаблон = НСтр("ru = 'ЧИСЛО(%1)'; en = 'NUMBER(%1)'", Язык);
				Результат = СтрШаблон(Шаблон, КвалификаторыЧисла.Разрядность);
				
			Иначе
				
				Результат = НСтр("ru = 'ЧИСЛО'; en = 'NUMBER'", Язык);
				
			КонецЕсли;
			
		ИначеЕсли ИТКВ_ТипыКлиентСервер.ЭтоСсылочный(Тип) Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Результат = ИТКВ_Метаданные.ПолноеИмя(ОбъектМетаданных, Язык);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает фрагмент текста запроса, отделяющего один запрос от другого (используется в пакетных запросах).
//
// Возвращаемое значение:
//  Строка - разделитель запросов. ///////////////////////////////////////////////////////////////////////////////
//
Функция РазделительПакетов() Экспорт
	
	Возврат "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьЗапрос(Данные, Режим, АнализируетсяПланЗапроса, ОбратныйПорядокЗапросовПакета)
	
	ТекстЗапроса = Данные.Текст;
	Запрос = НачальнаяИнициализация(Данные);
	
	// Дополнительно собираем временные таблицы вложенных запросов
	ТекстИнициализации = ИТКВ_ОбщийКлиентСервер.Свойство(Данные, "ТекстИнициализации");
	Если ЗначениеЗаполнено(ТекстИнициализации) Тогда
		ТекстЗапроса = ТекстИнициализации + "
						|;
						|" + ТекстЗапроса;
	КонецЕсли;
	
	Если АнализируетсяПланЗапроса Тогда
		
		UID = Новый УникальныйИдентификатор;
		ИдентификаторUID = СтрЗаменить(UID, "-", "_");
		
		ТекстЗапроса = СтрШаблон("ВЫБРАТЬ ""%1_begin"" КАК Метка ПОМЕСТИТЬ Marker_%3_begin;
		|%2
		|; ВЫБРАТЬ ""%1_end"" КАК Метка ПОМЕСТИТЬ Marker_%3_end", UID, ТекстЗапроса, ИдентификаторUID);
		
		IDПроцесса = ИТКВ_АнализПланаЗапроса.ИдентификаторПроцессаОС();

	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыводРезультата = ИТКВ_ОбщийКлиентСервер.ЭтоРежимВыполненияСРезультатом(Режим);
	Если ВыводРезультата Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
	КонецЕсли;
	
	Если Режим = ИТКВ_Перечисления.РежимВыполненияЗапросаВыполнение()
			И КоличествоВПакете(СхемаЗапроса, Ложь) = 0 Тогда
			
		// Если в запросе нет результатов (обычно это помещение во временную таблицу) отобразим с результатами временных таблиц
		Режим = ИТКВ_Перечисления.РежимВыполненияЗапросаСРезультатамиВременныхТаблиц();
		
	КонецЕсли;
	
	СРезультатамиВременныхТаблиц = (Режим = ИТКВ_Перечисления.РежимВыполненияЗапросаСРезультатамиВременныхТаблиц());
	
	НачалоВыполнения = ТекущаяДатаСеанса();
	ВремяВыполнения = Неопределено;
	
	ТекстОшибкиПриВыполнении = "";
	
	Попытка
		
		ИнициализацияПередВыполнением(Данные, Запрос);
		
		// Начало замера времени выполнения запроса --------------------------------------------------------------------------------- {
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
		ПакетСПромежуточнымиДанными = ИТКВ_ВыполнениеСАнализомПлана.ВыполнитьПакет(Запрос, СРезультатамиВременныхТаблиц);
			
		// Конец замера { -----------------------------------------------------------------------------------------------------------
		ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
		
		Если АнализируетсяПланЗапроса Тогда // Удалим результаты маркировочных запросов первый и последний
			ПакетСПромежуточнымиДанными.Удалить(0);
			ПакетСПромежуточнымиДанными.Удалить(ПакетСПромежуточнымиДанными.ВГраница());
		КонецЕсли;
		
	Исключение
		
		// Ошибка при выполнении
		ТекстОшибкиПриВыполнении = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат = Новый Структура;
	Если АнализируетсяПланЗапроса Тогда
		Результат.Вставить("UID", UID);
		Результат.Вставить("IDПроцесса", IDПроцесса);
		Результат.Вставить("НачалоВыполнения", НачалоВыполнения);
	КонецЕсли;
	
	ОшибкаПриВыполнении = ИТКВ_ЗапросКлиентСервер.ИнформацияООшибке(ТекстОшибкиПриВыполнении, АнализируетсяПланЗапроса);
	Результат.Вставить("ОшибкаПриВыполнении", ОшибкаПриВыполнении);
	Результат.Вставить("ВремяВыполнения", ВремяВыполнения);
	
	КоличествоЗапросовСРезультатом = 0;
	ПакетРезультатов = Новый Массив;
	
	Если ОшибкаПриВыполнении = Неопределено Тогда
		
		Если ВыводРезультата Тогда
			
			ОписаниеТаблиц = Новый Массив; ИтогиИменаКолонок = Новый Массив;
			
			ИндексРезультата = 0;
			Для Каждого СхемаЗапросаПакета Из СхемаЗапроса.ПакетЗапросов Цикл
				
				Если ТипЗнч(СхемаЗапросаПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
					
					ТаблицаДляПомещения = СхемаЗапросаПакета.ТаблицаДляПомещения;
					
					Если АнализируетсяПланЗапроса И СтрНайти(ТаблицаДляПомещения, ИдентификаторUID) Тогда // Пропускаем временные таблицы маркеры начала, окончания для ТЖ
						Продолжить;
					КонецЕсли;
				
					КонтрольныеТочкиИтогов = Новый Массив;
					Для Каждого КонтрольнаяТочкиИтогов Из СхемаЗапросаПакета.КонтрольныеТочкиИтогов Цикл
						КонтрольныеТочкиИтогов.Добавить(КонтрольнаяТочкиИтогов.ИмяКолонки);
					КонецЦикла;
					ИтогиИменаКолонок.Добавить(КонтрольныеТочкиИтогов);
					
					ЗапросСРезультатом = ПустаяСтрока(ТаблицаДляПомещения) ИЛИ (СРезультатамиВременныхТаблиц И ЗначениеЗаполнено(ТаблицаДляПомещения));
					
					Если ЗапросСРезультатом Тогда
						
						КоличествоЗапросовСРезультатом = КоличествоЗапросовСРезультатом + 1;
						
						ОписаниеТаблицы = Новый Структура;
						ОписаниеТаблицы.Вставить("Заголовок", ЗаголовокЗапроса(ИндексРезультата + 1, ТаблицаДляПомещения));
						ОписаниеТаблицы.Вставить("ТаблицаДляПомещения", ТаблицаДляПомещения);
						
						Если ОбратныйПорядокЗапросовПакета Тогда
							
							ОписаниеТаблиц.Вставить(0, ОписаниеТаблицы);
							ПакетРезультатов.Вставить(0, ПакетСПромежуточнымиДанными[ИндексРезультата]);
							
						Иначе
							
							ОписаниеТаблиц.Добавить(ОписаниеТаблицы);
							ПакетРезультатов.Добавить(ПакетСПромежуточнымиДанными[ИндексРезультата]);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИндексРезультата = ИндексРезультата + 1;
				
			КонецЦикла;
			
			Результат.Вставить("ИменаКолонокИтогов", ИтогиИменаКолонок);
			Результат.Вставить("ОписаниеТаблиц", ОписаниеТаблиц);
			
			РезультатВыполнения = ПакетРезультатов;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Корректировка заголовка когда результирующий запрос единственный
	Если Режим = ИТКВ_Перечисления.РежимВыполненияЗапросаВыполнение()
			И КоличествоЗапросовСРезультатом = 1 Тогда
			
		Для Каждого ОписаниеТаблицы Из ОписаниеТаблиц Цикл
			
			Если ЗначениеЗаполнено(ОписаниеТаблицы.ТаблицаДляПомещения) Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеТаблицы.Заголовок = Данные.Представление;
			
		КонецЦикла;
			
	КонецЕсли;
	
	Результат.Вставить("Результат", РезультатВыполнения);
	Результат.Вставить("КоличествоЗапросовСРезультатом", КоличествоЗапросовСРезультатом);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьОбластиВыводаРезультата(Колонки, ВыделятьОсобыеЗначения, ЧередованиеЦветовСтрок)
	
	Макет = Обработки.ИТКВ_КонсольРазработчика.ПолучитьМакет("ИТКВ_РезультатЗапроса");

	ОбластьШапкаЗапроса = Макет.ПолучитьОбласть(1, 1); // ШапкаЗапроса
	ОбластьШапкаПоля = Макет.ПолучитьОбласть(2, 1); // ШапкаПоля
	ОбластьЗначениеПоля1 = Макет.ПолучитьОбласть(3, 1); // ЗначениеПоля1
	ОбластьЗначениеПоля2 = Макет.ПолучитьОбласть(4, 1); // ЗначениеПоля2
	
	ШапкаТаблицы = Новый ТабличныйДокумент;
	СтрокаЗапроса1 = Новый ТабличныйДокумент;
	СтрокаЗапроса2 = Новый ТабличныйДокумент;
	Для Каждого Колонка Из Колонки Цикл
		
		ОбластьШапкаПоля.Параметры.ИмяПоля = Колонка.Имя;
		ОблШапкаПоля = ШапкаТаблицы.Присоединить(ОбластьШапкаПоля, 1);
		ОблШапкаПоля.Примечание.Текст = ИТКВ_Типы.ПодсказкаОписания(Колонка.Имя, Колонка.ТипЗначения);
		ОблШапкаПоля.Картинка = ИТКВ_Типы.КартинкаОписания(Колонка.ТипЗначения);
		
		ОблЗначениеПоля1 = СтрокаЗапроса1.Присоединить(ОбластьЗначениеПоля1);
		ОблЗначениеПоля2 = СтрокаЗапроса2.Присоединить(ОбластьЗначениеПоля2);
		
		ЗаполнениеОбластиЗначения(ОблЗначениеПоля1, Колонка, ВыделятьОсобыеЗначения);
		ЗаполнениеОбластиЗначения(ОблЗначениеПоля2, Колонка, ВыделятьОсобыеЗначения);
		
	КонецЦикла;
	
	Области = Новый Структура;
	Области.Вставить("ЗаголовокЗапроса", ОбластьШапкаЗапроса);
	Области.Вставить("ШапкаТаблицы", ШапкаТаблицы);
	Области.Вставить("Строка1", СтрокаЗапроса1);
	
	Если ЧередованиеЦветовСтрок Тогда
		
		СтрокаЧередованияСтрок = СтрокаЗапроса2;
		
	Иначе
		
		СтрокаЧередованияСтрок = СтрокаЗапроса1;
		
	КонецЕсли;
	
	Области.Вставить("Строка2", СтрокаЧередованияСтрок);
	
	Возврат Области;
	
КонецФункции

Функция ВывестиСтрокиВыборки(Выборка, ДокументВывода, Области, СИерархией, НомерСтроки, МаксимумСтрок)
	
	ВыведеныВсе = Истина;

	ВыборкаСтроки = Выборка.Выбрать();
	КоличествоСтрок = ВыборкаСтроки.Количество();
	Пока ВыборкаСтроки.Следующий() Цикл
		
		Если НомерСтроки = МаксимумСтрок Тогда
			ВыведеныВсе = Ложь;
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки % 2 Тогда
			ОбластьВыводаСтрока = Области.Строка2;
		Иначе
			ОбластьВыводаСтрока = Области.Строка1;
		КонецЕсли;
		ОбластьВыводаСтрока.Параметры.Заполнить(ВыборкаСтроки);
		ДокументВывода.Вывести(ОбластьВыводаСтрока, ВыборкаСтроки.Уровень() + 1);
		
		Если СИерархией Тогда
			ВывестиСтрокиВыборки(ВыборкаСтроки, ДокументВывода, Области, СИерархией, НомерСтроки, МаксимумСтрок);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ВыведеныВсе, КоличествоСтрок", ВыведеныВсе, КоличествоСтрок);
	
КонецФункции

Функция ПояснениеЗаголовкаЗапросаВРезультате(ВыведеноСтрок, КоличествоСтрок, ВсеСтрокиВыведены = Истина)
	
	ВсеСтрокиВыведены = (КоличествоСтрок = ВыведеноСтрок);
	
	Если ВсеСтрокиВыведены Тогда
		Результат = ИТКВ_Строки.ТекстНекотороеКоличествоСтрок(КоличествоСтрок);
	Иначе
		Результат = СтрШаблон(НСтр("ru = '%1 из %2, не все выведены'; en = '%1 from %2, not all rows outputed'"), ВыведеноСтрок, КоличествоСтрок);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнениеРасшифровокДляТаблицЗначений(СтрокиЗапроса, Колонки, ДанныеРасшифровки, МетодРасшифровкиТаблицЗначений)
	
	ЦветТекстаПустыхЗначенийРезультата = ЦветТекстаПустыхЗначенийРезультата();
	КоличествоКолонок = Колонки.Количество();
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		
		Колонка = Колонки[НомерКолонки - 1];
		Если НЕ Колонка.ТипЗначения.СодержитТип(Тип("РезультатЗапроса")) Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = 1 По СтрокиЗапроса.ВысотаТаблицы Цикл
			
			ОбластьСтрока = СтрокиЗапроса.Область(НомерСтроки, НомерКолонки);
			ЗначениеРасшифровки = ОбластьСтрока.Расшифровка;
			
			Если ТипЗнч(ЗначениеРасшифровки) <> Тип("РезультатЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Гиперссылка = Ложь;
			Если МетодРасшифровкиТаблицЗначений = ИТКВ_Перечисления.РасшифровкаТаблицЗначенийОтключена() Тогда
				
				Текст = НСтр("ru = '<Таблица значений>'; en = '<Value table>'");
				Расшифровывать = Ложь;
				
			Иначе
				
				Расшифровывать = Истина;
				
				Если ЗначениеРасшифровки.Пустой() Тогда
					КоличествоСтрок = 0;
				Иначе
					
					Если МетодРасшифровкиТаблицЗначений = ИТКВ_Перечисления.РасшифровкаТаблицЗначенийУпрощенная() Тогда
						
						КоличествоСтрок = "?";
						
					ИначеЕсли МетодРасшифровкиТаблицЗначений = ИТКВ_Перечисления.РасшифровкаТаблицЗначенийПолная() Тогда
						
						ТаблицаЗначений = ЗначениеРасшифровки.Выгрузить();
						КоличествоСтрок = ТаблицаЗначений.Количество();
						ТаблицаЗначений = Неопределено;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если КоличествоСтрок = 0 Тогда
					Текст = НСтр("ru = '<Пустая таблица значений>'; en = '<Empty value table>'");
				Иначе
					Гиперссылка = Истина;
					Текст = СтрШаблон(НСтр("ru = 'Таблица значений (%1)'; en = 'Value table (%1)'"), КоличествоСтрок);
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьСтрока.Текст = Текст;
			Если Гиперссылка Тогда
				
				ОбластьСтрока.Гиперссылка = Истина;
				ОбластьСтрока.ЦветТекста = ИТКВ_ОбщийКлиентСервер.ЦветТекстаГиперссылки();
				
			Иначе
				
				ОбластьСтрока.ЦветТекста = ЦветТекстаПустыхЗначенийРезультата;
				
			КонецЕсли;
			
			Если Расшифровывать Тогда
				
				UIDРасшифровки = Новый УникальныйИдентификатор;
				ОбластьСтрока.Расшифровка = Новый Структура("Значение", UIDРасшифровки);
				ДанныеРасшифровки.Вставить(UIDРасшифровки, ЗначениеРасшифровки);
				
			Иначе
				
				Расшифровка = Новый Структура("Сообщение", НСтр("ru = 'Расшифровка отключена в настройках'; en = 'Decryption disabled in settings'"));
				ОбластьСтрока.Расшифровка = Расшифровка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнительнаяОбработкаСтрок(СтрокиЗапроса, Колонки)
	
	// Выделение NULL, 0, Неопределено, ПустаяСтрока, ПустаяДата и т.д. - значений без представлений, которые нужно как-то различать
	
	// Подготовка кэша особых значений
	ТипыЗначений = Новый Массив;
	Для Каждого Колонка Из Колонки Цикл
		ТипыЗначений.Добавить(Колонка.ТипЗначения);
	КонецЦикла;
	КэшВыделенияОсобыхЗначений = ИТКВ_Общий.КэшВыделенияОсобыхЗначений(ТипыЗначений);
	
	ЦветТекстаПустыхЗначенийРезультата = ЦветТекстаПустыхЗначенийРезультата();
	КоличествоКолонок = Колонки.Количество();
	КоличествоСтрок = СтрокиЗапроса.ВысотаТаблицы;
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			ОбластьСтрока = СтрокиЗапроса.Область(НомерСтроки, НомерКолонки);
			Расшифровка = ОбластьСтрока.Расшифровка;
			
			ОсобоеЗначениеПредставление = КэшВыделенияОсобыхЗначений.Получить(Расшифровка);
			Если ОсобоеЗначениеПредставление = Неопределено Тогда
				
				Если Расшифровка = Неопределено Тогда
					
					ОбластьСтрока.Текст = НСтр("ru = '<Неопределено>'; en = '<Undefined>'");
					ОбластьСтрока.ЦветТекста = ЦветТекстаПустыхЗначенийРезультата;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			ОбластьСтрока.Текст = ОсобоеЗначениеПредставление;
			ОбластьСтрока.Расшифровка = Неопределено;
			ОбластьСтрока.ЦветТекста = ЦветТекстаПустыхЗначенийРезультата;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЦветТекстаПустыхЗначенийРезультата()
	
	Возврат Новый Цвет(120, 120, 120);
	
КонецФункции

Функция КоэффициентШириныКолонок(Ширина, ШрифтЖирный)
	
	Коэффициент = 1;
	Если Ширина > 10 И Ширина <= 15 Тогда
		Коэффициент = 0.92;
	ИначеЕсли Ширина > 15 И Ширина <= 20 Тогда
		Коэффициент = 0.86;
	ИначеЕсли Ширина > 20 И Ширина <= 40 Тогда
		Коэффициент = 0.83;
	ИначеЕсли Ширина > 40 Тогда
		Коэффициент = 0.8;
	КонецЕсли;
	
	Если ШрифтЖирный = Истина Тогда // Нужно Истина т.к. бывает что Жирность для шрифта неопределена
		Коэффициент = Коэффициент * 1.15;
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

Процедура УстановитьШиринуКолонок(ТабличныйДокумент, Колонки, ШиринаКолонок)
	
	Для НомерКолонки = 1 По Колонки.Количество() Цикл
		
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		Область = ВременныйТабличныйДокумент.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки);
		ТабличныйДокумент.Присоединить(Область).ШиринаКолонки = ШиринаКолонок[НомерКолонки - 1];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузкаДанныхВременныхТаблиц(Данные, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Номер = 1;
	ПакетЗапросов = Новый СписокЗначений;
	
	Для Каждого ОписаниеВнешнегоИсточника Из ИТКВ_КонсольРазработчика.ЗначенияВнешнихИсточников(Данные) Цикл
		
		ИмяТаблицы = ОписаниеВнешнегоИсточника.Ключ;
		ВременнаяТаблица = ОписаниеВнешнегоИсточника.Значение;
		
		Если ВременнаяТаблица = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗагружаемаяТаблица = ПодготовитьВременнуюТаблицу(ВременнаяТаблица);
		ЗагружаемаяТаблицаКолонки = ЗагружаемаяТаблица.Колонки;
		Если НЕ ЗначениеЗаполнено(ЗагружаемаяТаблицаКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПолей = Новый Массив;
		ИндексыПолей = Новый Массив;
		Для Каждого Колонка Из ЗагружаемаяТаблица.Колонки Цикл
			
			СписокПолей.Добавить(Колонка.Имя);
			
			Если ИТКВ_ТаблицаЗначений.ИндексируетсяКолонка(ЗагружаемаяТаблица, Колонка.Имя) Тогда
				ИндексыПолей.Добавить(Колонка.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
		ИмяПараметра = "ТаблицаЗначений" + Номер;
		Запрос.УстановитьПараметр(ИмяПараметра, ЗагружаемаяТаблица);
		
		ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
		|	%1
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	&%3 КАК ТЗ", СтрСоединить(СписокПолей, "," + Символы.ПС), ИмяТаблицы, ИмяПараметра);
		
		Если ЗначениеЗаполнено(ИндексыПолей) Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон("
			|ИНДЕКСИРОВАТЬ ПО
			|	%1", СтрСоединить(ИндексыПолей, "," + Символы.ПС));
		КонецЕсли;
		
		ПакетЗапросов.Добавить(ТекстЗапроса, ИмяТаблицы);
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	Для Каждого ЭлементПакета Из ПакетЗапросов Цикл
		
		ТекстЗапроса = ЭлементПакета.Значение;
		Запрос.Текст = ТекстЗапроса;
		
		Попытка
			
			Запрос.Выполнить();
			
		Исключение
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ШаблонИсключения = НСтр("ru = 'Ошибка создания временной таблицы: %1
			|%2';
			|en = 'Error creating temporary table: %1
			|%2'");
			ВызватьИсключение СтрШаблон(ШаблонИсключения, ЭлементПакета.Представление, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеОбластиЗначения(Область, Колонка, ВыделятьОсобыеЗначения)
	
	Формат = "";
	Если Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
		КвалификаторыДатыЧастиДаты = Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты;
		Если КвалификаторыДатыЧастиДаты = ЧастиДаты.ДатаВремя Тогда
			Формат = "ДЛФ=DT";
		ИначеЕсли КвалификаторыДатыЧастиДаты = ЧастиДаты.Дата Тогда
			Формат = "ДЛФ=D";
		ИначеЕсли КвалификаторыДатыЧастиДаты = ЧастиДаты.Время Тогда
			Формат = "ДЛФ=T";
		КонецЕсли;
	КонецЕсли;
	
	Область.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
	
	Параметр = Колонка.Имя;
	Если Колонка.ТипЗначения.СодержитТип(Тип("РезультатЗапроса")) Тогда
		Параметр = "";
	КонецЕсли;
	
	ПараметрРасшифровки = Колонка.Имя;
	Если Не (ВыделятьОсобыеЗначения ИЛИ ТребуетсяРасшифровкаКолонкиРезультата(Колонка.ТипЗначения)) Тогда
		ПараметрРасшифровки = "";
	КонецЕсли;
	
	Область.Параметр = Параметр;
	Область.ПараметрРасшифровки = ПараметрРасшифровки;
	
	Если ЗначениеЗаполнено(Формат) Тогда
		Область.Формат = Формат;
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяРасшифровкаКолонкиРезультата(ОписаниеТипов)
	
	Результат = Ложь;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ТипТребуетРасшифровки(Тип, ОписаниеТипов) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТипТребуетРасшифровки(Тип, ОписаниеТипов)
	
	Возврат (Тип = Тип("Строка") И (ОписаниеТипов.КвалификаторыСтроки.Длина = 0
											ИЛИ ОписаниеТипов.КвалификаторыСтроки.Длина > 20))
			ИЛИ Тип = Тип("РезультатЗапроса") ИЛИ ИТКВ_ТипыКлиентСервер.ЭтоСсылочный(Тип);
	
КонецФункции

Функция ПодготовитьПакетРезультатовДляОбработки(ПакетРезультатов)
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ПакетРезультатов) Тогда
		
		ТаблицаЗначений = ПакетРезультатов[ПакетРезультатов.ВГраница()].Выгрузить();
		Результат = ПодготовитьТаблицуЗначенийДляОбработки(ТаблицаЗначений);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуЗначенийДляОбработки(ТаблицаЗначений)
	
	УдаляемыеКолонки = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("РезультатЗапроса"))
				ИЛИ Колонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				
			УдаляемыеКолонки.Добавить(Колонка);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Колонка Из УдаляемыеКолонки Цикл
		
		ТаблицаЗначений.Колонки.Удалить(Колонка);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ЗаголовокЗапроса(Номер, ТаблицаДляПомещения)
	
	Результат = СтрШаблон(НСтр("ru = 'Запрос №%1'; en = 'Query #%1'"), Номер);
	
	Если ЗначениеЗаполнено(ТаблицаДляПомещения) Тогда
		Результат = Результат + СтрШаблон(" [%1]", ТаблицаДляПомещения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьВременнуюТаблицу(ТаблицаЗначений)
	
	НоваяТаблицаЗначений = Неопределено;
	Результат = ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		ИмяКолонки = Колонка.Имя;
		НедопустимыйТип = Не ДопустимоеОписаниеТиповПоляВыборкиВоВременнуюТаблицу(Колонка.ТипЗначения);
							
		СодержитТипNull = Колонка.ТипЗначения.СодержитТип(Тип("Null"));
		
		Если НедопустимыйТип
				ИЛИ СодержитТипNull Тогда
				
			Если НоваяТаблицаЗначений = Неопределено Тогда
				
				НоваяТаблицаЗначений = ТаблицаЗначений.Скопировать();
				Результат = НоваяТаблицаЗначений;
				
			КонецЕсли;
			
			Если НедопустимыйТип Тогда
				
				НоваяТаблицаЗначений.Колонки.Удалить(ИмяКолонки);
				
			ИначеЕсли СодержитТипNull Тогда
				
				Если Колонка.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
					ТипЗначения = ИТКВ_Типы.ВсеИспользуемыеТипыКолонкиТЗ(ТаблицаЗначений, ИмяКолонки);
				Иначе
					ТипЗначения = ИТКВ_ТипыКлиентСервер.ОписаниеБезNull(Колонка.ТипЗначения);
				КонецЕсли;
				ИТКВ_ТаблицаЗначений.ИзменитьТипКолонки(НоваяТаблицаЗначений, ИмяКолонки, ТипЗначения, ТаблицаЗначений);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ДопустимоеОписаниеТиповПоляВыборкиВоВременнуюТаблицу(ОписаниеТипов)
	
	Возврат ЗначениеЗаполнено(ОписаниеТипов)
				И НЕ (ОписаниеТипов.СодержитТип(Тип("ОписаниеТипов"))
						ИЛИ ОписаниеТипов.СодержитТип(Тип("МоментВремени")));
	
КонецФункции

Процедура СобратьВнешниеИсточники(ОбъектЗапроса, ВнешниеИсточники, Параметры)
	
	Если ТипЗнч(ОбъектЗапроса) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		
		Для Каждого ОператорЗапроса Из ОбъектЗапроса.Операторы Цикл
			
			Для Каждого ИсточникСхемы Из ОператорЗапроса.Источники Цикл
				
				СобратьВнешниеИсточники(ИсточникСхемы, ВнешниеИсточники, Параметры);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОбъектЗапроса) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
		
		СобратьВнешниеИсточники(ОбъектЗапроса.Запрос, ВнешниеИсточники, Параметры);
		
	ИначеЕсли ТипЗнч(ОбъектЗапроса) = Тип("ИсточникСхемыЗапроса") Тогда
		
		СобратьВнешниеИсточники(ОбъектЗапроса.Источник, ВнешниеИсточники, Параметры);
		
		Для Каждого Соединение Из ОбъектЗапроса.Соединения Цикл
			СобратьВнешниеИсточники(Соединение.Источник, ВнешниеИсточники, Параметры);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОбъектЗапроса) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		
		ИмяТаблицы = ОбъектЗапроса.ИмяТаблицы;
		
		ПоляИсточника = Новый СписокЗначений;
		Для Каждого ДоступноеПоле Из ОбъектЗапроса.ДоступныеПоля Цикл
			ПоляИсточника.Добавить(ДоступноеПоле.ТипЗначения, ДоступноеПоле.Имя);
		КонецЦикла;
		
		Если СтрНачинаетсяС(ИмяТаблицы, "&") Тогда
			
			Параметры.Вставить(Сред(ИмяТаблицы, 2), ИТКВ_ЗапросКлиентСервер.ЗначениеСложногоПараметра(ИТКВ_Перечисления.СложныйПараметрЗапросаТаблицаЗначений(), ПоляИсточника));
			
		Иначе
			
			ВнешниеИсточники.Вставить(ИмяТаблицы, ПоляИсточника);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция НачальнаяИнициализация(Данные)
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = Данные.Текст;
	
	// Установка значений параметров
	Для Каждого ЗначениеПараметра Из ЗначенияПараметров(Данные) Цикл
		Запрос.УстановитьПараметр(ЗначениеПараметра.Ключ, ЗначениеПараметра.Значение);
	КонецЦикла;

	Возврат Запрос;
	
КонецФункции

Процедура ИнициализацияПередВыполнением(Данные, Запрос)
	
	ЗагрузкаДанныхВременныхТаблиц(Данные, Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция КоличествоСтрокВРезультатеЗапроса(РезультатЗапроса, ЗапросПакета)
	
	Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		
		Результат = 0;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Если ЗначениеЗаполнено(ЗапросПакета.ТаблицаДляПомещения) Тогда

			Выборка.Следующий();
			Результат = Выборка.Количество;
			
		Иначе
			
			Результат = Выборка.Количество();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЗапросаПакета(ЗапросПакета)
	
	Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		
		Текст = СтрШаблон("УНИЧТОЖИТЬ %1", ЗапросПакета.ИмяТаблицы);
		Представление = СтрШаблон(НСтр("ru = 'Удалить %1'; en = 'Delete %1'"), ЗапросПакета.ИмяТаблицы);
		
	Иначе
		
		Текст = ЗапросПакета.ПолучитьТекстЗапроса();
		Представление = ЗапросПакета.Представление();
		
	КонецЕсли;
	
	Возврат Новый Структура("Текст, Представление", Текст, Представление);
	
КонецФункции

#КонецОбласти


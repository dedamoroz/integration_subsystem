#Область ПрограммныйИнтерфейс

// Получает подсказку к описанию типа
//
// Параметры:
//   Имя - Строка - Имя
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//   УчитыватьNull - Булево - Учитывать Null
//
// Возвращаемое значение:
//   Строка	- Подсказка описания типа
//
Функция ПодсказкаОписания(Имя, ОписаниеТипов, УчитыватьNull = Ложь) Экспорт
	
	КоличествоТипов = ИТКВ_ТипыКлиентСервер.Количество(ОписаниеТипов, Не УчитыватьNull);
	ПредставлениеОписания = ПредставлениеОписания(ОписаниеТипов, Символы.ПС, УчитыватьNull);
	
	Если КоличествоТипов = 1 Тогда
		
		Шаблон = НСтр("ru = '%1
					|Тип: %2';
					|en = '%1
					|Type: %2'");
		Результат = СтрШаблон(Шаблон, Имя, ПредставлениеОписания);
		
	Иначе
		
		Шаблон = НСтр("ru = '%1
					|Типы (%2):
					|%3';
					|en = '%1
					|Types (%2):
					|%3'");
		Результат = СтрШаблон(Шаблон, Имя, КоличествоТипов, ПредставлениеОписания);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает подсказку к описанию типа
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//   Разделитель - Строка - Разделитель
//   УчитыватьNull - Булево - Учитывать тип Null
//   МаксимальноеКоличество - Число - Максимальное количество типов
//
// Возвращаемое значение:
//   Строка	- Подсказка описания типа
//
Функция ПредставлениеОписания(ОписаниеТипов, Разделитель = ", ", УчитыватьNull = Ложь, МаксимальноеКоличество = 10) Экспорт
	
	Результат = Новый Массив;
	Количество = 0;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если Количество = МаксимальноеКоличество Тогда
			Прервать;
		КонецЕсли;
		
		Если Тип = Тип("Null") И Не УчитыватьNull Тогда
			Продолжить;
		КонецЕсли;
		
		Представление = ПредставлениеТипа(Тип, ОписаниеТипов);
		Результат.Добавить(Представление);
		Количество = Количество + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Разделитель);
	
КонецФункции

Функция ПредставлениеТипа(Тип, ОписаниеТипов = Неопределено, Язык = Неопределено) Экспорт
	
	Если Язык = Неопределено Тогда
		Язык = ИТКВ_ОбщийКлиентСервер.КодТекущегоЯзыка();
	КонецЕсли;
	
	Если Тип = Тип("Строка") Тогда
		
		КвалификаторыСтроки = ОписаниеТипов.КвалификаторыСтроки;
		Если КвалификаторыСтроки.Длина = 0 Тогда // Строка неограниченной длины
			
			ВозвращаемаяСтрока = НСтр("ru = 'Строка (неограниченная)'; en = 'String (unlimited)'", Язык);
			
		Иначе
			
			Шаблон = НСтр("ru = 'Строка (%1, %2)'; en = 'String (%1, %2)'", Язык);
			Если КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
				Тип = НСтр("ru = 'фиксированная'; en = 'fixed'", Язык);
			Иначе
				Тип = НСтр("ru = 'переменная'; en = 'variable'", Язык);
			КонецЕсли;
			ВозвращаемаяСтрока = СтрШаблон(Шаблон, КвалификаторыСтроки.Длина, Тип);
			
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		ВозвращаемаяСтрока = СтрШаблон(НСтр("ru = 'Дата (%1)'; en = 'Date (%1)'", Язык), ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		КвалификаторыЧисла = ОписаниеТипов.КвалификаторыЧисла;
		
		Если КвалификаторыЧисла = ДопустимыйЗнак.Любой Тогда
			ДопСтрокаЗнак = "-/+";
		Иначе
			ДопСтрокаЗнак = "+";
		КонецЕсли;
		
		Шаблон = НСтр("ru = 'Число %1(%2.%3)'; en = 'Number %1(%2.%3)'", Язык);
		ВозвращаемаяСтрока = СтрШаблон(Шаблон, ДопСтрокаЗнак, КвалификаторыЧисла.Разрядность, КвалификаторыЧисла.РазрядностьДробнойЧасти);
		
	ИначеЕсли Тип = Тип("РезультатЗапроса")
				ИЛИ Тип = Тип("ТаблицаЗначений") Тогда
		
		ВозвращаемаяСтрока = НСтр("ru = 'ТаблицаЗначений'; en = 'ValueTable'");
		
	ИначеЕсли Тип = Тип("ВидДвиженияНакопления")
				ИЛИ Тип = Тип("Тип")
				ИЛИ Тип = Тип("ВидСчета")
				ИЛИ Тип = Тип("ХранилищеЗначения")
				ИЛИ Тип = Тип("УникальныйИдентификатор")
				ИЛИ Тип = Тип("Булево")
				ИЛИ Тип = Тип("МоментВремени") Тогда
		
		ВозвращаемаяСтрока = Строка(Тип);
		
	ИначеЕсли Тип = Тип("ОписаниеТипов") Тогда
		
		ВозвращаемаяСтрока = НСтр("ru = 'ОписаниеТипов'; en = 'TypeDescription'", Язык);
		
	Иначе
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			
			ВозвращаемаяСтрока = Строка(Тип);
			
		Иначе
			
			ВозвращаемаяСтрока = ИТКВ_Метаданные.ПолноеИмя(ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемаяСтрока;
	
КонецФункции

// Проверяет содержит ли описание типов тип ТаблицаЗначений
//
// Параметры:
//   ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Булево - Истина, если тип содержит тип ТаблицаЗначений
//
Функция СодержитТипТаблицаЗначений(ОписаниеТипов) Экспорт
	
	Возврат ОписаниеТипов.СодержитТип(Тип("ТаблицаЗначений"))
	
КонецФункции

// Получает картинку по описание типов
//
// Параметры:
//  ОписаниеТипов  - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка описания типов
//
Функция КартинкаОписания(ОписаниеТипов) Экспорт
	
	Если ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ТипПараметраТаблицаЗначений(ОписаниеТипов) Тогда
		Возврат БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеТипов) <> Тип("ОписаниеТипов") Тогда
		Возврат (Новый Картинка);
	КонецЕсли;
	
	КоличествоТипов = ИТКВ_ТипыКлиентСервер.Количество(ОписаниеТипов);
	
	Если КоличествоТипов = 0 Тогда
		
		Результат = Новый Картинка;
		
	ИначеЕсли КоличествоТипов > 1 Тогда
		
		Результат = ИТКВ_ОбщийКлиентСерверПовтИсп.БиблиотекаКартинок("ИТКВ_ТипСоставной");
		
	Иначе
		
		Результат = Картинка(Первый(ОписаниеТипов), ОписаниеТипов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает картинку типа
//
// Параметры:
//  Тип  - Тип - Тип
//  ОписаниеТипов - ОписаниеТипов - Описание типов
//
// Возвращаемое значение:
//   Картинка - Картинка типа
//
Функция Картинка(Тип, ОписаниеТипов = Неопределено) Экспорт
	
	Если Тип = Тип("Дата") Тогда
		
		Если ОписаниеТипов = Неопределено Тогда
			
			Результат = БиблиотекаКартинок.ИТКВ_ТипДата;
			
		Иначе
			
			Если ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				
				Результат = БиблиотекаКартинок.ИТКВ_ТипВремя;
				
			ИначеЕсли ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
				
				Результат = БиблиотекаКартинок.ИТКВ_ТипДата;
				
			Иначе
				
				Результат = БиблиотекаКартинок.ИТКВ_ТипПолнаяДата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Результат = ИТКВ_ТипыПовтИсп.КартинкаПростого(Строка(Тип));
		
		Если Результат = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				ИмяОбъектаКоллекции = ИТКВ_Метаданные.ИмяОбъектаКоллекции(ОбъектМетаданных);
				Результат = ИТКВ_ОбщийПовтИсп.КартинкаБиблиотеки(ИмяОбъектаКоллекции);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыКоллекцииРасширений(Коллекция) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Объект Из Коллекция Цикл
		
		Если Объект.РасширениеКонфигурации() = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Объект.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РедактируетсяВТаблицеЗначений(ОписаниеТипов) Экспорт
	
	Возврат Не (ОписаниеТипов.СодержитТип(Тип("ХранилищеЗначения"))
					ИЛИ ОписаниеТипов.СодержитТип(Тип("ДвоичныеДанные"))
					ИЛИ ОписаниеТипов.СодержитТип(Тип("ФиксированныйМассив"))
					ИЛИ ОписаниеТипов.СодержитТип(Тип("ФиксированнаяСтруктура"))
					ИЛИ ОписаниеТипов.СодержитТип(Тип("ФиксированноеСоответствие")));
	
КонецФункции

Функция ВсеИспользуемыеТипыКолонкиТЗ(ТаблицаЗначений, ИмяКолонки) Экспорт
	
	ИспользуемыеТипы = Новый Соответствие;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		Тип = Строка[ИмяКолонки];
		
		Если ИспользуемыеТипы.Получить(Тип) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуемыеТипы.Вставить(Тип, Истина);
		
	КонецЦикла;
	
	Типы = Новый Массив;
	Для Каждого ИспользуемыйТип Из ИспользуемыеТипы Цикл
		Типы.Добавить(ИспользуемыйТип.Ключ);
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(Типы);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Первый(ОписаниеТипов, ИсключатьNull = Истина)
	
	Результат = Неопределено;
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если ИсключатьNull И Тип = Тип("Null") Тогда
			
			Продолжить;
			
		Иначе
			
			Результат = Тип;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Сохраняет данные объекта в файл
//
// Параметры:
//  Путь  - Строка - Путь
//  Схема  - СхемаКомпоновкиДанных - Схема компоновки данных
//  Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных (необязательный)
//  ВнешниеНаборыДанных  - Структура - Внешние наборы данных (необязательный)
//  ИмяБезРасширения - Строка - Имя файла без расширения (необязательный)
//
// Возвращаемое значение:
//   Строка - Информация о результате
//
Функция СохранитьВФайл(Путь, Схема, Настройки = Неопределено, ВнешниеНаборыДанных = Неопределено, ИмяБезРасширения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Путь", Путь);
	ДополнительныеПараметры.Вставить("Имя", ИмяБезРасширения);
	ДополнительныеПараметры.Вставить("ВнешниеНаборыДанных", ВнешниеНаборыДанных);
	ДополнительныеПараметры.Вставить("Настройки", Настройки);
	
	Возврат ИТКВ_Отладка.СохранитьДанные(Схема, ИТКВ_Перечисления.ЭлементДанныхСхемаКомпоновкиДанных(), ИТКВ_Перечисления.ТипХраненияДанныхФайл(), ДополнительныеПараметры);
	
КонецФункции

// Сохраняет данные объекта в настройки
//
// Параметры:
//  Схема  - СхемаКомпоновкиДанных - Схема компоновки данных
//  Настройки - НастройкиКомпоновкиДанных - Настройки компоновки данных (необязательный)
//  ВнешниеНаборыДанных  - Структура - Внешние наборы данных (необязательный)
//  ИмяНастройки - Строка - Имя настройки (необязательный)
//
// Возвращаемое значение:
//   Строка - Информация о результате
//
Функция Сохранить(Схема, Настройки = Неопределено, ВнешниеНаборыДанных = Неопределено, ИмяНастройки = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Имя", ИмяНастройки);
	ДополнительныеПараметры.Вставить("ВнешниеНаборыДанных", ВнешниеНаборыДанных);
	ДополнительныеПараметры.Вставить("Настройки", Настройки);
	
	Возврат ИТКВ_Отладка.СохранитьДанные(Схема, ИТКВ_Перечисления.ЭлементДанныхСхемаКомпоновкиДанных(), ИТКВ_Перечисления.ТипХраненияДанныхНастройка(), ДополнительныеПараметры);
	
КонецФункции

// Выполняет схему компоновки данных, возвращает результат
//
// Параметры:
//	Данные - Данные - Данные
//	Режим - Перечисление.ИТКВ_РежимВыполненияСхемыКомпоновкиДанных - Режим выполнения схемы компоновки данных
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//	* АдресРезультата - Строка - Адрес временного хранилища результата
//	* АдресСхемыКомпоновкиДанных - Строка - Адрес временного хранилища схемы компоновки данных
//	* АдресДанныхРасшифровки - Строка - Адрес временного хранилища расшифровки
//	АдресРезультатаВыполнения - Строка - Адрес временного хранилища результата выполнения
//
// Возвращаемое значение:
//	ТабличныйДокумент - Табличный документ результат
//
Функция ПолучитьРезультат(Параметры, АдресРезультата = Неопределено) Экспорт
	
	ДанныеРасшифровки = Неопределено;
	ИсполняемыеЗапросы = Неопределено;
	
	Данные = Параметры.Данные;
	Режим = Параметры.Режим;
	ГлавнаяОперация = ИТКВ_ОбщийКлиентСервер.Свойство(Параметры, "ГлавнаяОперация");
	
	ТабличныйДокументРезультат = Новый ТабличныйДокумент;
	
	ВыводРезультата = ИТКВ_ОбщийКлиентСервер.ЭтоРежимВыполненияСРезультатом(Режим);
	АнализИсполняемыхЗапросов = (Режим = ИТКВ_Перечисления.РежимВыполненияСКДПолучениеИсполняемыхЗапросов());
	
	СДаннымиРасшифровки = Истина;
	Если ВыводРезультата Тогда
		КоличествоШагов = 5;
	Иначе
		КоличествоШагов = 4;
	КонецЕсли;
	Шаг = 1;
	
	ТекстОшибкиПриВыполнении = "";
	Попытка
		
		ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Получение схемы'; en = 'Getting the schema'"), Шаг, КоличествоШагов, ГлавнаяОперация));
		СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(Данные.XMLСхемаКомпоновкиДанных);
		
		ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Инициализация внешних источников'; en = 'Initialization of external sources'"), Шаг, КоличествоШагов, ГлавнаяОперация));
	
		// Начало замера времени выполнения --------------------------------------------------------------------------------- {
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Компоновка макета'; en = 'Layout layout'"), Шаг, КоличествоШагов, ГлавнаяОперация));
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		
		// Настройки варианта
		Если Данные.Свойство("XMLВариантОтчета") Тогда
			НастройкиКомпоновкиДанных = ВариантНастроек(Данные.XMLВариантОтчета);
		Иначе
			НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		
		// Пользовательские настройки
		Если Данные.Свойство("XMLПользовательскиеНастройки") Тогда
			ПользовательскиеНастройки = ПользовательскиеНастройки(Данные.XMLПользовательскиеНастройки);
			КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		КонецЕсли;
		
		НастройкиКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
		
		ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Выполнение'; en = 'Executing'"), Шаг, КоличествоШагов, ГлавнаяОперация));
		
		Если СДаннымиРасшифровки Тогда
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
		Иначе
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
		КонецЕсли;
		
		// Конец замера { ---------------------------------------------------------------------------------------------------
		ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
		
		Если АнализИсполняемыхЗапросов Тогда
			ИсполняемыеЗапросы = ИсполняемыеЗапросы(СхемаКомпоновкиДанных, МакетКомпоновкиДанных);
		КонецЕсли;
			
		Если ВыводРезультата Тогда

			ИТКВ_ДлительныеОперации.СообщитьПрогресс(ИТКВ_Строки.ТекстЭтапаПроцесса(НСтр("ru = 'Вывод результата'; en = 'The output'"), Шаг, КоличествоШагов, ГлавнаяОперация));
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			
			ИспользованиеВнешнихФункций = Данные.ИспользованиеВнешнихФункций;
			ВнешниеИсточники = ИТКВ_КонсольРазработчика.ЗначенияВнешнихИсточников(Данные, Истина);
			
			Если СДаннымиРасшифровки Тогда
				ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеИсточники, ДанныеРасшифровки, ИспользованиеВнешнихФункций);
			Иначе
				ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеИсточники, , ИспользованиеВнешнихФункций);
			КонецЕсли;
			
			ПроцессорВыводаРезультатаОтчета = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВыводаРезультатаОтчета.УстановитьДокумент(ТабличныйДокументРезультат);
			ПроцессорВыводаРезультатаОтчета.НачатьВывод();
			ПроцессорВыводаРезультатаОтчета.Вывести(ПроцессорКомпоновкиДанных);
			ПроцессорВыводаРезультатаОтчета.ЗакончитьВывод();
			
		КонецЕсли;
		
	Исключение
		
		// Ошибка при выполнении
		ТекстОшибкиПриВыполнении = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("РежимВыполнения", Режим);
	Если ЗначениеЗаполнено(ТекстОшибкиПриВыполнении) Тогда
		ВремяВыполнения = Неопределено;
	КонецЕсли;
	Результат.Вставить("ВремяВыполнения", ВремяВыполнения);
	Результат.Вставить("ОшибкаПриВыполнении", ТекстОшибкиПриВыполнении);

	Если ВыводРезультата Тогда
		
		Результат.Вставить("Результат", ТабличныйДокументРезультат);
		Результат.Вставить("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных);
		Результат.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
		Результат.Вставить("Количество", "?");
		
	КонецЕсли;
	
	Если АнализИсполняемыхЗапросов Тогда
		Результат.Вставить("ИсполняемыеЗапросы", ИсполняемыеЗапросы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ИТКВ_ВременноеХранилище.Поместить(Результат, АдресРезультата);
	КонецЕсли;
	
	Возврат ТабличныйДокументРезультат;
	
КонецФункции

// Возвращает схему компоновки данных по XML тексту
//
// Параметры:
//   Текст - Строка - XML текст схемы
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - Схема компоновки данных
//
Функция СхемаКомпоновкиДанных(Текст) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
		
	Иначе
		
		Возврат Новый СхемаКомпоновкиДанных;
		
	КонецЕсли;

КонецФункции

// Возвращает пользовательские настройки по XML тексту
//
// Параметры:
//   Текст - Строка - XML текст пользовательские настройки
//
// Возвращаемое значение:
//   ПользовательскиеНастройкиКомпоновкиДанных - Пользовательские настройки компоновки данных
//
Функция ПользовательскиеНастройки(Текст) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("ПользовательскиеНастройкиКомпоновкиДанных"));
		
	Иначе
		
		Результат = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает вариант настроек по XML тексту
//
// Параметры:
//   Текст - Строка - XML текст варианта настроек
//
// Возвращаемое значение:
//   НастройкиКомпоновкиДанных - Вариант настроек
//
Функция ВариантНастроек(Текст) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда

		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("НастройкиКомпоновкиДанных"));
		
	Иначе
		
		Результат = Новый НастройкиКомпоновкиДанных;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает XML текст для объекта системы компоновки данных
//
// Параметры:
//   Объект - СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,
//				ПользовательскиеНастройкиКомпоновкиДанных - Объект системы компоновки данных
//
// Возвращаемое значение:
//   Строка - XML текст объекта
//
Функция XMLТекст(Объект) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	Если ТипЗнч(Объект) = Тип("СхемаКомпоновкиДанных") Тогда
		ИмяТипаОбъекта = "dataCompositionSchema";
		URLТипаОбъекта = "http://v8.1c.ru/8.1/data-composition-system/schema";
	ИначеЕсли ТипЗнч(Объект) = Тип("НастройкиКомпоновкиДанных") Тогда
		ИмяТипаОбъекта = "Settings";
		URLТипаОбъекта = "http://v8.1c.ru/8.1/data-composition-system/settings";
	ИначеЕсли ТипЗнч(Объект) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ИмяТипаОбъекта = "UserSettings";
		URLТипаОбъекта = "http://v8.1c.ru/8.1/data-composition-system/settings";
	КонецЕсли;
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект, ИмяТипаОбъекта, URLТипаОбъекта);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Проверяет текст схемы компоновки данных, собирает данные внешних источников
//
// Параметры:
//	Текст - Строка - XML текст схемы компоновки данных
//
// Возвращаемое значение:
//	Структура - Результат проверки
//
Функция ПроверитьТекст(Текст) Экспорт
	
	ОписаниеВнешнихИсточников = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Текст) Тогда
			
		Попытка
			
			СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(Текст);
			СобратьДанныеВнешнихИсточников(СхемаКомпоновкиДанных.НаборыДанных, ОписаниеВнешнихИсточников);
			
		Исключение
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
			
	Иначе
			
		ТекстОшибки = ИТКВ_СКДКлиентСервер.ТекстОшибкиПустаяСхема();
			
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", ТекстОшибки);
	Результат.Вставить("ОписаниеВнешнихИсточников", ОписаниеВнешнихИсточников);
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеПоляВыбора(ОписаниеТипов) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Имя", ИТКВ_ТипыКлиентСервер.ОписаниеИмяМетаданных());
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Порядок", ИТКВ_ТипыКлиентСервер.ОписаниеЧисло(10));
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		
		Если НЕ ИТКВ_ТипыКлиентСервер.ЭтоСсылочный(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		ИмяОбъектаКоллекции = ИТКВ_Метаданные.ИмяОбъектаКоллекции(ОбъектМетаданных);
		
		// Стандартные реквизиты
		Для Каждого ОписаниеРеквизита Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			
			ИмяРеквизита = ОписаниеРеквизита.Имя;
			Если ИмяРеквизита = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьДоступноеПолеВыбора(Результат, ИмяРеквизита, ОписаниеРеквизита.Тип, 0);

		КонецЦикла;
		
		// Реквизиты
		Для Каждого ОписаниеРеквизита Из ОбъектМетаданных.Реквизиты Цикл
			
			ДобавитьДоступноеПолеВыбора(Результат, ОписаниеРеквизита.Имя, ОписаниеРеквизита.Тип);

		КонецЦикла;
		
		Если ИТКВ_МетаданныеКлиентСерверПовтИсп.ИмеетТабличныеЧасти(ИмяОбъектаКоллекции) Тогда
			
			// Табличные части
			Для Каждого ОписаниеТабличнойЧасти Из ОбъектМетаданных.ТабличныеЧасти Цикл
				
				РеквизитыТЧ = Новый СписокЗначений;
				Для Каждого РеквизитТЧ Из ОписаниеТабличнойЧасти.Реквизиты Цикл
					РеквизитыТЧ.Добавить(РеквизитТЧ.Тип, РеквизитТЧ.Имя);
				КонецЦикла;
				
				РеквизитыТЧ.СортироватьПоПредставлению();
				ДобавитьДоступноеПолеВыбора(Результат, ОписаниеТабличнойЧасти.Имя, РеквизитыТЧ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Сортировать("Порядок, Имя");
	
	Возврат Результат;
	
КонецФункции

Функция ТипНабораДанныхСхемыКомпоновкиДанных(Значение) Экспорт
	
	Если Значение = ИТКВ_Перечисления.СКДНаборДанныхЗапрос() Тогда
		
		Результат = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
		
	ИначеЕсли Значение = ИТКВ_Перечисления.СКДНаборДанныхОбъект() Тогда
		
		Результат = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных");
		
	Иначе
		
		Результат = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПеречислениеТипНабораДанных(Тип) Экспорт
	
	Если Тип = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		
		Результат = ИТКВ_Перечисления.СКДНаборДанныхЗапрос();
		
	ИначеЕсли Тип = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		
		Результат = ИТКВ_Перечисления.СКДНаборДанныхОбъединение();
		
	Иначе
		
		Результат = ИТКВ_Перечисления.СКДНаборДанныхОбъект();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипПоляНабораДанныхСхемыКомпоновкиДанных(Значение) Экспорт
	
	Если Значение = ИТКВ_Перечисления.СКДВидыПолейНаборовДанныхПоле() Тогда
		
		Результат = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных");
		
	ИначеЕсли Значение = ИТКВ_Перечисления.СКДВидыПолейНаборовДанныхНабор() Тогда
		
		Результат = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных");
		
	Иначе
		
		Результат = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПеречислениеТипПоляНабораДанных(Тип) Экспорт
	
	Если Тип = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
		
		Результат = ИТКВ_Перечисления.СКДВидыПолейНаборовДанныхПоле();
		
	ИначеЕсли Тип = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
		
		Результат = ИТКВ_Перечисления.СКДВидыПолейНаборовДанныхНабор();
		
	Иначе
		
		Результат = ИТКВ_Перечисления.СКДВидыПолейНаборовДанныхГруппа();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПеречислениеВидМакета(ОписаниеМакета, Заголовки) Экспорт
	
	ТипМакета = ТипЗнч(ОписаниеМакета);
	Если ТипМакета = Тип("МакетПоляСхемыКомпоновкиДанных") Тогда
		
		Результат = ИТКВ_Перечисления.СКДМакетПоля();
		
	ИначеЕсли ТипМакета = Тип("МакетГруппировкиСхемыКомпоновкиДанных") Тогда
		
		Если Заголовки Тогда
			Результат = ИТКВ_Перечисления.СКДМакетЗаголовкаГруппировки();
		Иначе
			Результат = ИТКВ_Перечисления.СКДМакетГруппировки();
		КонецЕсли;
		
	ИначеЕсли ТипМакета = Тип("МакетПолейИтогаСхемыКомпоновкиДанных") Тогда
		
		Результат = ИТКВ_Перечисления.СКДМакетРесурсов();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьСтруктурноеПоле(Приемник, Источник) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из Источник.Элементы Цикл
		
		ЗначениеПараметра = Приемник.НайтиЗначениеПараметра(Параметр.Параметр);
		
		Если ЗначениеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
		
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьЭлементы(Приемник, Источник) Экспорт

	ТипЭлемента = ТипЗнч(Приемник);
	СоздаватьПоТипу = НЕ (ТипЭлемента = Тип("УсловноеОформлениеКомпоновкиДанных")
							ИЛИ ТипЭлемента = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
							ИЛИ ТипЭлемента = Тип("ОформляемыеПоляКомпоновкиДанных")
							ИЛИ ТипЭлемента = Тип("ЗначенияПараметровДанныхКомпоновкиДанных"));
	ПриемникЭлементы = Приемник.Элементы;
	ПриемникЭлементы.Очистить();
	Для Каждого ЭлементИсточник Из Источник.Элементы Цикл

		Если СоздаватьПоТипу Тогда
			ЭлементПриемник = ПриемникЭлементы.Добавить(ТипЗнч(ЭлементИсточник));
		Иначе
			ЭлементПриемник = ПриемникЭлементы.Добавить();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЭлемента = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
			
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			СкопироватьСтруктурноеПоле(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление);
			
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
			
		КонецЕсли;

		//// В некоторых элементах коллекции необходимо заполнить другие коллекции
		//ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		//	СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		//ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
		//	СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		//ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		//	ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей(ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
		//	ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
		//	ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей));
		//	ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей());
		//КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьВариантНастроек(Приемник, Источник) Экспорт
	
	ТипЭлемента = ТипЗнч(Приемник);
	
	Если ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		СкопироватьВариантНастроек(Приемник.Настройки, Источник.Настройки);
		Возврат;
		
	КонецЕсли;
	
	НастройкиКомпоновкиДанных = (ТипЭлемента = Тип("НастройкиКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных = (ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаТаблицыКомпоновкиДанных = (ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных"));
	ГруппировкаДиаграммыКомпоновкиДанных = (ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных"));
	
	ЗаполнятьСтруктуру = НастройкиКомпоновкиДанных
						ИЛИ ГруппировкаКомпоновкиДанных
						ИЛИ ГруппировкаТаблицыКомпоновкиДанных
						ИЛИ ГруппировкаДиаграммыКомпоновкиДанных;
	ЗаполнятьПараметрыДанных = НастройкиКомпоновкиДанных;
	ЗаполнитьПоляГруппировки = ГруппировкаКомпоновкиДанных
								ИЛИ ГруппировкаТаблицыКомпоновкиДанных
								ИЛИ ГруппировкаДиаграммыКомпоновкиДанных;
	ЗаполнитьПользовательскиеПоля = НастройкиКомпоновкиДанных;
	ЗаполнятьОтбор = НастройкиКомпоновкиДанных
						ИЛИ ГруппировкаКомпоновкиДанных;
	ЗаполнятьПорядок = НастройкиКомпоновкиДанных
						ИЛИ ГруппировкаКомпоновкиДанных;
						
	// Заполнение
	Если ЗаполнятьПараметрыДанных Тогда
		СкопироватьЭлементы(Приемник.ПараметрыДанных, Источник.ПараметрыДанных);
	КонецЕсли;
	
	Если ЗаполнитьПоляГруппировки Тогда
		СкопироватьЭлементы(Приемник.ПоляГруппировки, Источник.ПоляГруппировки);
	КонецЕсли;
	
	Если ЗаполнитьПользовательскиеПоля Тогда
		СкопироватьЭлементы(Приемник.ПользовательскиеПоля, Источник.ПользовательскиеПоля);
	КонецЕсли;
	
	Если ЗаполнятьОтбор Тогда
		СкопироватьЭлементы(Приемник.Отбор, Источник.Отбор);
	КонецЕсли;
	
	Если ЗаполнятьПорядок Тогда
		СкопироватьЭлементы(Приемник.Порядок, Источник.Порядок);
	КонецЕсли;
	
	Если ЗаполнятьСтруктуру Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из Источник.Структура Цикл
			
			ТипЭлементаИсточника = ТипЗнч(ЭлементСтруктурыИсточник);
			Если ТипЭлементаИсточника = Тип("ГруппировкаТаблицыКомпоновкиДанных")
					ИЛИ ТипЭлементаИсточника = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
					
				ЭлементСтруктурыПриемник = Приемник.Структура.Добавить();
				
			Иначе
				
				ЭлементСтруктурыПриемник = Приемник.Структура.Добавить(ТипЭлементаИсточника);

			КонецЕсли;
				
			СкопироватьВариантНастроек(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	СкопироватьЭлементы(Приемник.Выбор, Источник.Выбор);
	СкопироватьЭлементы(Приемник.УсловноеОформление, Источник.УсловноеОформление);
	СкопироватьСтруктурноеПоле(Приемник.ПараметрыВывода, Источник.ПараметрыВывода);
	
	Если ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из Источник.Строки Цикл
			
			ЭлементСтруктурыПриемник = Приемник.Строки.Добавить();
			СкопироватьВариантНастроек(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
		Для Каждого ЭлементСтруктурыИсточник Из Источник.Колонки Цикл
			
			ЭлементСтруктурыПриемник = Приемник.Колонки.Добавить();
			СкопироватьВариантНастроек(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементСтруктурыИсточник Из Источник.Серии Цикл
			
			ЭлементСтруктурыПриемник = Приемник.Серии.Добавить();
			СкопироватьВариантНастроек(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
		Для Каждого ЭлементСтруктурыИсточник Из Источник.Точки Цикл
			
			ЭлементСтруктурыПриемник = Приемник.Точки.Добавить();
			СкопироватьВариантНастроек(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеМакета(Вид, ОписаниеМакета) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Вид", Вид);
	
	Если Вид = ИТКВ_Перечисления.СКДМакетПоля() Тогда
		
		Результат.Вставить("Поле", ОписаниеМакета.Поле);
		
	ИначеЕсли Вид = ИТКВ_Перечисления.СКДМакетГруппировки()
				ИЛИ Вид = ИТКВ_Перечисления.СКДМакетЗаголовкаГруппировки() Тогда
				
		Результат.Вставить("ТипМакета", ОписаниеМакета.ТипМакета);
		Результат.Вставить("ИмяГруппировки", ОписаниеМакета.ИмяГруппировки);
		Результат.Вставить("ПоляГруппировки", ОписаниеМакета.ПоляГруппировки);
		
	ИначеЕсли Вид = ИТКВ_Перечисления.СКДМакетРесурсов() Тогда
		
		Результат.Вставить("ТипМакета1", ОписаниеМакета.ТипМакета1);
		Результат.Вставить("ИмяГруппировки1", ОписаниеМакета.ИмяГруппировки1);
		Результат.Вставить("ПоляГруппировки1", ОписаниеМакета.ПоляГруппировки1);
		Результат.Вставить("ТипМакета2", ОписаниеМакета.ТипМакета2);
		Результат.Вставить("ИмяГруппировки2", ОписаниеМакета.ИмяГруппировки2);
		Результат.Вставить("ПоляГруппировки2", ОписаниеМакета.ПоляГруппировки2);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеОписанияРолиПоляНабораДанных(Роль) Экспорт
	
	Результат = Новый Массив;
	
	НомерПериода = ИТКВ_ОбщийКлиентСервер.Свойство(Роль, "НомерПериода", 0);
	Измерение = ИТКВ_ОбщийКлиентСервер.Свойство(Роль, "Измерение", Ложь);
	Счет = ИТКВ_ОбщийКлиентСервер.Свойство(Роль, "Счет", Ложь);
	Остаток = ИТКВ_ОбщийКлиентСервер.Свойство(Роль, "Остаток", Ложь);
	
	Если ЗначениеЗаполнено(НомерПериода) Тогда
		
		Результат.Добавить(НСтр("ru = 'Период'; en = 'Period'"));
		Результат.Добавить(НомерПериода);
		
		ТипПериода = ИТКВ_ОбщийКлиентСервер.Свойство(Роль, "ТипПериода", "Основной");
		Если ТипПериода = "Дополнительный" Тогда
			Результат.Добавить(НСтр("ru = 'Доп'; en = 'Add'"));
		КонецЕсли;
		
	ИначеЕсли Измерение Тогда
		
		Результат.Добавить(НСтр("ru = 'Измерение'; en = 'Dimension'"));
		Результат.Добавить(Роль.РодительскоеИзмерение);
		
	ИначеЕсли Счет Тогда
		
		Результат.Добавить(НСтр("ru = 'Счет'; en = 'Account'"));
		Результат.Добавить(Роль.ВыражениеВидаСчета);
		
	ИначеЕсли Остаток Тогда
		
		Результат.Добавить(НСтр("ru = 'Остаток'; en = 'Balance'"));
		
		ТипОстатка = Роль.ТипОстатка;
		Если ТипОстатка = "НачальныйОстаток" Тогда
			
			Результат.Добавить(НСтр("ru = 'НачОст'; en = 'InBal'"));
			
		ИначеЕсли ТипОстатка = "КонечныйОстаток" Тогда
			
			Результат.Добавить(НСтр("ru = 'КонОст'; en = 'EndBal'"));
			
		КонецЕсли;
		
		ТипБухгалтерскогоОстатка = Роль.ТипБухгалтерскогоОстатка;
		Если ТипБухгалтерскогоОстатка = "Дебет" Тогда
			
			Результат.Добавить(НСтр("ru = 'Дебет'; en = 'Debit'"));
			
		ИначеЕсли ТипБухгалтерскогоОстатка = "Кредит" Тогда
			
			Результат.Добавить(НСтр("ru = 'Кредит'; en = 'Credit'"));
			
		КонецЕсли;
		
		Результат.Добавить(Роль.ГруппаОстатка);
		Результат.Добавить(Роль.ПолеСчета);
		
	КонецЕсли;
	
	Обязательное = ИТКВ_ОбщийКлиентСервер.Свойство(Роль, "Обязательное", Ложь);
	Если Обязательное Тогда
		Результат.Добавить(НСтр("ru = 'Обязательное'; en = 'Mandatory'"));
	КонецЕсли;
	
	ИгнорироватьЗначенияNULL = ИТКВ_ОбщийКлиентСервер.Свойство(Роль, "ИгнорироватьЗначенияNULL", Ложь);
	Если ИгнорироватьЗначенияNULL Тогда
		Результат.Добавить(НСтр("ru = 'NULL'; en = 'NULL'"));
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, ", ");
	
КонецФункции

Функция ОписаниеРолиПоляНабораДанных(Роль = Неопределено) Экспорт
	
	Результат = ИТКВ_СКДКлиентСервер.ПустоеОписаниеРолиПоляНабораДанных();
	Если Роль = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, Роль, , "ТипБухгалтерскогоОстатка, ТипОстатка, ТипПериода");
	
	Если Роль.ТипПериода = ТипПериодаКомпоновкиДанных.Дополнительный Тогда
		ТипПериода = "Дополнительный";
	Иначе
		ТипПериода = "Основной";
	КонецЕсли;
	Результат.ТипПериода = ТипПериода;
	
	Если Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток Тогда
		ТипОстатка = "НачальныйОстаток";
	ИначеЕсли Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток Тогда
		ТипОстатка = "КонечныйОстаток";
	Иначе
		ТипОстатка = "Нет";
	КонецЕсли;
	Результат.ТипОстатка = ТипОстатка;
	
	Если Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет Тогда
		ТипБухгалтерскогоОстатка = "Дебет";
	ИначеЕсли Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит Тогда
		ТипБухгалтерскогоОстатка = "Кредит";
	Иначе
		ТипБухгалтерскогоОстатка = "Нет";
	КонецЕсли;
	Результат.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстатка;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРольПолеНабораДанныхПоОписанию(Роль, Описание) Экспорт
	
	ОписаниеРоли = ИТКВ_СКДКлиентСервер.ПустоеОписаниеРолиПоляНабораДанных();
	ЗаполнитьЗначенияСвойств(ОписаниеРоли, Описание);
	
	ТипПериода = ИТКВ_ОбщийКлиентСервер.Свойство(Описание, "ТипПериода", "Основной");
	ОписаниеРоли.ТипПериода = ТипПериодаКомпоновкиДанных[ТипПериода];
	
	ТипОстатка = ИТКВ_ОбщийКлиентСервер.Свойство(Описание, "ТипОстатка", "Нет");
	ОписаниеРоли.ТипОстатка = ТипОстаткаКомпоновкиДанных[ТипОстатка];
	
	ТипБухгалтерскогоОстатка = ИТКВ_ОбщийКлиентСервер.Свойство(Описание, "ТипБухгалтерскогоОстатка", "Нет");
	ОписаниеРоли.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных[ТипБухгалтерскогоОстатка];

	ЗаполнитьЗначенияСвойств(Роль, ОписаниеРоли);
	
КонецПроцедуры

Функция ИспользуемыеПараметры(СхемаКомпоновкиДанных) Экспорт
	
	Результат = Новый Структура;
	ИспользуемыеПараметрыНаборовДанных(СхемаКомпоновкиДанных.НаборыДанных, Результат);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Для Каждого ПараметрДанных Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		
		ИмяПараметра = ПараметрДанных.Параметр;
		Если Результат.Свойство(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
			
		ТипЗначения = ТипЗнч(ПараметрДанных.Значение);
		Результат.Вставить(ИмяПараметра, ИТКВ_ТипыКлиентСервер.ОписаниеТиповПоТипу(ТипЗначения));

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЛокализированнаяСтрокаНСтрИзXDTO(Объект, ИмяПоля) Экспорт
	
	СхемаXDTO = СериализаторXDTO.ЗаписатьXDTO(Объект);

	Результат = Новый СписокЗначений;
	
	Представление = СхемаXDTO[ИмяПоля];
	Если ТипЗнч(Представление) = Тип("Строка") Тогда
		
		КодТекущегоЯзыка = ИТКВ_ОбщийКлиентСервер.КодТекущегоЯзыка();
		Результат.Добавить(КодТекущегоЯзыка, Представление);
		
	ИначеЕсли ТипЗнч(Представление) = Тип("ОбъектXDTO") Тогда
		
		Для Каждого СтрокаПредставления Из СхемаXDTO[ИмяПоля].item Цикл
			
			Результат.Добавить(СтрокаПредставления.lang, СтрокаПредставления.content);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИТКВ_Строки.ЛокализированнаяСтрокаНСтрИзЗначения(Результат);
	
КонецФункции

Процедура ЛокализированнаяСтрокаЗаписатьНСтрВСхемуXDTO(СхемаXDTO, ИмяПоля, Значение) Экспорт
	
	XDTOLocalStringType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "LocalStringType"));

	ЛокализированнаяСтрокаЗначение = ИТКВ_Строки.ЛокализированнаяСтрокаЗначениеИзНСтр(Значение);
	Для Каждого СтрокаПредставления Из ЛокализированнаяСтрокаЗначение Цикл
		
		LocalStringItemType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "LocalStringItemType"));
		LocalStringItemType.lang = СтрокаПредставления.Значение;
		LocalStringItemType.content = СтрокаПредставления.Представление;
		
		XDTOLocalStringType.item.Добавить(LocalStringItemType);
		
	КонецЦикла;
	
	СхемаXDTO[ИмяПоля] = XDTOLocalStringType;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИсполняемыеЗапросы(СхемаКомпоновкиДанных, МакетКомпоновкиДанных)
	
	// Получение наборов данных
	НаборыДанных = Новый ДеревоЗначений;
	НаборыДанных.Колонки.Добавить("Имя", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(200));
	НаборыДанных.Колонки.Добавить("Тип", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока());
	НаборыДанных.Колонки.Добавить("Текст", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока());
	НаборыДанных.Колонки.Добавить("ИсходныйТекст", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока());
	
	ИсполняемыеЗапросыСборДанныхСхемыКомпоновкиДанных(СхемаКомпоновкиДанных.НаборыДанных, НаборыДанных);
	ИсполняемыеЗапросыСборДанныхМакетКомпоновкиДанных(МакетКомпоновкиДанных.НаборыДанных, НаборыДанных);
	
	// Получение значений параметров
	ЗначенияПараметров = Новый Соответствие;
	Для Каждого ОписаниеЗначенияПараметров Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		ЗначенияПараметров.Вставить(ОписаниеЗначенияПараметров.Имя, ОписаниеЗначенияПараметров.Значение);
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("НаборыДанных", НаборыДанных);
	Результат.Вставить("ЗначенияПараметров", ЗначенияПараметров);
	
	СвязиНаборов = ДанныеСвязейНаборовДанных(МакетКомпоновкиДанных.СвязиНаборовДанных);
	Результат.Вставить("СвязиНаборов", СвязиНаборов);
	
	Возврат Результат;
	
КонецФункции

Процедура ИсполняемыеЗапросыСборДанныхСхемыКомпоновкиДанных(НаборыДанных, КоллекцияСтрок)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ТипНабораДанных = ТипЗнч(НаборДанных);
		
		НоваяСтрока = КоллекцияСтрок.Строки.Добавить();
		НоваяСтрока.Имя = НаборДанных.Имя;
		НоваяСтрока.Тип = ПеречислениеТипНабораДанных(ТипНабораДанных);
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			НоваяСтрока.ИсходныйТекст = НаборДанных.Запрос;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			
			ИсполняемыеЗапросыСборДанныхСхемыКомпоновкиДанных(НаборДанных.Элементы, НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсполняемыеЗапросыСборДанныхМакетКомпоновкиДанных(НаборыДанных, КоллекцияСтрок)
	
	Если КоллекцияСтрок = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
			
			Строка = КоллекцияСтрок.Строки.Найти(НаборДанных.Имя, "Имя");
			Строка.Текст = НаборДанных.Запрос;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			
			Строка = КоллекцияСтрок.Строки.Найти(НаборДанных.Имя, "Имя");
			ИсполняемыеЗапросыСборДанныхМакетКомпоновкиДанных(НаборДанных.Элементы, Строка);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеСвязейНаборовДанных(Связи)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Источник", ИТКВ_ТипыКлиентСервер.ОписаниеСинонимМетаданных());
	Результат.Колонки.Добавить("Приемник", ИТКВ_ТипыКлиентСервер.ОписаниеСинонимМетаданных());
	Результат.Колонки.Добавить("ВыражениеИсточник", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока());
	Результат.Колонки.Добавить("ВыражениеПриемник", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока());
	Результат.Колонки.Добавить("Тип", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока());
	Результат.Колонки.Добавить("Условие", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока());
	
	Для Каждого ОписаниеСвязи Из Связи Цикл
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСвязи);
		НоваяСтрока.Источник = ОписаниеСвязи.НаборДанныхИсточник;
		НоваяСтрока.Приемник = ОписаниеСвязи.НаборДанныхПриемник;
		НоваяСтрока.Тип = ОписаниеСвязи.ТипСвязи;
		НоваяСтрока.Условие = ОписаниеСвязи.УсловиеСвязи;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СобратьДанныеВнешнихИсточников(ОбъектСКД, ОписаниеВнешнихИсточников)
	
	Если ТипЗнч(ОбъектСКД) = Тип("НаборыДанныхСхемыКомпоновкиДанных") Тогда
		
		Для Каждого НаборДанных Из ОбъектСКД Цикл
			
			Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
				
				СобратьДанныеВнешнихИсточников(НаборДанных.Элементы, ОписаниеВнешнихИсточников);
				
			ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
				
				Колонки = Новый СписокЗначений;
				Для Каждого Поле Из НаборДанных.Поля Цикл
					
					Если ТипЗнч(Поле) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
						
						Колонки.Добавить(Поле.ТипЗначения, Поле.Поле);
						
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеВнешнихИсточников.Вставить(НаборДанных.ИмяОбъекта, Колонки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДоступноеПолеВыбора(ТаблицаПолей, Имя, Значение, Порядок = 1)
	
	Строка = ТаблицаПолей.Найти(Имя, "Имя");
	
	Если Строка = Неопределено Тогда
		
		Строка = ТаблицаПолей.Добавить();
		Строка.Имя = Имя;
		Строка.Значение = Значение;
		
	Иначе
		
		Строка.Значение = ИТКВ_ТипыКлиентСервер.СложитьОписания(Строка.Значение, Значение);
		
	КонецЕсли;
	
	Строка.Порядок = Порядок;
	
КонецПроцедуры

Процедура ИспользуемыеПараметрыНаборовДанных(Источники, Результат)
	
	Для Каждого НаборДанных Из Источники Цикл
		
		ТипНабораДанных = ТипЗнч(НаборДанных);
		
		Если ТипНабораДанных = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			
			ТекстЗапроса = НаборДанных.Запрос;
			ПараметрыЗапроса = ИТКВ_Запрос.НайтиПараметры(ТекстЗапроса);
			Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
				Результат.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипНабораДанных = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ИспользуемыеПараметрыНаборовДанных(НаборДанных.Элементы, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

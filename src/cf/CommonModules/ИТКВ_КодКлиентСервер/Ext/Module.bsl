#Область ПрограммныйИнтерфейс

Функция ИмяОбъектаВидДвиженияНакопления(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'ВидДвиженияНакопления'; en = 'AccumulationRecordType'", Язык);
	
КонецФункции

Функция ИмяОбъектаВидДвиженияБухгалтерии(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'ВидДвиженияБухгалтерии'; en = 'AccountingRecordType'", Язык);
	
КонецФункции

Функция ИмяОбъектаВидСчета(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'ВидСчета'; en = 'AccountType'", Язык);
	
КонецФункции

Функция ИмяОбъектаВидГраницы(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'ВидГраницы'; en = 'BoundaryType'", Язык);
	
КонецФункции

Функция ИмяОбъектаДопустимыйЗнак(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'ДопустимыйЗнак'; en = 'AllowedSign'", Язык);
	
КонецФункции

Функция ИмяОбъектаДопустимаяДлина(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'ДопустимаяДлина'; en = 'AllowedLength'", Язык);
	
КонецФункции

Функция ИмяОбъектаЧастиДаты(Язык = "ru") Экспорт
	
	Возврат НСтр("ru = 'ЧастиДаты'; en = 'DateFractions'", Язык);
	
КонецФункции

Функция СокращенноеПредставлениеРезультата(Результат) Экспорт
	
	Возврат ИТКВ_Строки.Сокращенно(Строка(Результат), 100)
	
КонецФункции

Функция Исполнить(Код, Режим) Экспорт
	
	ВыполнениеСРезультатом = (Режим = ИТКВ_Перечисления.РежимВыполненияКодаВыполнение());
	
	Результат = Неопределено;
	Result = Неопределено;
	
	ИсполняемыйКод = ПодготовкаКодаИсполнения(Код);
	
	// Начало замера времени выполнения --------------------------------------------------------------------------------- {
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		
		// BSLLS:ExecuteExternalCodeInCommonModule-off
		Выполнить(ИсполняемыйКод);
		// BSLLS:ExecuteExternalCodeInCommonModule-on
		РезультатВыполнения = Результат;
		
	Исключение
		
		ВремяВыполнения = Неопределено;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробнаяИнформацияОбОшибке = СобратьИнформациюОбОшибке(ИнформацияОбОшибке);
		
	КонецПопытки;
		
	// Конец замера { ---------------------------------------------------------------------------------------------------
	ВремяВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ОписаниеРезультата = Новый Структура;
	ОписаниеРезультата.Вставить("РежимВыполнения", Режим);
	ОписаниеРезультата.Вставить("ВремяВыполнения", ВремяВыполнения);
	ОписаниеРезультата.Вставить("ОшибкаПриВыполнении", ПодробнаяИнформацияОбОшибке);
	ОписаниеРезультата.Вставить("Результат", РезультатВыполнения);
	
	Возврат ОписаниеРезультата;
	
КонецФункции

Функция ЗначениеСтрока(Значение, ЗаключитьВКовычки = Истина) Экспорт
	
	Результат = СтрЗаменить(Значение, ИТКВ_Строки.СимволКовычки(), ИТКВ_Строки.СимволДвойныеКовычки()); // Заменяем ковычки в тексте двойными ковычками
	
	Если ИТКВ_Строки.МногострочнаяСтрока(Значение) Тогда
		
		Результат = СтрЗаменить(Результат, Символы.ПС, Символы.ПС + "|");
		
	КонецЕсли;
	
	Если ЗаключитьВКовычки Тогда
		
		Результат = СтрШаблон("""%1""", Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокуВЗначение(Строка) Экспорт
	
	СимволКовычки = ИТКВ_Строки.СимволКовычки();
	
	Результат = СтрЗаменить(Строка, ИТКВ_Строки.СимволДвойныеКовычки(), СимволКовычки);
	
	Если ИТКВ_Строки.МногострочнаяСтрока(Строка) Тогда
		
		Результат = СтрЗаменить(Результат, Символы.ПС + "|", Символы.ПС);
		
	КонецЕсли;
		
	Если СтрНачинаетсяС(Результат, СимволКовычки) Тогда
		Результат = Сред(Результат, 2);
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(Результат, СимволКовычки) Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеОшибки(Ошибка) Экспорт
	
	ОписаниеОшибки = Ошибка.ОписаниеОшибки;
	
	ЗаполненоИмяМодуля = ЗначениеЗаполнено(ОписаниеОшибки.ИмяМодуля);
	НомерСтроки = ИТКВ_Строки.ЧислоВСтроку(ОписаниеОшибки.НомерСтроки);
	
	ЧастиОшибки = Новый Массив;
	
	// Представление ошибки
	Если ЗаполненоИмяМодуля Тогда
		
		ЧастьОшибка = ОписаниеОшибки.Описание;
		
	Иначе
		
		ЧастьОшибка = СтрШаблон("{%1} %2", НомерСтроки, ОписаниеОшибки.Описание);
		
	КонецЕсли;
	
	ЧастиОшибки.Добавить(ЧастьОшибка);
	
	// Представление причины
	Если ЗначениеЗаполнено(ОписаниеОшибки.Причина) Тогда
		ЧастиОшибки.Добавить(ОписаниеОшибки.Причина);
	КонецЕсли;

	// Представление модуля
	Если ЗаполненоИмяМодуля Тогда
		
		ЧастьМодуль = СтрШаблон("%1(%2): %3", ОписаниеОшибки.ИмяМодуля, НомерСтроки, ОписаниеОшибки.ИсходнаяСтрока);
		ЧастиОшибки.Добавить(ЧастьМодуль);
			
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиОшибки, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовкаКодаИсполнения(Код)
	
	Результат = Код;
	
	Разделитель = Символы.ПС;
	
	ДобавлятьМетку = Ложь;
	ИмяМеткиВыхода = "~МеткаВКонце";
	
	// Заменим Возврат на Перейти
	СтрокиКода = СтрРазделить(Код, Разделитель);
	Для ИндексСтроки = 0 По СтрокиКода.ВГраница() Цикл
		
		СтрокаКода = СтрокиКода[ИндексСтроки];
		
		НомерСимвола = 1;
		ИТКВ_Строки.РазборПрочитатьНезначимые(СтрокаКода, НомерСимвола);
		Идентификатор = ИТКВ_Строки.РазборПрочитатьИдентификатор(СтрокаКода, НомерСимвола);
		
		Если ПустаяСтрока(Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Идентификатор) = "ВОЗВРАТ"
				ИЛИ ВРег(Идентификатор) = "RETURN" Тогда
				
			ДобавлятьМетку = Истина;
			
			ИТКВ_Строки.РазборПрочитатьНезначимые(СтрокаКода, НомерСимвола);
			СледующийСимвол = ИТКВ_Строки.РазборПрочитатьСимвол(СтрокаКода, НомерСимвола, Ложь);
			
			ВыражениеВозврата = ИТКВ_Строки.РазборПрочитатьДоСимвола(СтрокаКода, ";", НомерСимвола);
			
			НоваяСтрокаКода = "Перейти " + ИмяМеткиВыхода + ";";
			Если СледующийСимвол <> ";" Тогда
				НоваяСтрокаКода = "Результат = " + ВыражениеВозврата + ";" + НоваяСтрокаКода;
			КонецЕсли;
			
			СтрокиКода[ИндексСтроки] = НоваяСтрокаКода;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = СтрСоединить(СтрокиКода, Разделитель);
	
	// Добавление метки выхода
	Если ДобавлятьМетку Тогда
		
		Результат = Результат + "
		|" + ИмяМеткиВыхода + ":";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СобратьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = Новый Структура;
	
	ОписаниеОшибки = ПодробноеОписаниеОшибки(ИнформацияОбОшибке);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	// Подготовка стека вызовов
	СтекВызовов = Новый Массив;
	
	Если ИТКВ_ОбщийКлиентСервер.ПоддерживаетсяПлатформой("8.3.15") Тогда // С 15 платформы ПодробноеПредставлениеОшибки() возвращает стек вызовов
		
		ЗаполнитьСтекВызовов(СтекВызовов, ИнформацияОбОшибке);
			
	КонецЕсли;
	
	Результат.Вставить("СтекВызовов", СтекВызовов);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтекВызовов(СтекВызовов, ИнформацияОбОшибке)
	
	Если НЕ ЗначениеЗаполнено(ИнформацияОбОшибке.ИмяМодуля) Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкаПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	// Удалим ошибку в начале текста
	Если ИнформацияОбОшибке.Причина = Неопределено Тогда
		ТекстОшибки = ИнформацияОбОшибке.Описание;
	Иначе
		ТекстОшибки = ИнформацияОбОшибке.Причина.Описание;
	КонецЕсли;
	
	ОшибкаПодробно = ИТКВ_Строки.УдалитьПрефикс(ОшибкаПодробно, ТекстОшибки);
	ОшибкаПодробно = СокрЛП(ОшибкаПодробно);
	
	// Удалим строки вызова выполенения кода (вызовы из разширения)
	СтрокаПоиска = "{" + ИТКВ_ТуллкитКлиентСервер.Идентификатор();
	НомерСимвола = СтрНайти(ОшибкаПодробно, СтрокаПоиска);
	Если ЗначениеЗаполнено(НомерСимвола) Тогда
		ОшибкаПодробно = Лев(ОшибкаПодробно, НомерСимвола - 1);
	КонецЕсли;
	ОшибкаПодробно = СокрЛП(ОшибкаПодробно);
	
	// Обходим строки исключая последнию строку
	КоличествоСтрок = СтрЧислоСтрок(ОшибкаПодробно);
	Для НомерСтрокиСтекаВызовов = 1 По КоличествоСтрок - 1 Цикл
		
		// СтрокаСтекаВызовов = "{ОбщийМодуль.ОбщегоНазначения.Модуль(2776)}:	Возврат Ссылка.Метаданные().ПолноеИмя();"
		СтрокаСтекаВызовов = СтрПолучитьСтроку(ОшибкаПодробно, НомерСтрокиСтекаВызовов);
		
		НомерСимвола = 1;
		ИТКВ_Строки.РазборПропуститьНаборСимволов(СтрокаСтекаВызовов, "{", НомерСимвола);
		ИмяМодуля = ИТКВ_Строки.РазборПрочитатьДоСимвола(СтрокаСтекаВызовов, "(", НомерСимвола);
		
		ИТКВ_Строки.РазборПропуститьНаборСимволов(СтрокаСтекаВызовов, "(", НомерСимвола);
		НомерСтроки = ИТКВ_Строки.РазборПрочитатьЦелоеЧисло(СтрокаСтекаВызовов, НомерСимвола);
		ИТКВ_Строки.РазборПропуститьНаборСимволов(СтрокаСтекаВызовов, ")}:", НомерСимвола);
		
		ИсходнаяСтрока = ИТКВ_Строки.РазборПрочитатьДоСимвола(СтрокаСтекаВызовов, "", НомерСимвола);
		ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
		
		ОписаниеСтрокиСтекаВызовов = Новый Структура;
		ОписаниеСтрокиСтекаВызовов.Вставить("ИмяМодуля", ИмяМодуля);
		ОписаниеСтрокиСтекаВызовов.Вставить("НомерСтроки", НомерСтроки);
		ОписаниеСтрокиСтекаВызовов.Вставить("ИсходнаяСтрока", ИсходнаяСтрока);
		
		СтекВызовов.Добавить(ОписаниеСтрокиСтекаВызовов);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодробноеОписаниеОшибки(ИнформацияОбОшибке)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяМодуля", ИнформацияОбОшибке.ИмяМодуля);
	Результат.Вставить("НомерСтроки", ИнформацияОбОшибке.НомерСтроки);
	Результат.Вставить("ИсходнаяСтрока", ИнформацияОбОшибке.ИсходнаяСтрока);
	Результат.Вставить("Описание", ИнформацияОбОшибке.Описание);
	
	Причина = "";
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		Причина = ИнформацияОбОшибке.Причина.Описание;
	КонецЕсли;
	
	Результат.Вставить("Причина", Причина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

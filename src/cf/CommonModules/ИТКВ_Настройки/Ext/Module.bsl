#Область ПрограммныйИнтерфейс

Процедура ИнициализироватьФорму(Форма, ВидИнструмента = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	ИмяРеквизитаНастройкиОбщие = ИТКВ_НастройкиКлиентСервер.ИмяРеквизитаНастройкиОбщие();
	ИмяРеквизитаНастройки = ИТКВ_НастройкиКлиентСервер.ИмяРеквизитаНастройки();
	
	// Добавляем реквизиты
	ДобавляемыеРеквизиты = Новый Массив;
	
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ИмяРеквизитаНастройкиОбщие);
	
	Если ЗначениеЗаполнено(ВидИнструмента) Тогда
		
		ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ИмяРеквизитаНастройки);
		
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Загружаем настройки
	Форма[ИмяРеквизитаНастройкиОбщие] = Загрузить();
	
	Если ЗначениеЗаполнено(ВидИнструмента) Тогда
		
		Форма[ИмяРеквизитаНастройки] = Загрузить(ВидИнструмента);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Загрузить(ВидИнструмента = Неопределено) Экспорт
	
	КлючОбъекта = ИТКВ_НастройкиКлиентСервер.КлючОбъекта();
	КлючНастроек = ИТКВ_НастройкиКлиентСерверПовтИсп.КлючНастроек(ВидИнструмента);
	Результат = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Для Каждого ОписаниеНастройки Из ИТКВ_НастройкиКлиентСерверПовтИсп.Список(ВидИнструмента) Цикл
		
		Имя = ОписаниеНастройки.Ключ;
		
		Значение = Неопределено;
		СуществуетСвойство = Результат.Свойство(Имя, Значение);
		ЗначениеПоУмолчанию = (НЕ СуществуетСвойство ИЛИ Значение = Неопределено);
		Если ЗначениеПоУмолчанию Тогда
			Значение = ОписаниеНастройки.Значение;
		КонецЕсли;
		
		// Подготовка значения (преобразование)
		РасшифроватьЗначение(Имя, Значение);
		ПреобразованиеПеречисления(Имя, Значение, Истина);
		ПреобразованиеПрочие(Имя, Значение);
		
		Результат.Вставить(Имя, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура Сохранить(Настройки, ВидИнструмента = Неопределено) Экспорт
	
	Для Каждого ОписаниеНастройки Из Настройки Цикл
		
		Имя = ОписаниеНастройки.Ключ;
		Значение = ОписаниеНастройки.Значение;
		
		// Подготовка значения (преобразование)
		ЗашифроватьЗначение(Имя, Значение);
		ПреобразованиеПеречисления(Имя, Значение);
		
		Настройки.Вставить(Имя, Значение);
		
	КонецЦикла;
	
	ХранилищеСистемныхНастроек.Сохранить(ИТКВ_НастройкиКлиентСервер.КлючОбъекта(), ИТКВ_НастройкиКлиентСерверПовтИсп.КлючНастроек(ВидИнструмента), Настройки);
	
КонецПроцедуры

Функция ЗначениеОбщейНастройки(Форма, Имя) Экспорт
	
	Возврат ИТКВ_НастройкиКлиентСервер.ЗначениеОбщейНастройки(Форма, Имя);
	
КонецФункции

Функция ЗначениеНастройки(Форма, Имя) Экспорт
	
	Возврат ИТКВ_НастройкиКлиентСервер.ЗначениеНастройки(Форма, Имя);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПреобразованиеПеречисления(Имя, Значение, Обратное = Ложь)
	
	Если Имя = ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиРасшифровкаТаблицЗначений() Тогда
		
		Значение = ИТКВ_НастройкиКлиентСерверПовтИсп.ПреобразованиеПеречисленияРасшифровкаТаблицЗначений(Значение, Обратное);
		
	ИначеЕсли Имя = ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиКонструкторЗапросаТонкогоКлиента()
			ИЛИ Имя = ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиКонструкторЗапросаТолстогоКлиента() Тогда
			
		Значение = ИТКВ_НастройкиКлиентСерверПовтИсп.ПреобразованиеПеречисленияКонструкторЗапроса(Значение, Обратное);
		
	ИначеЕсли Имя = ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиКонструкторСКДТолстогоКлиента() Тогда
		
		Значение = ИТКВ_НастройкиКлиентСерверПовтИсп.ПреобразованиеПеречисленияКонструкторСКД(Значение, Обратное);
		
	ИначеЕсли Имя = ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиПолучениеПлана() Тогда
		
		Значение = ИТКВ_НастройкиКлиентСерверПовтИсп.ПреобразованиеПеречисленияПолучениеПлана(Значение, Обратное);
		
	ИначеЕсли Имя = ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиСохранятьДанныеПоУмолчаниюВ() Тогда
		
		Значение = ИТКВ_НастройкиКлиентСерверПовтИсп.ПреобразованиеПеречисленияТипХраненияДанных(Значение, Обратное);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьЗначение(Имя, Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		
		Для Каждого ЭлементСписка Из Значение Цикл
			
			ЗашифроватьЗначение(Имя, ЭлементСписка.Значение);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		
		Для Каждого ЭлементСтруктуры Из Значение Цикл
			
			ЗашифроватьЗначение(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	Иначе
		
		ЗашифроватьЗначениеПоля(Имя, Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьЗначение(Имя, Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		
		Для Каждого ЭлементСписка Из Значение Цикл
			
			РасшифроватьЗначение(Имя, ЭлементСписка.Значение);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		
		Для Каждого ЭлементСтруктуры Из Значение Цикл
			
			РасшифроватьЗначение(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЦикла;
		
	Иначе
		
		РасшифроватьЗначениеПоля(Имя, Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьЗначениеПоля(Имя, Значение)
	
	Если ШифруемоеПоле(Имя) Тогда
		Значение = ИТКВ_Строки.Зашифровать(Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьЗначениеПоля(Имя, Значение)
	
	Если ШифруемоеПоле(Имя) Тогда
		
		Значение = ИТКВ_Строки.Расшифровать(Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ШифруемоеПоле(Имя)
	
	Возврат (СтрНайти(Имя, "Пароль"));
	
КонецФункции

Процедура ПреобразованиеПрочие(Имя, Значение)
	
	Если Имя = "ПодключенияККластерам" Тогда
		
		Для Каждого ПодключениеККластеру Из Значение Цикл
			
			ОписаниеПодключения = ИТКВ_ПодключениеКСерверамКлиентСервер.ОписаниеПодключения();
			ЗаполнитьЗначенияСвойств(ОписаниеПодключения, ПодключениеККластеру.Значение);
			
			ПодключениеККластеру.Значение = ОписаниеПодключения;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


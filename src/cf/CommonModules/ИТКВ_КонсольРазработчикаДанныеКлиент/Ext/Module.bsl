#Область ПрограммныйИнтерфейс

// Вставляет структуру данных для строки
//
// Параметры:
//  Строка - ДанныеФормыЭлементДерева	- Данные строки по которым получается структура
//  Данные - Структура					- Устанавливаемые данные строки
//
Процедура Вставить(Строка, Данные) Экспорт
	
	Строка.Данные = Данные;
	
КонецПроцедуры

// Удаляет строки данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строки - Массив - Строки 
//
Процедура УдалитьСтроки(Форма, Строки) Экспорт
	
	ОчищаемыеАдресаВоВременноХранилище = Новый Массив;
	УдалитьСтрокиНаФорме(Форма, Строки, ОчищаемыеАдресаВоВременноХранилище);
	
	Если ЗначениеЗаполнено(ОчищаемыеАдресаВоВременноХранилище) Тогда
		ИТКВ_ВременноеХранилищеВызовСервера.Удалить(ОчищаемыеАдресаВоВременноХранилище);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет поле данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  Имя - Строка - Имя поля
//  Значение - Произвольный - Устанавливаемое значение
//  УстанавливатьМодифицированность - Булево - Признак установки модифицированности
//
Процедура ИзменитьПоле(Форма, Строка, Имя, Значение, УстанавливатьМодифицированность = Истина) Экспорт
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.Получить(Строка);

	Если Данные[Имя] <> Значение Тогда
		
		Данные.Вставить(Имя, Значение);
		
		Если УстанавливатьМодифицированность Тогда
			ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ДанныеМодифицированы(Форма);
		КонецЕсли;
		
		Если Форма.ТекущаяСтрока = Форма.ТекущийРезультат.АктуаленПоСтроке Тогда
			Форма.ТекущийРезультат.АктуаленПоСтроке = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Изменяет поля данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  ИзменяемыеПоля - Структура - Изменяемые поля
//  УстанавливатьМодифицированность - Булево - Признак установки модифицированности
//
Процедура ИзменитьПоля(Форма, Строка, ИзменяемыеПоля, УстанавливатьМодифицированность = Истина) Экспорт
	
	Для Каждого ИзменяемоеПоле Из ИзменяемыеПоля Цикл
		ИзменитьПоле(Форма, Строка, ИзменяемоеПоле.Ключ, ИзменяемоеПоле.Значение, УстанавливатьМодифицированность);
	КонецЦикла;
	
КонецПроцедуры

// Получает значение параметра
//
// Параметры:
//  Данные - Данные - Данные
//  Имя - Строка - Имя
//  ТипЗначения - ОписаниеТипов, Перечисление.ИТКВ_СложныйПараметрЗапроса - Тип значения
//
// Возвращаемое значение:
//   Произвольный - Значение параметра
//
Функция ЗначениеПараметраЗапроса(Данные, Имя, ТипЗначения) Экспорт
	
	Результат = Данные.ЗначенияПараметров[Имя];

	Если Результат = Неопределено Тогда
		
		Если ТипЗнч(ТипЗначения) = Тип("ОписаниеТипов") Тогда
			
			Результат = ТипЗначения.ПривестиЗначение(Результат);
			
		ИначеЕсли ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ТипПараметраТаблицаЗначений(ТипЗначения) Тогда
			
			Результат = ИТКВ_ЗапросКлиентСервер.ЗначениеСложногоПараметра(ИТКВ_Перечисления.СложныйПараметрЗапросаТаблицаЗначений(), "");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Изменяет поля данных
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  Имя - Строка - Имя параметра
//  Значение - Произвольный - Устанавливаемое значение параметра
//
Процедура ВставитьЗначениеПараметраЗапроса(Форма, Строка, Имя, Значение) Экспорт
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.Получить(Строка);
	Данные.ЗначенияПараметров.Вставить(Имя, Значение);
	ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ДанныеМодифицированы(Форма);
	
	Если Форма.ТекущаяСтрока = Форма.ТекущийРезультат.АктуаленПоСтроке Тогда
		Форма.ТекущийРезультат.АктуаленПоСтроке = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание внешнего источника
//
// Параметры:
//  Данные - Данные - Данные
//  UID - УникальныйИдентификатор - UID внешнего источника
//
// Возвращаемое значение:
//   Структура - Описание внешнего источника
//
Функция ВнешнийИсточник(Данные, UID) Экспорт
	
	Возврат Данные.ВнешниеИсточники.Получить(UID);

КонецФункции

// Вставляет внешний источник
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  UID - УникальныйИдентификатор - UID внешнего источника
//  Описание - Структура - Описание внешнего источника
//
Процедура ВставитьВнешнийИсточник(Форма, Строка, UID, Описание) Экспорт
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.Получить(Строка);
	Форма.Модифицированность = Истина;
	
	Данные.ВнешниеИсточники.Вставить(UID, Описание);

КонецПроцедуры

Процедура СкопироватьВнешнийИсточник(Форма, Строка, Имя, UID, UIDИсточника) Экспорт
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.Получить(Строка);
	ОписаниеИсточника = ИТКВ_КонсольРазработчикаДанныеКлиент.ВнешнийИсточник(Данные, UIDИсточника);
	Тип = ОписаниеИсточника.Тип;
	
	Описание = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.НовыйВнешнийИсточник();
	Описание.Имя = Имя;
	Описание.Тип = Тип;
	
	Если Тип = ИТКВ_Перечисления.ТипЗначенияВнешнегоИсточникаВыражение() Тогда
		
		Описание.Значение = ОписаниеИсточника.Значение;
		
	ИначеЕсли Тип = ИТКВ_Перечисления.ТипЗначенияВнешнегоИсточникаЗначение() Тогда
		
		Описание.Значение = ИТКВ_ОбщийВызовСервера.КопияТаблицыЗначений(ОписаниеИсточника.Значение, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	ВставитьВнешнийИсточник(Форма, Строка, UID, Описание);

КонецПроцедуры

// Удаляет внешний источник
//
// Параметры:
//  Форма - Форма - Форма
//  Строка - Строка - Строка 
//  UID - УникальныйИдентификатор - UID внешнего источника
//
Процедура УдалитьВнешнийИсточник(Форма, Строка, UID) Экспорт
	
	Данные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.Получить(Строка);
	Форма.Модифицированность = Истина;

	Данные.ВнешниеИсточники.Удалить(UID);

КонецПроцедуры

// Возвращает временные таблицы
//
// Параметры:
//  Данные - Данные - Данные
//
// Возвращаемое значение:
//   Соответствие - Данные временных таблицы
//
Функция ВременныеТаблицы(Данные) Экспорт
	
	Возврат Данные.ВременныеТаблицы;
	
КонецФункции

// Устанавливает описание настроек вывода таблицы
//
// Параметры:
//  Форма - Форма - Форма
//  Данные - Данные - Данные
//  Имя - Строка - Имя таблицы
//  Описание - Структура - Описание настроек вывода таблицы
//
Процедура УстановитьОписаниеНастройкиВыводаТаблицы(Форма, Данные, Имя, Описание) Экспорт
	
	Форма.Модифицированность = Истина;
	Данные.НастройкиВыводаТаблиц.Вставить(Имя, Описание);
	
КонецПроцедуры

// Возвращает родителя строки (если нет родителя - корень) возвращает ДеревоДанных 
//
// Параметры:
//  Форма - Форма - Форма
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка для которой получаем родителя
//
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева, ДанныеФормыДерева - Родитель строки или ДеревоДанных если корень
//
Функция ПолучитьРодителяСтроки(Форма, СтрокаДерева) Экспорт
	
	РодительСтроки = СтрокаДерева.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда // Родителя нет (корень) добавляем в дерево (корень)
		РодительСтроки = Форма.ДеревоДанных;
	КонецЕсли;
	
	Возврат РодительСтроки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьСтрокиНаФорме(Форма, Строки, ОчищаемыеАдресаВоВременноХранилище)
	
	Для Каждого УдаляемаяСтрока Из Строки Цикл
		
		ДанныеСтроки = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.Получить(УдаляемаяСтрока);
		
		// Собираем вложенные строки и удаляем
		УдаляемыеСтроки = Новый Массив;
		Для Каждого ВложеннаяСтрока Из УдаляемаяСтрока.ПолучитьЭлементы() Цикл
			УдаляемыеСтроки.Добавить(ВложеннаяСтрока);
		КонецЦикла;
		
		УдалитьСтрокиНаФорме(Форма, УдаляемыеСтроки, ОчищаемыеАдресаВоВременноХранилище);
		
		// Сбрасываем выделение строк
		Если Форма.ТекущаяСтрока = УдаляемаяСтрока Тогда
			
			Форма.ТекущаяСтрока = Неопределено;
			Форма.Элементы.ДеревоДанных.ТекущаяСтрока = Неопределено;
			
		КонецЕсли;
		
		// Собираем адреса временных хранилищ и удаляем
		Если УдаляемаяСтрока.Тип = ИТКВ_Перечисления.ЭлементДанныхЗапрос() Тогда
			
			Для Каждого ПараметрЗапроса Из ДанныеСтроки.Параметры Цикл
				
				Если ПараметрЗапроса.Значение = ИТКВ_Перечисления.СложныйПараметрЗапросаТаблицаЗначений() Тогда
					ЗначениеПараметра = ДанныеСтроки.ЗначенияПараметров.Получить(ПараметрЗапроса.Ключ);
					Если ЗначениеПараметра <> Неопределено
						И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
						ОчищаемыеАдресаВоВременноХранилище.Добавить(ЗначениеПараметра.Значение);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ЭтоТипСтрокиСИспользованиемВнешнихИсточников(УдаляемаяСтрока.Тип) Тогда

			Для Каждого ВнешнийИсточник Из ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ВнешниеИсточники(ДанныеСтроки) Цикл
				
				ОписаниеВнешнегоИсточника = ВнешнийИсточник.Значение;
				
				Если ОписаниеВнешнегоИсточника.Тип = ИТКВ_Перечисления.ТипЗначенияВнешнегоИсточникаЗначение()
						И ЗначениеЗаполнено(ОписаниеВнешнегоИсточника.Значение) Тогда
					ОчищаемыеАдресаВоВременноХранилище.Добавить(ОписаниеВнешнегоИсточника.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Удаляем строку
		Родитель = ПолучитьРодителяСтроки(Форма, УдаляемаяСтрока);
		Родитель.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

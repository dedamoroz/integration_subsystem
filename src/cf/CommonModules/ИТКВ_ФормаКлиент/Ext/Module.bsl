#Область ПрограммныйИнтерфейс

// Обработка очистки значения в форме
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ОчисткаЗначенияСтрокиВФорме(Элемент, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.КнопкаОчистки = Ложь Тогда
		
		Элемент.ВыбиратьТип = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоВыбораЗначенияВФорме(Форма, Имя, Заголовок, СтандартнаяОбработка, ОповещениеОЗавершении = Неопределено, ВыбиратьТип = Неопределено, Исключаемые = "ПростыеТипы,Перечисления") Экспорт
	
	Элемент = Форма.Элементы[Имя];
	
	Если ВыбиратьТип = Неопределено Тогда
		ВыбиратьТип = Элемент.ВыбиратьТип;
	КонецЕсли;
	
	Если ВыбиратьТип Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Реквизит", Имя);
		ДополнительныеПараметры.Вставить("Оповещение", ОповещениеОЗавершении);
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыборТипаЗавершен", ЭтотОбъект, ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Исключаемые", Исключаемые);
		ИТКВ_ФормаКлиент.ОткрытьРедактированиеТипаЗначения(Элемент, Заголовок, ИТКВ_Перечисления.РежимРедактированияТипаЗначенияВыборТипа(),
																Элемент.ДоступныеТипы, ОписаниеОповещенияЗавершение, СтандартнаяОбработка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборТипаЗавершен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Реквизит = ДополнительныеПараметры.Реквизит;
	Элемент = Форма.Элементы[Реквизит];

	ИТКВ_ФормаКлиент.ОбработкаЗавершенВводЗначенияВФорме(Элемент, Результат, ДополнительныеПараметры, Форма[Реквизит], Результат);
	
	Если ДополнительныеПараметры.Оповещение <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, Результат);
		
	КонецЕсли;

КонецПроцедуры

// Обработка выбора значения в форме
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Элемент - Элемент - Элемент
//	Значение - Произвольный - Значение параметра
//	ОписаниеТипов - ОписаниеТипов - Описание типов параметра
//	СтандартнаяОбработка - Булево - Стандартная обработка
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения (завершение)
//	ДополнятьДату - Булево - Дополнять тип дата границей и моментом времени
//
Процедура ВводЗначенияСтрокиВФорме(Заголовок, Элемент, Значение, ОписаниеТипов, СтандартнаяОбработка, ОписаниеОповещенияЗавершение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеОповещенияЗавершение <> Неопределено Тогда
		
		ОписаниеОповещенияЗавершение.ДополнительныеПараметры.Вставить("Заголовок", Заголовок);
		ОписаниеОповещенияЗавершение.ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Отбор = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Отбор", Неопределено);
	
	ПроверяемоеЗначение = ПроверяемоеЗначениеПараметра(Значение, ОписаниеТипов);
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Тип") Тогда
		
		ОткрытьРедактированиеТипаЗначения(Элемент, Заголовок, ИТКВ_Перечисления.РежимРедактированияТипаЗначенияРедактированиеТипа(),
											Значение, ОписаниеОповещенияЗавершение, СтандартнаяОбработка, ДополнительныеПараметры);

	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("УникальныйИдентификатор") Тогда
		
		ОткрытьРедактированиеУникальногоИдентификатора(Заголовок, Значение, Элемент, ОписаниеОповещенияЗавершение);
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Строка") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Заголовок", Заголовок);
		ДополнительныеПараметры.Вставить("Длина", ОписаниеТипов.КвалификаторыСтроки.Длина);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОписаниеОповещенияЗавершение);
		ОткрытьРедактированиеМногострочногоТекста(Элемент, Элемент.ТекстРедактирования, , ДополнительныеПараметры);
		
	ИначеЕсли Элемент.ВыбиратьТип Тогда
		
		ОткрытьРедактированиеТипаЗначения(Элемент, Заголовок, ИТКВ_Перечисления.РежимРедактированияТипаЗначенияВыборТипа(),
											ОписаниеТипов, ОписаниеОповещенияЗавершение, СтандартнаяОбработка, ДополнительныеПараметры);
		
	ИначеЕсли ЗначениеЗаполнено(Отбор) Тогда
		
		Если ИТКВ_ТипыКлиентСервер.ЕстьСсылочныеТипы(ОписаниеТипов) Тогда

			СтандартнаяОбработка = Ложь;
			ОткрытьФормуВыбора(ОписаниеТипов, Элемент, , Отбор);
			
		КонецЕсли;
											
	КонецЕсли;

КонецПроцедуры

// Обработка активизации строки значения в форме
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	Значение - Произвольный - Значение параметра
//	ОписаниеТипов - ОписаниеТипов - Описание типов параметра
//
Процедура АктивизацияЗначенияВФорме(Элемент, Значение, Знач ДоступныеТипы = Неопределено) Экспорт
	
	Если ДоступныеТипы = Неопределено
			ИЛИ ТипЗнч(ДоступныеТипы) <> Тип("ОписаниеТипов") Тогда
		
		ДоступныеТипы = Элемент.ДоступныеТипы;

	КонецЕсли;
	Элемент.ДоступныеТипы = ДоступныеТипы;
	
	СписокВыбора = Элемент.СписокВыбора;
	ОчисткаСпискаВыбораЗначенияВФорме(СписокВыбора);
	
	РедактированиеТекста = Ложь;
	ФорматРедактирования = "";
	КнопкаВыбора = Истина;
	КнопкаОчистки = Истина;
	КнопкаВыпадающегоСписка = ЗначениеЗаполнено(СписокВыбора);
	ОграничениеТипа = Ложь;
	
	ЗначениеСписок = (ТипЗнч(Значение) = Тип("СписокЗначений"));
	СложноеЗначение = (ТипЗнч(Значение) = Тип("Структура"));
	СоставнойТип = (ДоступныеТипы.Типы().Количество() <> 1);
	
	ПроверяемоеЗначение = ПроверяемоеЗначениеПараметра(Значение, ДоступныеТипы);
	
	Если СоставнойТип Тогда
		
		ВыбиратьТип = (ПроверяемоеЗначение = Неопределено) И НЕ ЗначениеСписок;
		
	Иначе
		
		ВыбиратьТип = Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("МоментВремени")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("Граница") Тогда
		
		ОграничениеТипа = Истина;
		ДоступныеТипы = ИТКВ_ТипыКлиентСервер.ОписаниеСтрока();
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Тип") Тогда
		
		КнопкаОчистки = Ложь;
		
		ОграничениеТипа = Истина;
		ДоступныеТипы = ИТКВ_ТипыКлиентСервер.ОписаниеСтрока();
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("ОписаниеТипов") Тогда
		
		КнопкаВыпадающегоСписка = Ложь;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("УникальныйИдентификатор") Тогда
		
		КнопкаОчистки = Истина;
		ОграничениеТипа = Истина;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Булево")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("ВидДвиженияНакопления")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("ВидДвиженияБухгалтерии")
			ИЛИ ТипЗнч(ПроверяемоеЗначение) = Тип("ВидСчета") Тогда
		
		КнопкаОчистки = Ложь;
		КнопкаВыбора = Ложь;
		КнопкаВыпадающегоСписка = Истина;
		ОграничениеТипа = Истина;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Строка") Тогда
		
		РедактированиеТекста = Истина;
		ОграничениеТипа = Истина;
		КнопкаВыбора = Истина;
		КнопкаВыпадающегоСписка = Ложь;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Число") Тогда
		
		РедактированиеТекста = Истина;
		ОграничениеТипа = Истина;
		КнопкаВыбора = Ложь;
		КнопкаВыпадающегоСписка = Ложь;
		
	ИначеЕсли ТипЗнч(ПроверяемоеЗначение) = Тип("Дата") Тогда
		
		ОграничениеТипа = Истина;
		РедактированиеТекста = Истина;
		ФорматРедактирования = ИТКВ_ФормаКлиентСервер.ФорматРедактированияДаты(ДоступныеТипы);
		КнопкаВыпадающегоСписка = Истина;
		
		Если Не ЗначениеСписок Тогда
			
			ЗначениеЭлемента = Новый Структура("Тип", "ТекущаяДата");
			
			Шаблон = НСтр("ru = 'Текущая дата, время (%1 ..)'; en = 'Current date, time (%1 ..)'");
			ПредставлениеЭлемента = СтрШаблон(Шаблон, Формат(ИТКВ_ОбщийВызовСервера.ТекущаяДатаСервера(), "ДЛФ=D"));
			
			СписокВыбора.Добавить(ЗначениеЭлемента, ПредставлениеЭлемента);
			
		КонецЕсли;
		
	ИначеЕсли СложноеЗначение Тогда
		
		КнопкаОчистки = Ложь;
		
	Иначе
		
		ОграничениеТипа = Истина;
		РедактированиеТекста = Истина;
		КнопкаВыпадающегоСписка = НЕ ВыбиратьТип
									ИЛИ ЗначениеЗаполнено(СписокВыбора);
		
	КонецЕсли;
	
	Если ВыбиратьТип И ПроверяемоеЗначение = Неопределено Тогда
		
		КнопкаОчистки = Ложь;
		
	Иначе
		
		КнопкаОчистки = КнопкаОчистки ИЛИ СоставнойТип;
		
	КонецЕсли;
		
	Элемент.КнопкаОчистки = КнопкаОчистки;
	Элемент.КнопкаВыбора = КнопкаВыбора;
	Элемент.КнопкаВыпадающегоСписка = КнопкаВыпадающегоСписка;
	Элемент.РедактированиеТекста = РедактированиеТекста;
	Элемент.ФорматРедактирования = ФорматРедактирования;
	Элемент.ВыбиратьТип = ВыбиратьТип;
	
	Если ВыбиратьТип Тогда
		
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.ИТКВ_ТипТип;
		
	Иначе
		
		Элемент.КартинкаКнопкиВыбора = Новый Картинка;
		
	КонецЕсли;
	
	Если ОграничениеТипа Тогда
		
		Элемент.ОграничениеТипа = ДоступныеТипы;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выбора значения в форме
//
// Параметры:
//	Элемент - ЭлементФормы - Элемент формы
//	ВыбранноеЗначение - Произвольный - Выбранное значение
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ОбработкаВыбораЗначенияВФорме(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ТипОсобогоЗначения = ВыбранноеЗначение.Тип;
		
		Если ТипОсобогоЗначения = "ТекущаяДата" Тогда
			ВыбранноеЗначение = ИТКВ_ОбщийВызовСервера.ТекущаяДатаСервера();
		КонецЕсли;
			
		Если ТипОсобогоЗначения = "ОсобаяСсылка" Тогда
			ВыбранноеЗначение = ВыбранноеЗначение.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка автоподбора значения в форме
//
// Параметры:
//	Текст - Строка - Текст
//	ТипЗначения - ОписаниеТипов, Строка - Тип значения параметра
//	ДанныеВыбора - Неопределено, СписокЗначений - ДанныеВыбора
//	СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура АвтоПодборЗначенияВФорме(Текст, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ИТКВ_Строки.ЭтоUID(Текст)
			ИЛИ ИТКВ_Строки.ЭтоПредставлениеБитаяСсылка(Текст)
			ИЛИ ИТКВ_Строки.ЭтоНавигационнаяСсылка(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИТКВ_ФормаВызовСервера.АвтоПодборЗначения(Текст, Элемент.ДоступныеТипы, Элемент.ОграничениеТипа, ДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования Уникального идентификатора
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Значение - УникальныйИдентификатор - Уникальный идентификатор
//	Владелец - Форма/Элемент - Владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура ОткрытьРедактированиеУникальногоИдентификатора(Заголовок, Значение, Владелец, ОписаниеОповещенияЗавершение) Экспорт
	
	Параметры = Новый Структура("Заголовок, Значение", Заголовок, Значение);
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеУникальногоИдентификатора", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьРедактированиеМногострочногоТекста(Владелец, Текст, Редактируется = Истина, ДополнительныеПараметры = Неопределено, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Заголовок = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Заголовок");
	Длина = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Длина", 0);
	ОповещениеЗавершения = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ОповещениеЗавершения");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	ПараметрыФормы.Вставить("Редактируется", Редактируется);
	ПараметрыФормы.Вставить("Значение", Текст);
	ПараметрыФормы.Вставить("Длина", Длина);

	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеМногострочногоТекста", ПараметрыФормы, Владелец, , , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования типа значения
//
// Параметры:
//	Владелец - Форма/Элемент - Владелец
//	Заголовок - Строка - Заголовок
//	РежимРедактирования - Перечисление.ИТКВ_РежимРедактированияТипаЗначения - Режим редактирования типа значения
//	Значение - Произвольный/ОписаниеТипов - Значение
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	СтандарнаяОбработка - Булево - Устанавливается в ложь, если было передано
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//	 *ЗакрыватьПриВыборе - Булево - Закрывать при выборе
//	 *Исключаемые - Строка - Исключаемые типы через запятую
//	 *ДополнятьДату - Булево - Добавлять тип дата границей и моментом времени
//	 *Системные - Булево - Расширенный список типов (как в конфигураторе)
//
Процедура ОткрытьРедактированиеТипаЗначения(Владелец, Заголовок, РежимРедактирования, Значение,
											ОписаниеОповещенияЗавершение, СтандартнаяОбработка = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("Значение", Значение);
	Параметры.Вставить("Режим", РежимРедактирования);
	Параметры.Вставить("ЗакрыватьПриВыборе", ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ЗакрыватьПриВыборе", Истина));
	Параметры.Вставить("Исключаемые", ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Исключаемые", ""));
	Параметры.Вставить("ДополнятьДату", ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ДополнятьДату", Ложь));
	Параметры.Вставить("Системные", ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Системные", Ложь));
	
	ВыборТипа = (РежимРедактирования = ИТКВ_Перечисления.РежимРедактированияТипаЗначенияВыборТипа());
	ОписаниеОповещенияЗавершение.ДополнительныеПараметры.Вставить("ВыборТипа", ВыборТипа);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеТипаЗначения", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открыть диалог выбора настроек данных
//
// Параметры:
//	Режим - РежимДиалогаВыбораНастроек - Режим диалога
//	Владелец - Форма - Форма владелец
//	РабочиеДанные - РабочиеДанные - Текущие рабочие данные обработки
//	ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии
//
Процедура ОткрытьДиалогВыбораНастроекДанных(Режим, Владелец, РабочиеДанные, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", Режим);
	
	Если РабочиеДанные.Тип = ИТКВ_Перечисления.ТипХраненияДанныхНастройка() Тогда
		ПараметрыФормы.Вставить("РабочиеДанныеИмя", РабочиеДанные.Имя);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИТКВ_КонсольРазработчика.Форма.ДиалогВыбораНастроек", ПараметрыФормы, Владелец, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает таблицу значений в отдельной форме
//
// Параметры:
//	Адрес - Строка - Адрес значения
//	ФормаВладелец - Форма - Форма владелец
//	Редактирование - Булево - Возможность редактирования
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//		* ДополнениеЗаголовка - Строка - Дополнение заголовка
//		* НастройкаИндексацииКолонок - Булево - Настраивать индексацию колонок
//		* ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - Описание оповещения о закрытии
//		* Источник - Строка - Источник для параметра "&Таблица", для внешнего источника "Таблица"
//
Процедура ОткрытьТаблицуЗначений(Адрес, ФормаВладелец, Редактирование = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес", Адрес);
	ПараметрыФормы.Вставить("Редактирование", Редактирование);
	
	ОписаниеОповещенияОЗакрытии = Неопределено;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		Если ДополнительныеПараметры.Свойство("ДополнениеЗаголовка") Тогда
			ПараметрыФормы.Вставить("ДополнениеЗаголовка", ДополнительныеПараметры.ДополнениеЗаголовка);
		КонецЕсли;
		
		ДобавляемыеКолонки = Неопределено;
		ДополнительныеПараметры.Свойство("ДобавляемыеКолонки", ДобавляемыеКолонки);
		Если ЗначениеЗаполнено(ДобавляемыеКолонки) Тогда
			ПараметрыФормы.Вставить("ДобавляемыеКолонки", ДополнительныеПараметры.ДобавляемыеКолонки);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("НастройкаИндексацииКолонок") Тогда
			ПараметрыФормы.Вставить("НастройкаИндексацииКолонок", ДополнительныеПараметры.НастройкаИндексацииКолонок);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОписаниеОповещенияОЗакрытии") Тогда
			ОписаниеОповещенияОЗакрытии = ДополнительныеПараметры.ОписаниеОповещенияОЗакрытии
		КонецЕсли;
		
		Источник = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Источник", НСтр("ru = 'Таблица'; en = 'Table'"));
		ПараметрыФормы.Вставить("Источник", Источник);
		
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеТаблицыЗначений", ПараметрыФормы, ФормаВладелец, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования списка значений
//
// Параметры:
//	Владелец - Форма - Форма владелец
//	Заголовок - Строка - Заголовок
//	Значение - СписокЗначений - Значение
//	ОписаниеТипов - ОписаниеТипов - ОписаниеТипов
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	СтандартнаяОбработка - Переменная - СтандартнаяОбработка
//
Процедура ОткрытьСписокЗначений(Владелец, Вариант, Значение, ТипЗначения, ОписаниеОповещенияЗавершение, СтандартнаяОбработка = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Вариант", Вариант);
	Параметры.Вставить("ТипЗначения", ТипЗначения);
	Параметры.Вставить("Значение", Значение);
	
	Заголовок = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Заголовок");
	Параметры.Вставить("Заголовок", Заголовок);
	
	ДополнениеЗаголовка = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ДополнениеЗаголовка");
	Параметры.Вставить("ДополнениеЗаголовка", ДополнениеЗаголовка);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеСпискаЗначений", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьРедактированиеПараметровРедактирования(Владелец, Значение, ДоступныеПоля, ОписаниеОповещенияЗавершение, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Значение", Значение);
	Параметры.Вставить("ДоступныеПоля", ДоступныеПоля);
	
	ОткрытьФорму("Обработка.ИТКВ_КонструкторСКД.Форма.РедактированиеПараметровРедактирования", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования Момента времени
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Значение - МоментВремени - Значение
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура ОткрытьРедактированиеМоментаВремени(Владелец, Значение, СтандартнаяОбработка, ОписаниеОповещенияЗавершение, Заголовок = "") Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = Новый Структура("Заголовок, Значение", Заголовок, Значение);
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеМоментаВремени", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования Границы
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Значение - Граница - Значение
//	Владелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура ОткрытьРедактированиеГраницы(Заголовок, Значение, Владелец, ОписаниеОповещенияЗавершение) Экспорт
	
	Параметры = Новый Структура("Заголовок, Значение", Заголовок, Значение);
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеГраницы", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования идентификатора
//
// Параметры:
//	Заголовок - Строка - Заголовок
//	Режим - Перечисление.ИТКВ_РежимРедактированияИдентификатора - Режим редактирования
//	Владелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//	НачальноеЗначение - Строка - Начальное значение идентификатора
//
Процедура ОткрытьРедактированиеИдентификатора(Заголовок, Режим, Владелец, ОписаниеОповещенияЗавершение, НачальноеЗначение = "", ЗанятыеИдентификаторы = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("Режим", Режим);
	Параметры.Вставить("НачальноеЗначение", НачальноеЗначение);
	Параметры.Вставить("ЗанятыеИдентификаторы", ЗанятыеИдентификаторы);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеИдентификатора", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму вставки ссылки на объект БД
//
// Параметры:
//	ФормаВладелец - Форма - Форма владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//	ВыделенныйТекст - Строка - Выделенный текст
//
Процедура ОткрытьВставкуСсылкиНаОбъектБД(ФормаВладелец, ОписаниеОповещенияЗавершение, Текст = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Текст", Текст);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_ВставкаСсылкиНаОбъектБД", ПараметрыФормы, ФормаВладелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму расшифровки данных строки
//
// Параметры:
//	Данные - Структура - Данные строки
//	АдресРезультатов - Строка - Адрес результатов обработки во временном хранилище
//	НомерСтроки - Число - Номер строки
//	ФормаВладелец - Форма - Форма владелец
//	ОбработкаЗавершения - Булево - Обработка завершения
//	АктивнаяСтраница - Строка - Идентификатор активной страницы (при запуске)
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура ОткрытьРасшифровкуДанныхСтроки(ФормаВладелец, АдресРезультатов, Данные, НомерСтроки, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Данные) Тогда
		ПараметрыФормы.Вставить("Данные", Данные);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресРезультатов", АдресРезультатов);
	ПараметрыФормы.Вставить("НомерСтроки", НомерСтроки);

	ОткрытьФорму("Обработка.ИТКВ_КонсольРазработчика.Форма.РасшифровкаДанныхСтроки", ПараметрыФормы, ФормаВладелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму редактирования колонки таблицы значений
//
// Параметры:
//	Режим - ИТКВ_РежимРедактированияКолонкиТаблицыЗначений - Режим редактирования
//	Идентификатор - Строка - Идентификатор
//	ОписаниеТипов - ОписаниеТипов - Описание типов
//	Индексировать - Булево - Индексировать
//	ЗанятыеИдентификаторы - Массив - Занятые идентификаторы
//	Владелец - Форма/Элемент - Владелец
//	ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении
//
Процедура ОткрытьРедактированиеКолонкиТаблицыЗначений(Режим, Идентификатор, ОписаниеТипов, Индексировать, ЗанятыеИдентификаторы, Владелец, ОписаниеОповещенияЗавершение) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Режим", Режим);
	Параметры.Вставить("Идентификатор", Идентификатор);
	Параметры.Вставить("ОписаниеТипов", ОписаниеТипов);
	Параметры.Вставить("Индексировать", Индексировать);
	Параметры.Вставить("ЗанятыеИдентификаторы", ЗанятыеИдентификаторы);

	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеКолонкиТаблицыЗначений", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьЗаполнениеКолонкиТаблицыЗначений(Владелец, Значение, Имя, ДопустимыеТипы, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Значение", Значение);
	ПараметрыФормы.Вставить("Имя", Имя);
	ПараметрыФормы.Вставить("ДопустимыеТипы", ДопустимыеТипы);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_ЗаполнениеКолонкиТаблицыЗначений", ПараметрыФормы, Владелец, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьВводНомераСтроки(Владелец, МаксимальноеЗначение, НачальноеЗначение, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МаксимальноеЗначение", МаксимальноеЗначение);
	ПараметрыФормы.Вставить("НачальноеЗначение", НачальноеЗначение);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_ВводНомераСтроки", ПараметрыФормы, Владелец, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьЖурналРегистрации(Параметры = Неопределено) Экспорт
	
	ПолноеИмяФормы = ИТКВ_БСПВызовСервера.ПолноеИмяФормыСтандартнойОбработки("ЖурналРегистрации");
	ОткрытьФорму(ПолноеИмяФормы, Параметры);
	
КонецПроцедуры

Процедура ОткрытьЖурналРегистрацииПоТекущемуПользователю() Экспорт
	
	Параметры = Новый Структура;
	
	ИмяТекущегоПользователяИБ = ИТКВ_ОбщийВызовСервера.ИмяТекущегоПользователяИБ();
	Если ЗначениеЗаполнено(ИмяТекущегоПользователяИБ) Тогда
		
		Параметры.Вставить("Пользователь", ИмяТекущегоПользователяИБ);
		
	КонецЕсли;
	
	ОткрытьЖурналРегистрации(Параметры);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбора(Ссылка, Владелец, ЗакрыватьПриВыборе = Истина, Отбор = Неопределено) Экспорт
	
	Имя = ИТКВ_ФормаВызовСервера.ПолноеИмяФормыВыбораОбъекта(Ссылка, "ФормаВыбора");
	
	Если ЗначениеЗаполнено(Имя) Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("РежимВыбора", Истина);
		Параметры.Вставить("ЗакрыватьПриВыборе", ЗакрыватьПриВыборе);
		Параметры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		Если ЗначениеЗаполнено(Отбор) Тогда
			Параметры.Вставить("Отбор", Отбор);
		КонецЕсли;
		
		ОткрытьФорму(Имя, Параметры, Владелец, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияПодключенияККластеру(Владелец, ОписаниеОповещения, Добавление = Ложь, ОписаниеПодключения = Неопределено) Экспорт
	
	Если ОписаниеПодключения = Неопределено Тогда
		ОписаниеПодключения = ИТКВ_ПодключениеКСерверамКлиентСервер.ОписаниеПодключения();
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеПодключения", ОписаниеПодключения);
	Параметры.Вставить("Добавление", Добавление);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеПодключенияККластеру", Параметры, Владелец, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьКонструкторСхемыКомпоновкиДанных(Форма, XMLТекст) Экспорт
	
	ИмяНастройкиКонструкторСКДТолстогоКлиента = ИТКВ_НастройкиКлиентСерверПовтИсп.ИмяНастройкиКонструкторСКДТолстогоКлиента();
	
	// Определени типа конструктора
	ТипКонструктора = ИТКВ_НастройкиКлиент.ЗначениеОбщейНастройки(Форма, ИмяНастройкиКонструкторСКДТолстогоКлиента);
	Если ИТКВ_ТуллкитКлиентСервер.ОграниченнаяВерсия()
			И ТипКонструктора = ИТКВ_Перечисления.ТипКонструктораСКДТонкий() Тогда
			
		ТипКонструктора = ИТКВ_Перечисления.ТипКонструктораСКДТолстый();
		
	КонецЕсли;
	
	// Запуск конструктора
	Если ТипКонструктора = ИТКВ_Перечисления.ТипКонструктораСКДТолстый() Тогда
		
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
			
			Конструктор = Новый КонструкторСхемыКомпоновкиДанных(ИТКВ_СКДВызовСервера.СхемаКомпоновкиДанных(XMLТекст));
			Конструктор.Редактировать(Форма);
			
		#Иначе
			
			ПоказатьПредупреждение( , НСтр("ru = 'Запуск толстого конструктора схемы компоновки данных возможен только в толстом клиенте';
											|en = 'Running the fat data composition schema constructor is only possible in the thick client'")
									, , ИТКВ_КонсольРазработчикаКлиентСервер.Представление());
		#КонецЕсли
		
	Иначе
		
		ОткрытьТонкийКонструкторСхемыКомпоновкиДанных(Форма, XMLТекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьТонкийКонструкторСхемыКомпоновкиДанных(Форма, XMLТекст) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("XMLТекст", XMLТекст);
		
	ОткрытьФорму("Обработка.ИТКВ_КонструкторСКД.Форма", Параметры, Форма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьФормуЭкспортВ(Владелец, ОписаниеОповещения) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_ЭкспортВ", , Владелец, , , ,	ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьКонструкторСтрокНаРазныхЯзыках(Владелец, ОписаниеОповещенияЗавершение, НачальноеЗначение = "") Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("НачальноеЗначение", НачальноеЗначение);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_КонструкторСтрокНаРазныхЯзыках", Параметры, Владелец, , , , ОписаниеОповещенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьСтекВызовов(Владелец, СтекВызовов) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтекВызовов", СтекВызовов);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_СтекВызовов", ПараметрыФормы, Владелец, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выгрузить колонку коллекции
//
// Параметры:
//	Коллекция - КоллекцияФормы - Коллекция формы
//	Имя - Строка - Имя колонки
//	ИмяИсключение - Строка - Имя исключение
//
// Возвращаемое значение:
//	Массив - Массив значений колонки
//
Функция ВыгрузитьКолонкуКоллекции(Коллекция, Имя, ИмяИсключение = "") Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Строка Из Коллекция Цикл
		
		Если ИмяИсключение <> Строка[Имя] Тогда
			Результат.Добавить(Строка[Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Открывает диалог вопрос с возможностью ставить "Больше не показывать"
//
// Параметры:
//	ОписаниеОповещенияОЗавершении - ОписаниеОповещения - Описание оповещения при завершении
//	Текст - Строка - Текст вопроса
//	Кнопки - СписокЗначений - Кнопки вопроса
//	КнопкаПоУмолчанию - Произвольный - Значение кнопки по умолчанию
//	Заголовок - Строка - Заголовок окна вопроса
//	Владелец - Форма - Форма владелец
//	ДополнительныеПараметры - Структура - Дополнительные параметры
//		* ИмяНастройкиБольшеНеПоказывать - Строка - Имя настройки для "Больше не показывать"
//		* БольшеНеПоказывать - Булево - Больше не показывать данный вопрос
//
Процедура ЗадатьВопрос(ОписаниеОповещенияОЗавершении, Текст, Кнопки, КнопкаПоУмолчанию, Заголовок, Владелец, Идентификатор = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		ИмяНастройки = ИТКВ_ОбщийКлиентСервер.ИдентификаторНастройкиБольшеНеПоказыватьВопрос(Идентификатор);
		БольшеНеПоказывать = ИТКВ_НастройкиКлиент.ЗначениеНастройки(Владелец, ИмяНастройки);
		
	Иначе
		
		БольшеНеПоказывать = Ложь;
		
	КонецЕсли;
	
	Если БольшеНеПоказывать Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КнопкаПоУмолчанию);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Текст", Текст);
		ПараметрыФормы.Вставить("Заголовок", Заголовок);
		ПараметрыФормы.Вставить("Кнопки", Кнопки);
		ПараметрыФормы.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
		ПараметрыФормы.Вставить("Идентификатор", Идентификатор);
		
		ОткрытьФорму("ОбщаяФорма.ИТКВ_Вопрос", ПараметрыФормы, Владелец, , , , ОписаниеОповещенияОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Показать сравнение файлов
//
// Параметры:
//	ИмяПервогоФайла - Строка - Имя первого файла
//	ИмяВторогоФайла - Строка - Имя второго файла
//	СпособСравнения - СпособСравнения - Способ сравнения
//
Процедура ПоказатьСравнениеФайловМодально(ИмяПервогоФайла, ИмяВторогоФайла, СпособСравнения) Экспорт
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		
		СравнениеФайлов = Новый СравнениеФайлов;
		СравнениеФайлов.ПервыйФайл = ИмяПервогоФайла;
		СравнениеФайлов.ВторойФайл = ИмяВторогоФайла;
		СравнениеФайлов.СпособСравнения = СпособСравнения;
		
		СравнениеФайлов.ПоказатьРазличияМодально();
		
		НачатьУдалениеФайлов(, ИмяПервогоФайла);
		НачатьУдалениеФайлов(, ИмяВторогоФайла);
		
	#КонецЕсли
	
КонецПроцедуры

Функция ОбработкаЗавершенВводЗначенияВФорме(Элемент, РезультатВвода, ДополнительныеПараметры, ЗначениеПриемник, ОписаниеТипов, Модифицированность = Неопределено) Экспорт
	
	Если РезультатВвода = Неопределено Тогда
		
		Результат = Ложь;
		
	Иначе
		
		Результат = Истина;
		
		ВыборТипа = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ВыборТипа", Ложь);
		Если ВыборТипа Тогда
			
			Элемент.ОграничениеТипа = РезультатВвода;
			Элемент.ВыбиратьТип = Ложь;
			
			НовоеЗначение = РезультатВвода.ПривестиЗначение(Неопределено);
			
			// После выбора типа для некоторых типов сразу открываем форму выбора
			ОткрытиеФормыВыбораПослеВыбораТипаЗначения(Элемент, ДополнительныеПараметры, НовоеЗначение);
			
		Иначе
			
			НовоеЗначение = РезультатВвода;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		ЗначениеПриемник = НовоеЗначение;
		
		ИТКВ_ФормаКлиент.АктивизацияЗначенияВФорме(Элемент, НовоеЗначение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаТаблицаЗначенийВыбор(Форма, Элемент, Поле, СтандартнаяОбработка) Экспорт
	
	Колонка = ИТКВ_Строки.УдалитьПрефикс(Поле.Имя, Элемент.Имя);
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Значение = ТекущиеДанные[Колонка];
	ТипЗначения = ТипЗнч(Значение);

	Если Элемент.ТолькоПросмотр
			ИЛИ Поле.ТолькоПросмотр Тогда

		Если ИТКВ_ТипыВызовСервера.ЭтоСсылочный(ТипЗначения, Истина) Тогда
			ПоказатьЗначение( , Значение);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	Если ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ДополнительныеПараметры.Вставить("Колонка", Колонка);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеОсобогоЗначенияКолонкиЗавершено", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьРедактированиеУникальногоИдентификатора(Колонка, Значение, Элемент, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактированиеОсобогоЗначенияКолонкиЗавершено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	
	ТекущиеДанные = ДополнительныеПараметры.Элемент.ТекущиеДанные;
	ТекущиеДанные[ДополнительныеПараметры.Колонка] = Результат;
	
КонецПроцедуры

Процедура ОбработкаТаблицаЗначенийРеквизитОчистка(Элемент, СтандартнаяОбработка) Экспорт
	
	Если Элемент.ДоступныеТипы.Типы().Количество() > 1 Тогда
		Элемент.ВыбиратьТип = Истина;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаТаблицаЗначенийРеквизитНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	ТекущееЗначение = ЗначениеКолонкиТаблицыЗначений(Форма.ТекущийЭлемент, Элемент);
	ДоступныеТипы = Элемент.ДоступныеТипы;
	
	ПараметрыОповещенияВводЗначенияЗавершен = Новый Структура;
	ПараметрыОповещенияВводЗначенияЗавершен.Вставить("Форма", Форма);
	ПараметрыОповещенияВводЗначенияЗавершен.Вставить("Элемент", Элемент);
	
	Если Элемент.ВыбиратьТип Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыборТипаКолонкиЗавершен", ЭтотОбъект, ДополнительныеПараметры);
		
		ДополнительныеПараметры = Новый Структура;
		ИТКВ_ФормаКлиент.ОткрытьРедактированиеТипаЗначения(Элемент, НСтр("ru = 'Колонки'; en = 'Column'"), ИТКВ_Перечисления.РежимРедактированияТипаЗначенияВыборТипа(),
											ДоступныеТипы, ОписаниеОповещенияЗавершение, СтандартнаяОбработка, ДополнительныеПараметры);
											
	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Тип") Тогда
											
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВводЗначенияВКолонкеЗавершен", ЭтотОбъект, ПараметрыОповещенияВводЗначенияЗавершен);
		ИТКВ_ФормаКлиент.ОткрытьРедактированиеТипаЗначения(Элемент, "", ИТКВ_Перечисления.РежимРедактированияТипаЗначенияРедактированиеТипа(),
											ТекущееЗначение, ОписаниеОповещенияЗавершение, СтандартнаяОбработка);

	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("МоментВремени") Тогда
		
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВводЗначенияВКолонкеЗавершен", ЭтотОбъект, ПараметрыОповещенияВводЗначенияЗавершен);
		ИТКВ_ФормаКлиент.ОткрытьРедактированиеМоментаВремени(Элемент, ТекущееЗначение, СтандартнаяОбработка, ОписаниеОповещенияЗавершение);
											
	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Строка") Тогда
		
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВводЗначенияВКолонкеЗавершен", ЭтотОбъект, ПараметрыОповещенияВводЗначенияЗавершен);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Длина", ДоступныеТипы.КвалификаторыСтроки.Длина);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОписаниеОповещенияЗавершение);
		ОткрытьРедактированиеМногострочногоТекста(Элемент, Элемент.ТекстРедактирования, , ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборТипаКолонкиЗавершен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЭлементЗначение = ДополнительныеПараметры.Элемент;
	ЭлементЗначение.ОграничениеТипа = Результат;
	ЭлементЗначение.ВыбиратьТип = Ложь;
	
КонецПроцедуры

Процедура ВводЗначенияВКолонкеЗавершен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеКолонкиТаблицыЗначений(ДополнительныеПараметры.Форма.ТекущийЭлемент, ДополнительныеПараметры.Элемент, Результат);
	
КонецПроцедуры

Функция КнопкиВопросаПродолжитьОтмена() Экспорт
	
	Результат = Новый СписокЗначений;
	Результат.Добавить(Истина, НСтр("ru = 'Продолжить'; en = 'Continue'"));
	Результат.Добавить(Неопределено, НСтр("ru = 'Отмена'; en = 'Cancel'"));
	
	Возврат Результат;
	
КонецФункции

// Учитавает три положения флажка
Функция ОпределитьПометкуТриСостояния(ТекущиеДанные, ИмяПометки = "Пометка") Экспорт
	
	Результат = ТекущиеДанные[ИмяПометки];

	Если Результат = 2 Тогда
		Результат = 0;
	Иначе
		Результат = 1;
	КонецЕсли;
	
	ТекущиеДанные[ИмяПометки] = Результат;
	
	Возврат Результат;
	
КонецФункции

Процедура ДеревоУстановитьПодчиненнымПометку(Строка, Пометка, ИмяПометки = "Пометка") Экспорт
	
	Для Каждого ПодчиненнаяСтрока Из Строка.ПолучитьЭлементы() Цикл
		
		ПодчиненнаяСтрока[ИмяПометки] = Пометка;
		ДеревоУстановитьПодчиненнымПометку(ПодчиненнаяСтрока, Пометка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеревоОпределитьПометкуРодителя(Строка, Знач Пометка, ИмяПометки = "Пометка") Экспорт
	
	Родитель = Строка.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеУстановлены = Истина; ВсеСняты = Истина;
	Для Каждого ПодчиненнаяСтрока Из Родитель.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока[ИмяПометки] = 2 Тогда
			
			ВсеСняты = Ложь;
			ВсеУстановлены = Ложь;
			
			Прервать;
			
		ИначеЕсли ПодчиненнаяСтрока[ИмяПометки] Тогда
			
			ВсеСняты = Ложь;
			
		Иначе
			
			ВсеУстановлены = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пометка = ИТКВ_ОбщийКлиентСервер.ПометкаТриСостояния(ВсеУстановлены, ВсеСняты);
	Родитель[ИмяПометки] = Пометка;
	ДеревоОпределитьПометкуРодителя(Родитель, Пометка);
	
КонецПроцедуры

Процедура ДеревоСкопироватьСтроки(Приемник, Источник) Экспорт
	
	Для Каждого СтрокаИсточника Из Источник.ПолучитьЭлементы() Цикл
		
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		
		ДеревоСкопироватьСтроки(НоваяСтрока, СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьДерево(Элемент, Коллекция, Уровень = 1) Экспорт
	
	СвернутьВсеДополнительная(Элемент, Коллекция, Уровень);
	
КонецПроцедуры

Процедура РазвернутьДерево(Элемент, Коллекция, Все = Ложь) Экспорт
	
	Для Каждого Строка Из Коллекция.ПолучитьЭлементы() Цикл
		
		Элемент.Развернуть(Строка.ПолучитьИдентификатор(), Все);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МаксимальныйИндексСтрокДерева(Родитель, Поле = "Представление") Экспорт
	
	Результат = 0;
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		
		Значение = Строка[Поле];
		Индекс = ИТКВ_Строки.ИндексИдентификатора(Значение);
		
		Результат = Макс(Индекс, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальныйИндексСтрокТаблицы(Таблица, Поле = "Представление") Экспорт
	
	Результат = 0;
	Для Каждого Строка Из Таблица Цикл
		
		Значение = Строка[Поле];
		Индекс = ИТКВ_Строки.ИндексИдентификатора(Значение);
		
		Результат = Макс(Индекс, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаДеревоВходитВСтроку(Проверяемая, Строка) Экспорт
	
	Если ТипЗнч(Проверяемая) = Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	Родитель = Проверяемая;
	Пока Родитель <> Неопределено Цикл
		
		Родитель = Родитель.ПолучитьРодителя();
		
		Если Родитель = Строка Тогда
			
			Результат = Истина;
			Прервать;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция РодительСтрокиДерева(Дерево, Строка) Экспорт
	
	Результат = Строка.ПолучитьРодителя();
	
	Если Результат = Неопределено Тогда // Родителя нет (корень) добавляем в дерево (корень)
		
		Результат = Дерево;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПометки(Коллекция, Пометка = Истина, Поле = "Пометка") Экспорт
	
	Для Каждого Строка Из Коллекция Цикл
		
		Строка[Поле] = Пометка;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОчисткаВыбранногоОбъекта(Форма, Имя, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Объект = Форма[Имя];
	Результат = Неопределено;
	
	Если ИТКВ_ФормаКлиентСервер.ВыбранОбъект(Объект) Тогда
		
		Результат = Новый (ТипЗнч(Объект));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьВыделениеТаблицы(Форма, Имя, Отбор) Экспорт
	
	Если Не ЗначениеЗаполнено(Отбор) Тогда
		Возврат;
	КонецЕсли;
		
	НайденныеСтроки = Форма[Имя].НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		
		Форма.Элементы[Имя].ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		
	КонецЕсли;

КонецПроцедуры

Функция ВозможенЗапускСравненияПредупреждение(ТипСравнения = Неопределено) Экспорт
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ТолстыйКлиент = Истина;
	#Иначе
		ТолстыйКлиент = Ложь;
	#КонецЕсли
	
	ПоддерживаетсяПлатформойMonaco = ИТКВ_РедакторКодаКлиентСервер.ПоддерживаетсяПлатформойMonaco();
	ВерсияПоддержкиMonaco = ИТКВ_РедакторКодаКлиентСервер.ВерсияПоддержкиMonaco();
	
	ВозможенЗапуск = ТолстыйКлиент ИЛИ (ПоддерживаетсяПлатформойMonaco
											И ТипСравнения <> ИТКВ_Перечисления.ВариантСравненияДанныхРезультаты());
						
	Если НЕ ВозможенЗапуск Тогда
		
		Если ТипСравнения = ИТКВ_Перечисления.ВариантСравненияДанныхРезультаты() Тогда
			
			Текст = НСтр("ru = 'Запуск сравнения не возможен, требуется толстый клиент';
					|en = 'Comparison cannot be run, fat client is required'");
			
		Иначе
			
			Шаблон = НСтр("ru = 'Запуск сравнения не возможен, требуется толстый клиент или платформа версии %1 и старше';
					|en = 'Comparison cannot run, fat client or platform version %1 or older is required'");
			Текст = СтрШаблон(Шаблон, ВерсияПоддержкиMonaco);
			
		КонецЕсли;
		
		ПоказатьПредупреждение( , Текст, , ИТКВ_КонсольРазработчикаКлиентСервер.Представление());
		
	КонецЕсли;
	
	Возврат ВозможенЗапуск;
	
КонецФункции

Процедура ОткрытьСравнениеТекстов(Форма, Текст1, Текст2, ТипЯзыка) Экспорт
	
	Если Не ВозможенЗапускСравненияПредупреждение() Тогда
		Возврат;
	КонецЕсли;
	
	ПоддерживаетсяПлатформойMonaco = ИТКВ_РедакторКодаКлиентСервер.ПоддерживаетсяПлатформойMonaco();
		
	Если ПоддерживаетсяПлатформойMonaco Тогда
		
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
			ВсеНастройки = ИТКВ_НастройкиВызовСервера.ЗагрузитьВсе();
			Редактор = ВсеНастройки.НастройкиОбщие["Редактор"];
		#Иначе
			Редактор = ИТКВ_Перечисления.РедакторMonaco();
		#КонецЕсли
		
	Иначе
		
		Редактор = ИТКВ_Перечисления.РедакторОбычный();
		
	КонецЕсли;
	
	Если Редактор = ИТКВ_Перечисления.РедакторОбычный() Тогда
		
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
			
			ИмяПервогоФайла = ПолучитьИмяВременногоФайла("txt");
			ИмяВторогоФайла = ПолучитьИмяВременногоФайла("txt");
			
			ИТКВ_ОбщийКлиентСервер.СохранитьТекстВФайл(ИмяПервогоФайла, Текст1);
			ИТКВ_ОбщийКлиентСервер.СохранитьТекстВФайл(ИмяВторогоФайла, Текст2);
		
			ИТКВ_ФормаКлиент.ПоказатьСравнениеФайловМодально(ИмяПервогоФайла, ИмяВторогоФайла, СпособСравненияФайлов.ТекстовыйДокумент);
			
		#КонецЕсли
		
	ИначеЕсли Редактор = ИТКВ_Перечисления.РедакторMonaco() Тогда
		
		ИТКВ_РедакторКодаКлиент.ПоказатьСравнение(Форма, Текст1, Текст2, ТипЯзыка);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПоискПоСпискуВыбора(Элемент, Поиск, ДанныеВыбора, СтандартнаяОбработка, Лимит = 20) Экспорт
	
	Если Не ЗначениеЗаполнено(Поиск) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	ЧастиПоиска = ИТКВ_Строки.ЧастиПоискаПоПодобию(Поиск);

	КоличествоДобавленных = 0;
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		
		Значение = ЭлементСписка.Значение;
		Представление = ЭлементСписка.Представление;
		Если ЗначениеЗаполнено(Представление) Тогда
			ОбластьПоиска = Представление;
		Иначе
			ОбластьПоиска = Значение;
		КонецЕсли;
		
		АнализируемаяСтрока = ИТКВ_Строки.АнализируемаяСтрокаПоискаПоПодобию(ОбластьПоиска);
		Если ИТКВ_Строки.НайденоПоПодобию(АнализируемаяСтрока, ЧастиПоиска) Тогда
			
			ФорматированноеПредставление = ИТКВ_Строки.НайтиИВыделитьОформлением(ОбластьПоиска, Поиск);
			ДанныеВыбора.Добавить(Значение, ФорматированноеПредставление, , ЭлементСписка.Картинка);
			
			КоличествоДобавленных = КоличествоДобавленных + 1;
			
			Если КоличествоДобавленных >= Лимит Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриНачалеРедактированияНовоеИмяВКоллекции(Элемент, Коллекция, НоваяСтрока, Копирование, Префикс, ИмяПоля = "Имя") Экспорт
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ИспользуемыеИмена = ИспользуемыеИменаКоллекции(Коллекция, ИмяПоля);
	
	Если Копирование Тогда
		Префикс = ТекущиеДанные[ИмяПоля];
	КонецЕсли;
	
	ТекущиеДанные[ИмяПоля] = ИТКВ_Строки.НовыйИдентификатор(Префикс, ИспользуемыеИмена);
	
КонецПроцедуры

Функция КоллекцияРодитель(Элемент) Экспорт
	
	Результат = Элемент.Родитель;
	
	Пока НЕ (Результат = Неопределено
				ИЛИ ТипЗнч(Результат) = Тип("ТаблицаФормы")) Цикл
				
		Результат = Результат.Родитель;
	
	КонецЦикла;
	
	Возврат Результат;
			
КонецФункции

Функция ПрисутствуютЗаполненныеЗначенияКоллекции(Коллекция, ПроверяемыеКолонки) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого ПроверяемаяКолонка Из ПроверяемыеКолонки Цикл
		
		Если ПрисутствуютЗаполненныеЗначенияКолонкиКоллекции(Коллекция, ПроверяемаяКолонка) Тогда
			Результат.Вставить(ПроверяемаяКолонка);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция КоличествоСтрокВДереве(Дерево, Отбор = Неопределено) Экспорт
	
	Результат = 0;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		Результат = Результат + КоличествоСтрокВДереве(Строка, Отбор);
		
		Если СтрокаВДеревеСоответствуетОтбору(Строка, Отбор) Тогда
			Результат = Результат + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементВиден(Знач Элемент) Экспорт
	
	Результат = Истина;
	
	Пока Истина Цикл
		
		Если Элемент.Видимость = Ложь Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		Элемент = Элемент.Родитель;
		
		Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СортироватьСтрокиДерева(Коллекция, Поле, Начало = Неопределено, Конец = Неопределено) Экспорт
	
	Количество = Коллекция.Количество();
	
	Если Начало = Неопределено
			ИЛИ Конец = Неопределено Тогда
			
		Начало = 0;
		Конец = Количество - 1;
		
	КонецЕсли;

	Если Количество < 2 Тогда
		Возврат;
	КонецЕсли;

    НачальныйИндекс = Начало;
	КонечныйИндекс = Конец;
	СреднийЭлемент = Коллекция[(НачальныйИндекс + КонечныйИндекс) / 2];

	Пока НачальныйИндекс <= КонечныйИндекс Цикл
		
		Пока Коллекция[НачальныйИндекс][Поле] < СреднийЭлемент[Поле] Цикл НачальныйИндекс = НачальныйИндекс + 1 КонецЦикла;
		Пока Коллекция[КонечныйИндекс][Поле] > СреднийЭлемент[Поле] Цикл КонечныйИндекс = КонечныйИндекс - 1 КонецЦикла;
		
		Если НачальныйИндекс <= КонечныйИндекс Тогда
			
			Если НачальныйИндекс <> КонечныйИндекс Тогда
				
				Коллекция.Сдвинуть(КонечныйИндекс, НачальныйИндекс - КонечныйИндекс);
				Коллекция.Сдвинуть(НачальныйИндекс + 1, КонечныйИндекс - НачальныйИндекс - 1);
				
			КонецЕсли;
			
			НачальныйИндекс = НачальныйИндекс + 1;
			КонечныйИндекс = КонечныйИндекс - 1;
			
		КонецЕсли;
		
	КонецЦикла;

	Если Начало < КонечныйИндекс Тогда
		СортироватьСтрокиДерева(Коллекция, Поле, Начало, КонечныйИндекс);
	КонецЕсли;

	Если НачальныйИндекс < Конец Тогда
		СортироватьСтрокиДерева(Коллекция, Поле, НачальныйИндекс, Конец);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьВыборПравДоступа(Владелец, ВыбранныеПрава, ОписаниеОповещенияЗавершение, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТипЗначения = ИТКВ_ТипыКлиентСервер.ОписаниеСтрока();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Выбор прав доступа'; en = 'Choosing access rights'"));
    //
    //ДоступныеПраваДоступа = ИТКВ_АнализПравДоступаВызовСервера.ВсеПраваДоступа();
    //Для Каждого ПравоДоступа Из ДоступныеПраваДоступа Цикл
    //	
    //	Если ЗначениеЗаполнено(ВыбранныеПрава)
    //			И ВыбранныеПрава.НайтиПоЗначению(ПравоДоступа.Значение) = Неопределено Тогда
    //		Продолжить;
    //	КонецЕсли;
    //	
    //	ПравоДоступа.Пометка = Истина;
    //	
    //КонецЦикла;
    //
    //ИТКВ_ФормаКлиент.ОткрытьСписокЗначений(Владелец, ИТКВ_Перечисления.ВариантФормыСписокЗначенийВыборНесколькихЗначений(),
    //										ДоступныеПраваДоступа, ТипЗначения, ОписаниеОповещенияЗавершение, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОткрытьВыборРолей(Владелец, ВыбранныеРоли, ОписаниеОповещенияЗавершение, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТипЗначения = ИТКВ_ТипыКлиентСервер.ОписаниеСтрока();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Выбор ролей'; en = 'Role selection'"));
	
    //ДоступныеРоли = ИТКВ_АнализПравДоступаВызовСервера.ВсеРолиСписок();
    //Для Каждого ПравоДоступа Из ДоступныеРоли Цикл
    //	
    //	Если ЗначениеЗаполнено(ВыбранныеРоли)
    //			И ВыбранныеРоли.НайтиПоЗначению(ПравоДоступа.Значение) = Неопределено Тогда
    //		Продолжить;
    //	КонецЕсли;
    //	
    //	ПравоДоступа.Пометка = Истина;
    //	
    //КонецЦикла;
    //
    //ИТКВ_ФормаКлиент.ОткрытьСписокЗначений(Владелец, ИТКВ_Перечисления.ВариантФормыСписокЗначенийВыборНесколькихЗначений(),
    //										ДоступныеРоли, ТипЗначения, ОписаниеОповещенияЗавершение, СтандартнаяОбработка, ДополнительныеПараметры);
    //
КонецПроцедуры

Процедура ОткрытьВыборПользователей(Владелец, ВыбранныеПользователи, ОписаниеОповещенияЗавершение, СтандартнаяОбработка = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТипЗначения = ИТКВ_ТипыКлиентСервер.ОписаниеСтрока();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Выбор пользователей'; en = 'User choice'"));
	
    //ВыбранныеПользователи = ИТКВ_АнализПравДоступаВызовСервера.ВсеПользователиСписок();
    //Для Каждого Пользователь Из ВыбранныеПользователи Цикл
    //	
    //	Если ЗначениеЗаполнено(ВыбранныеПользователи)
    //			И ВыбранныеПользователи.НайтиПоЗначению(Пользователь.Значение) = Неопределено Тогда
    //		Продолжить;
    //	КонецЕсли;
    //	
    //	Пользователь.Пометка = Истина;
    //	
    //КонецЦикла;
    //
    //ИТКВ_ФормаКлиент.ОткрытьСписокЗначений(Владелец, ИТКВ_Перечисления.ВариантФормыСписокЗначенийВыборНесколькихЗначений(),
    //										ВыбранныеПользователи, ТипЗначения, ОписаниеОповещенияЗавершение, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ОшибкиНастроекОтчетаСписок(Форма) Экспорт
	
	Возврат Форма[ИТКВ_ФормаКлиентСервер.ОшибкиНастроекОтчетаИмяОсновногоРеквизита()];
	
КонецФункции

Процедура ОшибкиНастроекОтчетаОчистить(Форма) Экспорт
	
	ОшибкиНастроекОтчета = ОшибкиНастроекОтчетаСписок(Форма);
	ОшибкиНастроекОтчета.Очистить();
	
КонецПроцедуры

Процедура ОшибкиНастроекОтчетаДобавить(Форма, ТекстОшибки, Картинка, Важность = Ложь) Экспорт
	
	ОшибкиНастроекОтчета = ОшибкиНастроекОтчетаСписок(Форма);
	ОшибкиНастроекОтчета.Добавить(ТекстОшибки, , Важность, Картинка);
	
КонецПроцедуры

Процедура ОшибкиНастроекОтчетаОбновитьОтображение(Форма, Количество = 5) Экспорт
	
	Элементы = Форма.Элементы;
	ИмяОсновногоРеквизита = ИТКВ_ФормаКлиентСервер.ОшибкиНастроекОтчетаИмяОсновногоРеквизита();
	ОшибкиНастроекОтчета = ОшибкиНастроекОтчетаСписок(Форма);
	
	Для НомерОшибки = 1 По Количество Цикл

		ТекстОшибки = Неопределено;
		Картинка = Неопределено;
		Если НомерОшибки <= ОшибкиНастроекОтчета.Количество() Тогда
			
			Элемент = ОшибкиНастроекОтчета[НомерОшибки - 1];
			ТекстОшибки = Элемент.Значение;
			Картинка = Элемент.Картинка;

		КонецЕсли;
		
		Элементы[ИмяОсновногоРеквизита + "Группа" + НомерОшибки].Видимость = ЗначениеЗаполнено(ТекстОшибки);
		Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ИмяОсновногоРеквизита + "Картинка" + НомерОшибки].Картинка = Картинка;
		Элементы[ИмяОсновногоРеквизита + "Текст" + НомерОшибки].Заголовок = ТекстОшибки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверяемоеЗначениеПараметра(Значение, ОписаниеТипов)
	
	Если ТипЗнч(Значение) = Тип("Структура")
			ИЛИ ТипЗнч(Значение) = Тип("МоментВремени")
			ИЛИ ТипЗнч(Значение) = Тип("Граница")
			ИЛИ ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ТипПараметраТаблицаЗначений(ОписаниеТипов) Тогда
			
		Результат = Значение;
		
	Иначе
		
		Результат = ОписаниеТипов.ПривестиЗначение(Значение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементПодчиненЭлементу(Родитель, ПроверяемыйЭлемент)
	
	Результат = Ложь;
	Для Каждого Элемент Из Родитель.ПодчиненныеЭлементы Цикл
		
		Если Элемент = ПроверяемыйЭлемент Тогда
			
			Результат = Истина;
			Прервать;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы")
				ИЛИ ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			
			Если ЭлементПодчиненЭлементу(Элемент, ПроверяемыйЭлемент) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СвернутьВсеДополнительная(Элемент, Коллекция, ТребуемыйУровень = 1, Уровень = 1) Экспорт
	
	Для Каждого Строка Из Коллекция.ПолучитьЭлементы() Цикл
		
		СвернутьВсеДополнительная(Элемент, Строка, ТребуемыйУровень, Уровень + 1);
		
		Если Уровень >= ТребуемыйУровень Тогда
			
			Элемент.Свернуть(Строка.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеКолонкиТаблицыЗначений(ЭлементТаблица, ЭлементКолонка)
	
	ИмяКолонки = Сред(ЭлементКолонка.Имя, СтрДлина(ЭлементТаблица.Имя) + 1);
	
	ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
	Возврат ТекущиеДанные[ИмяКолонки];
	
КонецФункции

Процедура УстановитьЗначениеКолонкиТаблицыЗначений(ЭлементТаблица, ЭлементКолонка, Значение)
	
	ИмяКолонки = Сред(ЭлементКолонка.Имя, СтрДлина(ЭлементТаблица.Имя) + 1);
	
	ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
	ТекущиеДанные[ИмяКолонки] = Значение;
	
КонецПроцедуры

Функция ИспользуемыеИменаКоллекции(Коллекция, ИмяПоля)
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		
		Результат.Добавить(ЭлементКоллекции[ИмяПоля]);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрисутствуютЗаполненныеЗначенияКолонкиКоллекции(Коллекция, ИмяКолонки)
	
	Результат = Ложь;
	
	ТипЗначенияКоллекции = ТипЗнч(Коллекция);
	
	Если ТипЗначенияКоллекции = Тип("ДанныеФормыКоллекция") Тогда
		Результат = ПрисутствуютЗаполненныеЗначенияКолонкиТаблицы(Коллекция, ИмяКолонки);
	Иначе
		Результат = ПрисутствуютЗаполненныеЗначенияКолонкиДерева(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрисутствуютЗаполненныеЗначенияКолонкиТаблицы(Таблица, ИмяКолонки)
	
	Результат = Ложь;
	Для Каждого Строка Из Таблица Цикл
		
		Значение = Строка[ИмяКолонки];
		Если ЗаполненоЗначениеЯчейкиКоллекции(Значение) Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрисутствуютЗаполненныеЗначенияКолонкиДерева(Дерево, ИмяКолонки)
	
	Результат = Ложь;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		Значение = Строка[ИмяКолонки];
		ПрисутствуютЗаполненныеЗначенияПодчиненных = ПрисутствуютЗаполненныеЗначенияКолонкиДерева(Строка, ИмяКолонки);
		
		Если ПрисутствуютЗаполненныеЗначенияПодчиненных
				ИЛИ ЗаполненоЗначениеЯчейкиКоллекции(Значение) Тогда
				
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполненоЗначениеЯчейкиКоллекции(Значение)
	
	Результат = Ложь;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("ПараметрыРедактированияКомпоновкиДанных")
			ИЛИ ТипЗначения = Тип("ОформлениеКомпоновкиДанных") Тогда
			
		Для Каждого Элемент Из Значение.Элементы Цикл
			
			Если Элемент.Использование Тогда
				Результат = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Результат = ЗначениеЗаполнено(Значение);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВДеревеСоответствуетОтбору(Строка, Отбор)
	
	Если Отбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Истина;
	Для Каждого ПолеОтбора Из Отбор Цикл
		
		ИмяПоля = ПолеОтбора.Ключ;
		Если Строка[ИмяПоля] <> ПолеОтбора.Значение Тогда
			
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Процедура ОткрытиеФормыВыбораПослеВыбораТипаЗначения(Элемент, ДополнительныеПараметры, НовоеЗначение)
	
	ТипЗначения = ТипЗнч(НовоеЗначение);
	Если ИТКВ_МетаданныеВызовСервера.ЭтоТипТочкаМаршрутаБизнесПроцесса(ТипЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		
		ДополнительныеПараметры.ВыборТипа = Ложь;
		ОткрытьРедактированиеУникальногоИдентификатора(ДополнительныеПараметры.Заголовок, НовоеЗначение, Элемент, ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		
	Иначе
		
		ОткрытьФормуВыбора(НовоеЗначение, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаСпискаВыбораЗначенияВФорме(СписокВыбора)
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		Значение = ЭлементСписка.Значение;
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			
			Тип = ИТКВ_ОбщийКлиентСервер.Свойство(Значение, "Тип");
			Если Тип = "ТекущаяДата" Тогда
				УдаляемыеЭлементы.Добавить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		СписокВыбора.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

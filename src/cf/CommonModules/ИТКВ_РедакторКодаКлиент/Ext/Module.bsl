#Область ПрограммныйИнтерфейс

Процедура Инициализация(Форма, Имя) Экспорт
	
	Элемент = Форма.Элементы[Имя];
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Имя", Имя);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ЗавершениеИнициализации", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		// Проверяем наличие каталога
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеРабочегоКаталогаДанныхПользователяЗакончено", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПолучениеРабочегоКаталогаДанныхПользователя(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеРабочегоКаталогаДанныхПользователяЗакончено(КаталогДанныхПользователя, ДополнительныеПараметры) Экспорт
	
	ШаблонИмениКаталога = "%1\ITK_Monaco%2\";
	ПолноеИмяКаталога = СтрШаблон(ШаблонИмениКаталога, КаталогДанныхПользователя,"0.0.0.1");
	ДополнительныеПараметры.Вставить("ПолноеИмяКаталога", ПолноеИмяКаталога);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияКаталогаОкончена", ЭтотОбъект, ДополнительныеПараметры);
	КаталогПакета = Новый Файл(ПолноеИмяКаталога);
	КаталогПакета.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверкаСуществованияКаталогаОкончена(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ПолноеИмяКаталога = ДополнительныеПараметры.ПолноеИмяКаталога;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайловОкончена", ЭтотОбъект, ДополнительныеПараметры);
		
		НачатьПоискФайлов(ОписаниеОповещения, ПолноеИмяКаталога, "*.*");
		
	Иначе
		
		Распаковать(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайловОкончена(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ИменаНайденныхФайлов = Новый Массив;
	Для Каждого Файл Из НайденныеФайлы Цикл
		
		ИменаНайденныхФайлов.Добавить(Файл.Имя);
		
	КонецЦикла;
	
	ТребуетсяУстановка = (ИменаНайденныхФайлов.Найти("index.html") = Неопределено)
							ИЛИ (ИменаНайденныхФайлов.Найти("editor.js") = Неопределено)
							ИЛИ (ИменаНайденныхФайлов.Найти("init.js") = Неопределено);
							
	Если ТребуетсяУстановка Тогда
		Распаковать(ДополнительныеПараметры);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиФайлаПакета(ДополнительныеПараметры) Экспорт
	
	ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	
	ПолноеИмяКаталога = ДополнительныеПараметры.ПолноеИмяКаталога;
	Файл = Новый ЧтениеZipФайла(ПолноеИмяФайла);
	Файл.ИзвлечьВсе(ПолноеИмяКаталога);
	Файл.Закрыть();
	
	НачатьУдалениеФайлов( , ПолноеИмяФайла);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗавершениеИнициализации(РезультатИнициализации, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатИнициализации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = РезультатИнициализации.Форма;
	Имя = РезультатИнициализации.Имя;
	Элемент = Форма.Элементы[Имя];
	Текст = Форма[Имя];
	
	Форма[Имя] = РезультатИнициализации.ПолноеИмяКаталога + "index.html";
	
КонецПроцедуры

Процедура ДополнительнаяИнициализация(Форма, Элемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьТребуетсяДополнительнаяИнициализация(Элемент, Ложь);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Текст = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Текст", "");
	ТипЯзыка = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ТипЯзыка", ИТКВ_РедакторКодаКлиентСервер.ТипЯзыка(Элемент));
	ПользовательскиеОбъекты = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ПользовательскиеОбъекты");
	УстановитьФокус = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "УстановитьФокус", Истина);
	ЗагружатьОбщиеМодули = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ЗагружатьОбщиеМодули", Истина);
	ОписаниеПользовательскихОбщихМодулейJSON = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ОписаниеПользовательскихОбщихМодулейJSON");
	
	ТолькоПросмотр = Элемент.ТолькоПросмотр;
	РежимЗапрос = (ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораЗапросы());
	РежимКод = (ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораВстроенный());
	
	defaultView = ДокументHTML(Элемент);
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	defaultView.init(СистемнаяИнформация.ВерсияПриложения);
	defaultView.clearMetadata(); // Обнуление предопределенных метаданных
	
	// Установка настроек редактора
	defaultView.hideScrollY(); // Отключение вертикальной полосы прокрутки
	
	//defaultView.setOption("disableContextCommands", Истина);
	defaultView.disableContextMenu();

	defaultView.setOption("autoResizeEditorLayout", Истина);
	Если РежимЗапрос Тогда
		defaultView.setOption("renderQueryDelimiters", Истина);
	КонецЕсли;
	Если РежимКод Тогда
		defaultView.setOption("generateDefinitionEvent", Истина);
	КонецЕсли;
	Если НЕ ТолькоПросмотр Тогда
		defaultView.setOption("generateModificationEvent", Истина);
	КонецЕсли;
	
	// Загрузка настроек редактора
	НастройкиРедактора = ИТКВ_РедакторКодаВызовСервера.ЗагрузитьНастройкиРедактора();
	ФиксированныеНастройкиРедактора = ФиксированныеНастройкиРедактора(Элемент);
	ЗаполнитьЗначенияСвойств(НастройкиРедактора, ФиксированныеНастройкиРедактора);
	ПрименитьНастройкиРедактораКОбъекту(defaultView, НастройкиРедактора);

	Если РежимКод Тогда

		Если ЗагружатьОбщиеМодули Тогда
			ОписаниеОбщихМодулей = ИТКВ_РедакторКодаВызовСервера.ОписаниеОбщихМодулейJSON();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеПользовательскихОбщихМодулейJSON) Тогда
			ОписаниеОбщихМодулей = ОписаниеПользовательскихОбщихМодулейJSON
		КонецЕсли;
		
		defaultView.updateMetadata(ОписаниеОбщихМодулей, "commonModules.items");
		
	КонецЕсли;
	
	// Установка режима язка
	РежимЯзыкаМонако = РежимЯзыкаМонако(ТипЯзыка);
	defaultView.setLanguageMode(РежимЯзыкаМонако);
	
	УстановитьТекст(Форма, Элемент, Текст);
	УстановитьОригинальныйТекст(Элемент, Текст);
	
	defaultView.setReadOnly(ТолькоПросмотр);
	
	Если НЕ ТолькоПросмотр Тогда
		
		Если РежимКод Тогда
			
			// Загружаем шаблоны
			СтрокаJSON = ИТКВ_РедакторКодаКлиентСервер.ШаблоныJSONСтрока();
			defaultView.updateSnippets(СтрокаJSON);
			
		КонецЕсли;
		
		// Загружаем метаданные
		Если ЗначениеЗаполнено(ПользовательскиеОбъекты) Тогда
			
			СтрокаJSON = ИТКВ_РедакторКодаВызовСервера.ПользовательскиеОбъектыВJSONСтроку(ПользовательскиеОбъекты);
			defaultView.updateMetadata(СтрокаJSON);
			
		КонецЕсли;
		
		Если УстановитьФокус Тогда
			УстановитьФокус(Форма, Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПользовательскиеОбъекты(Элемент, ПользовательскиеОбъекты) Экспорт
	
	Если НЕ (ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент)
			И Инициализирован(Элемент)) Тогда
		Возврат;
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	
	СтрокаJSON = ИТКВ_РедакторКодаВызовСервера.ПользовательскиеОбъектыВJSONСтроку(ПользовательскиеОбъекты);
	defaultView.updateMetadata(СтрокаJSON);
	
КонецПроцедуры

Процедура УстановитьТекст(Форма, Элемент, Текст) Экспорт
	
	Если ТребуетсяИнициализация(Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		Позиция = Неопределено;
		УчитыватьОтступПервойСтроки = Ложь;
		
		defaultView = ДокументHTML(Элемент);
		defaultView.setOriginalText("");
		defaultView.updateText(Текст, Позиция, УчитыватьОтступПервойСтроки);
		defaultView.setOriginalText(Текст, Истина);
		
	Иначе
		
		Форма[Элемент.Имя] = Текст;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТребуетсяДополнительнаяИнициализация(Элемент, Требуется = Истина) Экспорт
	
	Если НЕ ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Требуется Тогда
		ЗначениеОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
	Иначе
		ЗначениеОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	Элемент.ОтображениеПредупрежденияПриРедактировании = ЗначениеОтображениеПредупрежденияПриРедактировании;
	
КонецПроцедуры

Процедура УстановитьДоступностьРедактирования(Форма, Элемент, ДоступноРедактирование) Экспорт
	
	Если ТребуетсяИнициализация(Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		ДокументHTML(Элемент).setReadOnly(Не ДоступноРедактирование);
		
	Иначе
		
		Элемент.ТолькоПросмотр = Не ДоступноРедактирование;
		Элемент.ЦветФона = ИТКВ_ОбщийКлиентСервер.ЦветФонаЭлементРедактируется(ДоступноРедактирование);
		
	КонецЕсли;
	
	ОбновитьЭлементыКонтекстногоМеню(Элемент.КонтекстноеМеню, ДоступноРедактирование);
	
КонецПроцедуры

Процедура УстановитьВыделенныйТекст(Элемент, Текст, ГраницыВыделения = Неопределено) Экспорт
	
	Если ГраницыВыделения <> Неопределено Тогда
		УстановитьГраницыВыделения(Элемент, ГраницыВыделения.НачалоСтроки, ГраницыВыделения.НачалоКолонки, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки);
	КонецЕсли;
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.selectedText(Текст);
		
	Иначе
		
		Элемент.ВыделенныйТекст = Текст;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыделенныйТекст(Элемент) Экспорт
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		Результат = ДокументHTML(Элемент).selectedText();
		
	Иначе
		
		Результат = Элемент.ВыделенныйТекст;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Текст(Форма, Имя) Экспорт
	
	Элемент = Форма.Элементы[Имя];
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		Результат = ДокументHTML(Элемент).getText();
		
	Иначе
		
		Результат = Форма[Имя];
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция Инициализирован(Элемент) Экспорт
	
	Если ТребуетсяПервоначальнаяИнициализация(Элемент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать);
	
КонецФункции

Функция ТребуетсяИнициализация(Элемент) Экспорт
	
	Возврат НЕ Инициализирован(Элемент);
	
КонецФункции

Процедура ПоказатьОшибку(Элемент, НомерСтроки, НомерСтолбца = 1) Экспорт
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		ДокументHTML(Элемент).markError(НомерСтроки, НомерСтолбца);
		
	Иначе
		
		Элемент.УстановитьГраницыВыделения(НомерСтроки, НомерСтолбца, НомерСтроки, НомерСтолбца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключаемыйОбработчикКоманд(Форма, Имя, ОповещениеОЗавершении = Неопределено) Экспорт
	
	// В основном расширении имена Код_УстановитьЗакладку в КД3 - КД3ИТКВ_ТекстЗапроса_УстановитьЗакладку
	Индекс = 1;
	ИмяПоля = ИТКВ_Строки.РазборПрочитатьДоСимвола(Имя, "_", Индекс);
	Если СтрЧислоВхождений(Имя, "_") = 2 Тогда
		ИмяПоля = ИмяПоля + "_" + ИТКВ_Строки.РазборПрочитатьДоСимвола(Имя, "_", Индекс + 1);
	КонецЕсли;
	
	Элемент = Форма.Элементы[ИмяПоля];
	Текст = Текст(Форма, ИмяПоля);
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		
		ДополнительныеПараметры = ОповещениеОЗавершении.ДополнительныеПараметры;

		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ДополнительныеПараметры.Вставить("ИмяКоманды", Имя);

	КонецЕсли;
	
	Если СтрНайти(Имя, "ЗакомментироватьТекст") Тогда
		
		Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
			
			defaultView = ДокументHTML(Элемент);
			defaultView.addComment();
			
		Иначе
			
			ОбработкаВыделенногоТекстаПоАлгоритму(Элемент, Текст, ИТКВ_Перечисления.АлгоритмОбработкиТекстаЗакомментировать());
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Имя, "УбратьКомментарииВТексте") Тогда
		
		Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
			
			defaultView = ДокументHTML(Элемент);
			defaultView.removeComment();
			
		Иначе
			
			ОбработкаВыделенногоТекстаПоАлгоритму(Элемент, Текст, ИТКВ_Перечисления.АлгоритмОбработкиТекстаУбратьКомментарии());
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Имя, "УстановитьСнятьЗакладку") Тогда
		
		defaultView = ДокументHTML(Элемент);
		
		ГраницыВыделения = ГраницыВыделения(Элемент);
		НомерСтроки = ГраницыВыделения.КонецСтроки;
		
		УстановленныеЗакладки = УстановленныеЗакладки(Элемент);
		Если УстановленныеЗакладки.Найти(НомерСтроки) = Неопределено Тогда
			defaultView.addBookmark(НомерСтроки);
		Иначе
			defaultView.removeBookmark(НомерСтроки);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Имя, "ПоделитсяЧерезСервисКода") Тогда
		
		ПоделитсяЧерезСервисКода(Текст, ИТКВ_РедакторКодаКлиентСервер.ТипЯзыка(Элемент));
		
	ИначеЕсли СтрНайти(Имя, "УдалитьВсеЗакладки") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.removeAllBookmarks();
		
	ИначеЕсли СтрНайти(Имя, "СледующаяЗакладка") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.goNextBookmark();
		
	ИначеЕсли СтрНайти(Имя, "ПредыдущаяЗакладка") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.goPreviousBookmark();
		
	ИначеЕсли СтрНайти(Имя, "ДобавитьПереносыСтрок") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.addWordWrap();
		
	ИначеЕсли СтрНайти(Имя, "УбратьПереносыСтрок") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.removeWordWrap();

	ИначеЕсли СтрНайти(Имя, "Форматировать") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.formatDocument();
		
	ИначеЕсли СтрНайти(Имя, "ПерейтиКСтроке") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.editor.trigger("", "editor.action.gotoLine");
		
	ИначеЕсли СтрНайти(Имя, "ЗафиксироватьИзменения") Тогда
		
		ЗафиксироватьИзменения(Элемент);
		
	ИначеЕсли СтрНайти(Имя, "АнализироватьИзменения") Тогда
		
		defaultView = ДокументHTML(Элемент);
		
		Текст1 = defaultView.getOriginalText();
		Текст2 = defaultView.getText();
		ТипЯзыка = ИТКВ_РедакторКодаКлиентСервер.ТипЯзыка(Элемент);
		
		ПоказатьСравнение(Форма, Текст1, Текст2, ТипЯзыка);
		
	ИначеЕсли СтрНайти(Имя, "ПерейтиКОпределению") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.revealDefinition();
		
	ИначеЕсли СтрНайти(Имя, "Найти") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.openSearchWidget();
		
	ИначеЕсли СтрНайти(Имя, "Заменить") Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.editor.trigger("", "editor.action.startFindReplaceAction");
		
	ИначеЕсли СтрНайти(Имя, "Вырезать") Тогда
		
		ВыделенныйТекст = ВыделенныйТекст(Элемент);
		ГраницыВыделения = ГраницыВыделения(Элемент);
		
		Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
			
			defaultView = ДокументHTML(Элемент);
			defaultView.editor.trigger("", "editor.action.clipboardCutAction");
			
		Иначе
		
			УстановитьВыделенныйТекст(Элемент, "", ГраницыВыделения);
			
		КонецЕсли;
		
		ИТКВ_БуферОбменаКлиент.Копировать(ВыделенныйТекст);
		
	ИначеЕсли СтрНайти(Имя, "Копировать") Тогда
		
		ВыделенныйТекст = ВыделенныйТекст(Элемент);
		ИТКВ_БуферОбменаКлиент.Копировать(ВыделенныйТекст);
		
	ИначеЕсли СтрНайти(Имя, "Вставить") Тогда
		
		ТекстВБуфере = ИТКВ_БуферОбменаКлиент.Текст();
		УстановитьВыделенныйТекст(Элемент, ТекстВБуфере);
		
	ИначеЕсли СтрНайти(Имя, "ВыделитьВсе") Тогда
		
		КоличествоСтрок = СтрЧислоСтрок(Текст);
		ПоследняяСтрока = СтрПолучитьСтроку(Текст, КоличествоСтрок);
		УстановитьГраницыВыделения(Элемент, 1, 1, КоличествоСтрок, СтрДлина(ПоследняяСтрока) + 1);
		
	ИначеЕсли СтрНайти(Имя, "КонструкторВыделенногоЗапроса") Тогда
		
		ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("РедактируетсяВыделенныйТекст", Истина);
		
		ГраницыВыделения = ГраницыВыделения(Элемент);
		ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("ГраницыВыделения", ГраницыВыделения);
		
		ВыделенныйТекст = ВыделенныйТекст(Элемент);
		
		РежимКомпоновкиДанных = ИТКВ_РедакторКодаКлиентСервер.РежимКомпоновкиДанных(Элемент);
		ИТКВ_ЗапросКлиент.ОткрытьКонструктор(ВыделенныйТекст, ОповещениеОЗавершении, РежимКомпоновкиДанных);
		
	ИначеЕсли СтрНайти(Имя, "КонструкторФорматнойСтроки")
				ИЛИ СтрНайти(Имя, "КонструкторСтрокиНаРазныхЯзыках")
				ИЛИ СтрНайти(Имя, "КонструкторЗапросаВКоде") Тогда
		
		ОткрытьКонструкторВыраженияВКовычках(Форма, Элемент, Имя, Текст);

	ИначеЕсли СтрНайти(Имя, "КонструкторЗапроса") Тогда
		
		РежимКомпоновкиДанных = ИТКВ_РедакторКодаКлиентСервер.РежимКомпоновкиДанных(Элемент);
		ИТКВ_ЗапросКлиент.ОткрытьКонструктор(Текст, ОповещениеОЗавершении, РежимКомпоновкиДанных);
		
	ИначеЕсли СтрНайти(Имя, "ПереносЗапросаИзКонфигуратора") Тогда
		
		УстановитьВыделениеВесьТекст(Элемент, Текст);
		ОбработкаВыделенногоТекстаПоАлгоритму(Элемент, Текст, ИТКВ_Перечисления.АлгоритмОбработкиТекстаПереносЗапросаИзКонфигуратора());
		
	ИначеЕсли СтрНайти(Имя, "ПреобразоватьВоВложенный") Тогда
		
		ЗаголовокПредупреждения = ИТКВ_КонсольРазработчикаКлиентСервер.Представление();
		ИТКВ_ЗапросКлиент.ОткрытьПреобразоватьВоВложенный(Форма, Элемент, ЗаголовокПредупреждения, ОповещениеОЗавершении);
		
	ИначеЕсли СтрНайти(Имя, "ВставкаСсылкиНаОбъектБД") Тогда
		
		ВставкаСсылкиНаОбъектБД(Форма, Элемент);
		
	ИначеЕсли СтрНайти(Имя, "ВставкаПредопределенного") Тогда
		
		ИТКВ_ЗапросКлиент.ОткрытьВставкуПредопределенного(Форма, Элемент);
		
	ИначеЕсли СтрНайти(Имя, "НастройкаРедактора") Тогда
		
		ИТКВ_ОбщийКлиент.ОткрытьНастройки(Элемент, , "НастройкиРедактора");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СтандартныйОбработчикЗавершенияКоманды(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	Если СтрНайти(ИмяКоманды, "КонструкторВыделенного") Тогда
		
		ГраницыВыделения = ДополнительныеПараметры.ГраницыВыделения;
		УстановитьВыделенныйТекст(Элемент, Результат, ГраницыВыделения);
		
		Результат = Текст(Форма, Элемент.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставкаСсылкиНаОбъектЗакончена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	УстановитьВыделенныйТекст(Элемент, Результат);
	
	ПодключитьОбработчикОжиданияВосстановлениеФокуса(Форма);
	
КонецПроцедуры

Процедура КонструкторВыраженияВКовычкахВопросЗакрыт(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКонструктора = ДополнительныеПараметры.ИмяКонструктора;
	СтрокаРезультат = ДополнительныеПараметры.Результат;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КонструкторВыраженияВКовычкахЗакрыт", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтрНайти(ИмяКонструктора, "КонструкторФорматнойСтроки") Тогда
		
		КонструкторФорматнойСтроки = Новый КонструкторФорматнойСтроки;
		КонструкторФорматнойСтроки.Текст = СтрокаРезультат;
		КонструкторФорматнойСтроки.Показать(ОповещениеОЗакрытии);
		
	ИначеЕсли СтрНайти(ИмяКонструктора, "КонструкторСтрокиНаРазныхЯзыках") Тогда
		
		ИТКВ_ФормаКлиент.ОткрытьКонструкторСтрокНаРазныхЯзыках(Форма, ОповещениеОЗакрытии, СтрокаРезультат);
		
	ИначеЕсли СтрНайти(ИмяКонструктора, "КонструкторЗапросаВКоде") Тогда
		
		ИТКВ_ЗапросКлиент.ОткрытьКонструктор(СтрокаРезультат, ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонструкторВыраженияВКовычкахЗакрыт(Знач Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	Если НЕ ДополнительныеПараметры.ВыделенаОбласть Тогда
		
		ЗаключатьВКовычки = НЕ ДополнительныеПараметры.ВставкаШаблона;
		Результат = ИТКВ_КодКлиентСервер.ЗначениеСтрока(Результат, ЗаключатьВКовычки);

	КонецЕсли;
	УстановитьВыделенныйТекст(Элемент, Результат, ДополнительныеПараметры.ГраницыВыделения);
	
	ПодключитьОбработчикОжиданияВосстановлениеФокуса(Форма);
	
КонецПроцедуры

Процедура КонструкторЗапросаЗакрыт(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	defaultView = ДокументHTML(Элемент);
	Если Не defaultView.queryMode Тогда
		Результат = ИТКВ_КодВызовСервера.Значение(Результат);
	КонецЕсли;
	
	ГраницыВыделения = ДополнительныеПараметры.ГраницыВыделения;
	Если ГраницыВыделения = Неопределено Тогда
		УстановитьТекст(Форма, Элемент, Результат);
	Иначе
		УстановитьВыделенныйТекст(Элемент, Результат, ГраницыВыделения);
	КонецЕсли;
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	Если Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаСобытий(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка, ОповещениеМодификации = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Событие = ДанныеСобытия.Event.eventData1C;
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = Событие.event;
	ПараметрыСобытия = Событие.params;
	
	Если ИмяСобытия = "EVENT_GET_METADATA" Тогда
		
		ОбработкаСобытияGET_METADATA(Элемент, ПараметрыСобытия);
		
	ИначеЕсли ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
		
		Форма.Модифицированность = Истина;
		
		Если ОповещениеМодификации <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеМодификации);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "EVENT_ON_LINK_CLICK" Тогда
		
		ПерейтиПоНавигационнойСсылке(ПараметрыСобытия.href);
		
	ИначеЕсли ИмяСобытия = "EVENT_GET_DEFINITION" Тогда
		
		ОткрытьКодМодуля(ПараметрыСобытия.module, ПараметрыСобытия.word);
		
	ИначеЕсли ИмяСобытия = "EVENT_QUERY_CONSTRUCT"
				ИЛИ ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
		
		ОткрытьКонструкторВыражениеПриВставкеШаблона(Форма, Элемент, ИмяСобытия);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСравнение(Владелец, Текст1, Текст2, ТипЯзыка) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Текст1", Текст1);
	Параметры.Вставить("Текст2", Текст2);
	Параметры.Вставить("ТипЯзыка", ТипЯзыка);
	
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		ТолстыйКлиент = Истина;
	#Иначе
		ТолстыйКлиент = Ложь;
	#КонецЕсли
	Параметры.Вставить("ТолстыйКлиент", ТолстыйКлиент);
	
	ОткрытьФорму("ОбщаяФорма.ИТКВ_СравнениеТекстов", Параметры, Владелец, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура Сравнение(Элемент, ДвустороннееСравнение, Знач Текст) Экспорт
	
	defaultView = ДокументHTML(Элемент);
	
	// Нужно, иначе отключается сравнение https://github.com/salexdv/bsl_console/blob/master/docs/compare.md
	Если Текст = "" Тогда
		Текст = " ";
	КонецЕсли;
	
	defaultView.compare(Текст, ДвустороннееСравнение, Истина);
	
КонецПроцедуры

Процедура СледующееОтличие(Элемент) Экспорт
	
	defaultView = ДокументHTML(Элемент);
	defaultView.nextDiff();
	
КонецПроцедуры

Процедура ПредыдущееОтличие(Элемент) Экспорт
	
	defaultView = ДокументHTML(Элемент);
	defaultView.previousDiff();
	
КонецПроцедуры

Функция ГраницыВыделения(Элемент) Экспорт
	
	Результат = ИТКВ_РедакторКодаКлиентСервер.ПустойГраницыВыделения();
	Если ТребуетсяИнициализация(Элемент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		ГраницыВыделения = ДокументHTML(Элемент).getSelection();
		Результат.НачалоКолонки = ГраницыВыделения.startColumn;
		Результат.КонецКолонки = ГраницыВыделения.endColumn;
		Результат.НачалоСтроки = ГраницыВыделения.startLineNumber;
		Результат.КонецСтроки = ГраницыВыделения.endLineNumber;
		
	Иначе
		
		Элемент.ПолучитьГраницыВыделения(Результат.НачалоСтроки, Результат.НачалоКолонки, Результат.КонецСтроки, Результат.КонецКолонки);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура УстановитьГраницыВыделения(Элемент, НачалоСтроки, НачалоКолонки, КонецСтроки = Неопределено, КонецКолонки = Неопределено) Экспорт
	
	Если ТребуетсяИнициализация(Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонецСтроки = Неопределено Тогда
		КонецСтроки = НачалоСтроки;
	КонецЕсли;
	
	Если КонецКолонки = Неопределено Тогда
		КонецКолонки = НачалоКолонки;
	КонецЕсли;
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.setSelection(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		defaultView.editor.focus();
		
	Иначе
		
		Элемент.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВыделение(Элемент, ГраницыВыделения) Экспорт
	
	УстановитьГраницыВыделения(Элемент, ГраницыВыделения.НачалоСтроки, ГраницыВыделения.НачалоКолонки, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки);

КонецПроцедуры

Процедура УстановитьВыделениеВесьТекст(Элемент, Текст) Экспорт
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	ПоследняяСтрока = СтрПолучитьСтроку(Текст, КоличествоСтрок);
	
	ГраницыВыделения = Новый Структура;
	ГраницыВыделения.Вставить("НачалоСтроки", 1);
	ГраницыВыделения.Вставить("НачалоКолонки", 1);
	ГраницыВыделения.Вставить("КонецСтроки", КоличествоСтрок);
	ГраницыВыделения.Вставить("КонецКолонки", СтрДлина(ПоследняяСтрока));
	
	УстановитьВыделение(Элемент, ГраницыВыделения);

КонецПроцедуры

Функция ТребуетсяПервоначальнаяИнициализация(Элемент) Экспорт
	
	ТипЯзыка = ИТКВ_РедакторКодаКлиентСервер.ТипЯзыка(Элемент);
	Возврат НЕ ЗначениеЗаполнено(ТипЯзыка);
	
КонецФункции

Процедура УстановитьФокус(Форма, Элемент) Экспорт
	
	Форма.ТекущийЭлемент = Элемент;
	Если ТребуетсяИнициализация(Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		
		defaultView = ДокументHTML(Элемент);
		defaultView.editor.focus();
		
		ПодключитьОбработчикОжиданияВосстановлениеФокуса(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Функция УстановленныеЗакладки(Элемент) Экспорт
	
	Результат = Новый Массив;
	Если НЕ (ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент)
			И Инициализирован(Элемент)) Тогда
		Возврат Результат;
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	
	Закладки = defaultView.getBookmarks();
	Индекс = 0;
	Для Каждого Закладка Из Закладки Цикл
		
		НомерСтроки = Закладки[ИТКВ_Строки.ЧислоВСтроку(Индекс)];
		Результат.Добавить(НомерСтроки);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьЗакладки(Элемент, Закладки) Экспорт
	
	Если НЕ (ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент)
			И Инициализирован(Элемент)) Тогда
		Возврат;
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	defaultView.removeAllBookmarks();
	
	Для Каждого НомерСтроки Из Закладки Цикл
		defaultView.addBookmark(НомерСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОригинальныйТекст(Элемент, Текст) Экспорт
	
	Если НЕ (ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент)
			И Инициализирован(Элемент)) Тогда
		Возврат;
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	defaultView.setOriginalText(Текст, Истина);

КонецПроцедуры

Процедура ОбработкаДействияПерейтиПоСсылке(Ссылка) Экспорт
	
	ПерейтиПоНавигационнойСсылке(Ссылка);
	
КонецПроцедуры

Функция СостояниеРедактора(Элемент) Экспорт
	
	Если НЕ (ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент)
			И Инициализирован(Элемент)) Тогда
		Возврат "";
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	Результат = defaultView.saveViewState();
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьСостояниеРедактора(Элемент, Состояние) Экспорт
	
	Если НЕ (ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент)
			И Инициализирован(Элемент)) Тогда
		Возврат;
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	defaultView.restoreViewState(Состояние);
	
КонецПроцедуры

Процедура ВосстановлениеФокусаРедактора(Форма) Экспорт
	
	ЭлементРедактора = Форма.ТекущийЭлемент;
	Если НЕ ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(ЭлементРедактора) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементВременный = Неопределено;
	Для Каждого Элемент Из Форма.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы")
				И ИТКВ_ФормаКлиент.ЭлементВиден(Элемент) Тогда
			
			ЭлементВременный = Элемент;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементВременный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ЭлементВременный;
	Форма.ТекущийЭлемент = ЭлементРедактора;
	
КонецПроцедуры

Процедура ПодключитьОбработчикОжиданияВосстановлениеФокуса(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания(ИТКВ_ТуллкитКлиентСервер.Префикс() + "ПодключаемыйВосстановлениеФокусаРедактора", 0.1, Истина);
	
КонецПроцедуры

Процедура ПрименитьНастройкиРедактора(Элемент, Настройки) Экспорт
	
	Если НЕ ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	ПрименитьНастройкиРедактораКОбъекту(defaultView, Настройки);
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия <> ИТКВ_НастройкиКлиентСервер.ИмяСобытияНастройкиИзменены() Тогда
		Возврат;
	КонецЕсли;
		
	Элементы = НайтиЭлементыРедакторыMonaco(Форма);
	Если НЕ ЗначениеЗаполнено(Элементы) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиРедактора = ИТКВ_РедакторКодаВызовСервера.ЗагрузитьНастройкиРедактора();
	
	Для Каждого Элемент Из Элементы Цикл
		
		defaultView = ДокументHTML(Элемент);
		
		ПрименяемыеНастройки = ИТКВ_ОбщийКлиентСервер.СкопироватьОбъект(НастройкиРедактора);
		ФиксированныеНастройки = ФиксированныеНастройкиРедактора(Элемент);
		ЗаполнитьЗначенияСвойств(ПрименяемыеНастройки, ФиксированныеНастройки);
		
		ПрименитьНастройкиРедактораКОбъекту(defaultView, ПрименяемыеНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЭлементыРедакторыMonaco(Форма) Экспорт
	
	Результат = Новый Массив;
	
	Элементы = Форма.Элементы;
	Для Каждого Элемент Из Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ПолеФормы")
				И ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент)
				И Инициализирован(Элемент) Тогда
				
			Результат.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
			
	Возврат Результат;

КонецФункции

Функция ОписаниеМодуля(ПараметрыСобытия) Экспорт
	
	Если НЕ СтрНачинаетсяС(ПараметрыСобытия, "module") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ЧастиМодуля = СтрРазделить(ПараметрыСобытия, ".");
	Если ЧастиМодуля.Количество() = 2 Тогда
		
		// ПараметрыСобытия = "module._демозаметки"
		ТипМодуля = "";
		ТипОбъекта = "ОбщиеМодули";
		ИмяОбъекта = ЧастиМодуля[1];
		
	Иначе
		
		// ПараметрыСобытия = "module.manager.справочники._демоорганизации"
		ТипМодуля = ЧастиМодуля[1];
		ТипОбъекта = ЧастиМодуля[2];
		ИмяОбъекта = ЧастиМодуля[3];
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипМодуля", ТипМодуля);
	Результат.Вставить("ТипОбъекта", ТипОбъекта);
	Результат.Вставить("ИмяОбъекта", ИмяОбъекта);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеМодуляПерейтиКОпределению(Знач ИмяМодуля) Экспорт
	
	Если СтрНайти(ИмяМодуля, ".") Тогда
		
		ЧастиОписанияМодуля = СтрРазделить(ИмяМодуля, ".");

		ИмяОбъектаКоллекции = ЧастиОписанияМодуля[0];
		ТипОбъекта = ИТКВ_МетаданныеКлиентСерверПовтИсп.ИмяКоллекции(ИмяОбъектаКоллекции);
		
		ИмяМодуля = ЧастиОписанияМодуля[1];
		
		Если ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоОбщийМодуль(ИмяОбъектаКоллекции) Тогда
			ТипМодуля = "";
		Иначе
			
			ТипМодуля = ЧастиОписанияМодуля[2];
			Если ТипМодуля = "МодульОбъекта" Тогда
				
				ТипМодуля = "object";
				
			ИначеЕсли ТипМодуля = "МодульМенеджера" Тогда
				
				ТипМодуля = "manager";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТипОбъекта = "ОбщиеМодули";
		ТипМодуля = "";
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипМодуля", ТипМодуля);
	Результат.Вставить("ТипОбъекта", ТипОбъекта);
	Результат.Вставить("ИмяОбъекта", ИмяМодуля);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьПодсказкуВыгруженногоМодуля(Элемент, ОписаниеМодуля, ТекстМодуля) Экспорт
	
	ТипМодуля = ОписаниеМодуля.ТипМодуля;
	ТипОбъекта = ОписаниеМодуля.ТипОбъекта;
	
	defaultView = ДокументHTML(Элемент);
	ИмяОбъектаВ1С = ИТКВ_РедакторКодаВызовСервера.ИмяОбъектаМетаданныхВ1С(ТипОбъекта, ОписаниеМодуля.ИмяОбъекта);
	Если ЗначениеЗаполнено(ТипМодуля) Тогда
		
		ИмяКоллекцииMonaco = ИТКВ_РедакторКодаКлиентСерверПовтИсп.ИмяКоллекцииМетаданныхПоТипу(ТипОбъекта);
		ОбластьОбновления = СтрШаблон("%1.items.%2.%3", ИмяКоллекцииMonaco, ИмяОбъектаВ1С, ТипМодуля);
		ЗагруженоМетодов = defaultView.parseMetadataModule(ТекстМодуля, ОбластьОбновления);
		
	Иначе
		
		ЗагруженоМетодов = defaultView.parseCommonModule(ИмяОбъектаВ1С, ТекстМодуля, Ложь);
		
	КонецЕсли;
	
	Если ЗагруженоМетодов > 0 Тогда
		defaultView.triggerSuggestions();
	КонецЕсли;
	
КонецПроцедуры
	
Процедура НачатьПолучениеТекстаВыгруженногоМодуля(ОписаниеОповещения, Путь, ОписаниеМодуля)
	
	ПолноеИмяФайла = ИТКВ_ФайлыКонфигурацииКлиентСервер.ПолноеИмяФайлаМодуля(Путь, ОписаниеМодуля);
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	
	ОписаниеОповещенияПроверкиСуществования = Новый ОписаниеОповещения("ПолучениеТекстаВыгруженногоМодуляЗаконченаПроверкаСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещенияПроверкиСуществования);
	
КонецПроцедуры

Процедура ПолучениеТекстаВыгруженногоМодуляЗаконченаПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ЧтениеТекста = Новый ЧтениеТекста(ДополнительныеПараметры.ПолноеИмяФайла);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ТекстМодуля);
	
КонецПроцедуры

Функция ЗаголовокВыгруженногоМодуля(ОписаниеМодуля) Экспорт
	
	Если ЗначениеЗаполнено(ОписаниеМодуля.ТипМодуля) Тогда
		Результат = СтрШаблон("%1.%2 (%3)", ОписаниеМодуля.ТипОбъекта, ОписаниеМодуля.ИмяОбъекта, ОписаниеМодуля.ТипМодуля);
	Иначе
		Результат = СтрШаблон("%1.%2", ОписаниеМодуля.ТипОбъекта, ОписаниеМодуля.ИмяОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура АктивироватьСтрокуПоиска(Форма, Элемент, СтрокаПоиска) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Текст(Форма, Элемент.Имя);
	
	НомерСимвола = СтрНайти(Текст, СтрокаПоиска);
	Если НомерСимвола = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Начало = ИТКВ_РедакторКодаКлиентСервер.КурсорПоНомеруСимвола(Текст, НомерСимвола);
	
	ИТКВ_РедакторКодаКлиент.УстановитьГраницыВыделения(Элемент, Начало.НомерСтроки, Начало.НомерКолонки, Начало.НомерСтроки, Начало.НомерКолонки + СтрДлина(СтрокаПоиска));
	
	defaultView = ДокументHTML(Элемент);
	defaultView.openSearchWidget();
	
КонецПроцедуры

Процедура ОткрытьКодМодуля(ИмяМодуля, ПерейтиК = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяМодуля) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгруженныеФайлы = ИТКВ_ФайлыКонфигурацииВызовСервера.ПутьКФайлам();
	Если НЕ ЗначениеЗаполнено(ВыгруженныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМодуля = ОписаниеМодуляПерейтиКОпределению(ИмяМодуля);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеМодуля", ОписаниеМодуля);
	ДополнительныеПараметры.Вставить("ПерейтиК", ПерейтиК);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОткрытиеКодаМодуля", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПолучениеТекстаВыгруженногоМодуля(ОписаниеОповещения, ВыгруженныеФайлы, ОписаниеМодуля);
	
КонецПроцедуры

Процедура НачатьОткрытиеКодаМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеМодуля = ДополнительныеПараметры.ОписаниеМодуля;
	ПерейтиК = ДополнительныеПараметры.ПерейтиК;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Редактирование", Ложь);
	ДополнительныеПараметры.Вставить("ПерейтиК", ПерейтиК);
	
	ЗаголовокФормы = ЗаголовокВыгруженногоМодуля(ОписаниеМодуля);
	ОткрытьРедактированиеКодаВОтдельномОкне(ЗаголовокФормы, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОткрытьРедактированиеКодаВОтдельномОкне(Заголовок, Код, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Владелец = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Владелец");
	ПерейтиК = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ПерейтиК");
	НомерСтроки = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "НомерСтроки");
	Редактирование = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Редактирование", Истина);
	ОписаниеОповещенияОЗакрытии = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "ОписаниеОповещенияОЗакрытии");
	
	Параметры = Новый Структура;
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("Код", Код);
	Параметры.Вставить("Редактирование", Редактирование);
	Параметры.Вставить("ПерейтиК", ПерейтиК);

	Если Владелец = Неопределено Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	Иначе
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	КлючУникальности = Заголовок;
	ОткрытьФорму("ОбщаяФорма.ИТКВ_РедактированиеКода", Параметры, Владелец, КлючУникальности, , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна);
	
КонецПроцедуры

Функция ПерейтиКОпределениюВМодуле(Форма, ИмяМетода) Экспорт
	
	Элемент = Форма.ТекущийЭлемент;
	Если НЕ ИТКВ_РедакторКодаКлиентСервер.ЭтоРедакторКодаMonaco(Элемент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	Возврат defaultView.goToFuncDefinition(ИмяМетода);
	
КонецФункции

Процедура НачатьОбработкуПодсказкиВыгруженногоМодуля(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ДополнительныеПараметры.Элемент;
	ОписаниеМодуля = ДополнительныеПараметры.ОписаниеМодуля;
	
	ОбработатьПодсказкуВыгруженногоМодуля(Элемент, ОписаниеМодуля, Результат);
	
КонецПроцедуры

Процедура ЗафиксироватьИзменения(Элемент) Экспорт
	
	defaultView = ДокументHTML(Элемент);
	Текст = defaultView.getText();
	УстановитьОригинальныйТекст(Элемент, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Распаковать(ДополнительныеПараметры)
	
	#Если НЕ ВебКлиент Тогда
		
		// Разворачиваем пакет
		ДанныеПакета = ИТКВ_РедакторКодаВызовСервера.ДанныеПакетаУлучшенногоРедактораКода();
		
		ПолноеИмяФайла = ПолучитьИмяВременногоФайла("zip");
		
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиФайлаПакета", ЭтотОбъект, ДополнительныеПараметры);
		
		ДанныеПакета.НачатьЗапись(ОписаниеОповещения, ПолноеИмяФайла);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОткрытьКонструкторВыраженияВКовычках(Форма, Элемент, Имя, Текст, ВставкаШаблона = Ложь)
	
	Многострочный = Истина;
	Если СтрНайти(Имя, "КонструкторФорматнойСтроки") Тогда
		Многострочный = Ложь;
	КонецЕсли;
	Результат = СтрокаВыражениеВКовычках(Элемент, Текст, Многострочный);
	
	СтрокаРезультат = Результат.Строка;
	СоздатьНовую = НЕ (ЗначениеЗаполнено(СтрокаРезультат)
						ИЛИ ВставкаШаблона);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ИмяКонструктора", Имя);
	ДополнительныеПараметры.Вставить("ГраницыВыделения", Результат.Граница);
	ДополнительныеПараметры.Вставить("Новый", СоздатьНовую);
	ДополнительныеПараметры.Вставить("ВставкаШаблона", ВставкаШаблона);
	ДополнительныеПараметры.Вставить("ВыделенаОбласть", Результат.ВыделенаОбласть);
	ДополнительныеПараметры.Вставить("Результат", СтрокаРезультат);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КонструкторВыраженияВКовычкахВопросЗакрыт", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СоздатьНовую Тогда
		
		ТекстВопроса = "";
		Если СтрНайти(Имя, "КонструкторФорматнойСтроки") Тогда
			
			ТекстВопроса = НСтр("ru = 'Форматная строка не найдена.
					             |Создать новую форматную строку?';
								 |en = 'Format string not found.
					             |Create a new format string?'");
			
		ИначеЕсли СтрНайти(Имя, "КонструкторСтрокиНаРазныхЯзыках") Тогда
			
			ТекстВопроса = НСтр("ru = 'Набор строк на разных языках не найден.
                                 |Создать новый набор строк?';
								 |en = 'The rowset in different languages was not found.
                                 |Create a new rowset?'");
			
		ИначеЕсли СтрНайти(Имя, "КонструкторЗапросаВКоде") Тогда
			
			ТекстВопроса = НСтр("ru = 'Текст запроса не найден.
                                 |Создать новый запрос?';
								 |en = 'The request text was not found.
                                 |Create a new request?'");
			
		КонецЕсли;
		
		ПоказатьВопрос(ОповещениеОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ИТКВ_КонсольРазработчикаКлиентСервер.Представление());
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьКонструкторВыражениеПриВставкеШаблона(Форма, Элемент, ИмяСобытия)
	
	ИмяКонструктора = Неопределено;
	Если ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
		
		ИмяКонструктора = Элемент.Имя + "_" + "КонструкторЗапросаВКоде";
		
	ИначеЕсли ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
		
		ИмяКонструктора = Элемент.Имя + "_" + "КонструкторФорматнойСтроки";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяКонструктора) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Текст(Форма, Элемент.Имя);
	ОткрытьКонструкторВыраженияВКовычках(Форма, Элемент, ИмяКонструктора, Текст, Истина);
	
КонецПроцедуры

Функция ДокументHTML(Объект)
	
	Если ТипЗнч(Объект) = Тип("ВнешнийОбъект") Тогда
		Результат = Объект;
	Иначе
		
		ОбъектДокумент = Объект.Документ;
		Если ОбъектДокумент = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат = ОбъектДокумент.defaultView;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВставкаСсылкиНаОбъектБД(Форма, Элемент)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВставкаСсылкиНаОбъектЗакончена", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыделенныйТекст = ВыделенныйТекст(Элемент);
	ИТКВ_ФормаКлиент.ОткрытьВставкуСсылкиНаОбъектБД(Элемент, ОписаниеОповещения, ВыделенныйТекст);
	
КонецПроцедуры

Процедура ОбработкаВыделенногоТекстаПоАлгоритму(Элемент, Текст, ТипАлгоритма)
	
	ГраницыВыделения = ГраницыВыделения(Элемент);
	
	Если ГраницыВыделения.КонецКолонки = 1 И ГраницыВыделения.НачалоСтроки <> ГраницыВыделения.КонецСтроки Тогда
		ГраницыВыделения.КонецСтроки = ГраницыВыделения.КонецСтроки - 1;
	КонецЕсли;
	
	ВыделенныйТекст = "";
	Для НомерСтроки = ГраницыВыделения.НачалоСтроки По ГраницыВыделения.КонецСтроки Цикл
		
		ВыделенныйТекст = ВыделенныйТекст + СтрПолучитьСтроку(Текст, НомерСтроки);
		Если НомерСтроки <> ГраницыВыделения.КонецСтроки Тогда
			ВыделенныйТекст = ВыделенныйТекст + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйВыделенныйФрагмент = ОбработкаТекстаПоАлгоритму(ВыделенныйТекст, ТипАлгоритма);
	
	ДлинаПоследнейСтроки = СтрДлина(СтрПолучитьСтроку(Текст, ГраницыВыделения.КонецСтроки));
	УстановитьГраницыВыделения(Элемент, ГраницыВыделения.НачалоСтроки, 1, ГраницыВыделения.КонецСтроки, ДлинаПоследнейСтроки + 1);
	
	УстановитьВыделенныйТекст(Элемент, НовыйВыделенныйФрагмент);
	
	ДлинаПоследнейСтроки = СтрДлина(СтрПолучитьСтроку(НовыйВыделенныйФрагмент, СтрЧислоСтрок(НовыйВыделенныйФрагмент)));
	УстановитьГраницыВыделения(Элемент, ГраницыВыделения.НачалоСтроки, 1, ГраницыВыделения.КонецСтроки, ДлинаПоследнейСтроки + 1);
	
КонецПроцедуры

Функция ОбработкаТекстаПоАлгоритму(Текст, ТипАлгоритма)
	
	Результат = "";
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	
	Если ТипАлгоритма = ИТКВ_Перечисления.АлгоритмОбработкиТекстаЗакомментировать() Тогда
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			Результат = Результат + "//" + СтрПолучитьСтроку(Текст, НомерСтроки);
			
			Если НомерСтроки <> КоличествоСтрок Тогда
				Результат = Результат + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипАлгоритма = ИТКВ_Перечисления.АлгоритмОбработкиТекстаУбратьКомментарии() Тогда
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
			
			// Ищем //
			ЗаменятьБлок = Истина;
			ПозицияСимволовКомментария = СтрНайти(Строка, "//");
			Если ПозицияСимволовКомментария <> 0 Тогда
				
				// Проверим есть ли другие значимые символы перед // может быть строка "Поле1 КАК Поле1, //Поле1"
				Для Счетчик = 1 По ПозицияСимволовКомментария - 1 Цикл
					
					Если СтрНайти(" " + Символы.Таб, Сред(Строка, Счетчик, 1)) = 0 Тогда
						
						ЗаменятьБлок = Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ЗаменятьБлок = Ложь;
				
			КонецЕсли;
			
			Если ЗаменятьБлок Тогда
				Блок = Лев(Строка, ПозицияСимволовКомментария - 1) + Сред(Строка, ПозицияСимволовКомментария + 2);
			Иначе
				Блок = Строка;
			КонецЕсли;
			Результат = Результат + Блок;
			
			Если НомерСтроки <> КоличествоСтрок Тогда
				Результат = Результат + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипАлгоритма = ИТКВ_Перечисления.АлгоритмОбработкиТекстаПереносЗапросаИзКонфигуратора() Тогда
		
		Результат = СтрЗаменить(СокрЛП(Текст), "|", "");
		Результат = СтрЗаменить(Результат, """;", "");
		Результат = СтрЗаменить(Результат, """ВЫБРАТЬ", "ВЫБРАТЬ");
		Результат = СтрЗаменить(Результат, """SELECT", "SELECT");
		Результат = СтрЗаменить(Результат, Символ(34) + Символ(34), Символ(34));
		
		Если СтрЗаканчиваетсяНа(Результат, Символ(34)) Тогда
			Результат = Лев(Результат, СтрДлина(Результат) - 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьЭлементыКонтекстногоМеню(Группа, ДоступноРедактирование)
	
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ОбновитьЭлементыКонтекстногоМеню(Элемент, ДоступноРедактирование);
			Продолжить;
		КонецЕсли;
			
		Элемент.Видимость = ДоступноРедактирование
								ИЛИ СтрНайти(Элемент.Имя, "ВыделитьВсе")
								ИЛИ СтрНайти(Элемент.Имя, "Копировать");
								
	КонецЦикла;

КонецПроцедуры

Процедура ПоделитсяЧерезСервисКода(Код, ТипЯзыка)
	
	// Обращение к сервису
	БлокКода = Новый Структура;
	БлокКода.Вставить("code", Код);
	
	Если ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораЗапросы() Тогда
		РежимЗапрос = 1;
	Иначе
		РежимЗапрос = 0;
	КонецЕсли;
	БлокКода.Вставить("query_mode", РежимЗапрос);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Shared", БлокКода);
	
	ТелоЗапроса = ИТКВ_ОбщийКлиентСервер.КоллекциюВJSONСтроку(ПараметрыЗапроса);

	Соединение = Новый HTTPСоединение("paste1c.ru", , , , , 5);
	Запрос = Новый HTTPЗапрос("paste");
	Запрос.Заголовки.Вставить("Content-Type", "application/json");	
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Ошибка = Неопределено;
	Ссылка = Неопределено;
	
	Попытка
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		JSONОтвет = Ответ.ПолучитьТелоКакСтроку();
		КоллекцияОтвет = ИТКВ_ОбщийКлиентСервер.JSONСтрокуВКоллекцию(JSONОтвет);
		
		Ссылка = КоллекцияОтвет["full_url"];
		
	Исключение
		
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());

	КонецПопытки;
	
	// Копирование в буфер, оповещение
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ИТКВ_БуферОбменаКлиент.Копировать(Ссылка);
		
		Текст = НСтр("ru = 'Ссылка на код скопирована в буфер обмена'; en = 'Code link copied to clipboard'");
		Пояснение = Ссылка;
		ДействиеПриНажатии = Новый ОписаниеОповещения("ОбработкаДействияПерейтиПоСсылке", ЭтотОбъект, Ссылка);
		Картинка = БиблиотекаКартинок.ИТКВ_КопироватьВБуферОбмена;
		Статус = СтатусОповещенияПользователя.Информация;
		
	Иначе
		
		Текст = НСтр("ru = 'Не удалось подключится к сервису paste1c.ru'; en = 'Failed to connect to paste1c.ru service'");
		Пояснение = Ошибка;
		ДействиеПриНажатии = Неопределено;
		Картинка = БиблиотекаКартинок.ИТКВ_ПредупреждениеВажное;
		Статус = СтатусОповещенияПользователя.Важное;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(Текст, ДействиеПриНажатии, Пояснение, Картинка, Статус);
	
КонецПроцедуры

Функция СтрокаВыражениеВКовычках(Элемент, Текст, Многострочный = Истина)
	
	Граница = ИТКВ_РедакторКодаКлиентСервер.ПустойГраницыВыделения();
	СимволГраница = ИТКВ_Строки.СимволКовычки();
	ГраницыВыделения = ГраницыВыделения(Элемент);
	ВыделенаОбласть = ГраницыВыделения.НачалоСтроки <> ГраницыВыделения.КонецСтроки
							ИЛИ ГраницыВыделения.НачалоКолонки <> ГраницыВыделения.КонецКолонки;
	
	Если ВыделенаОбласть
			ИЛИ ПустаяСтрока(Текст) Тогда
			
		ЗаполнитьЗначенияСвойств(Граница, ГраницыВыделения);
		Строка = ТекстПоГранице(Текст, Граница, ВыделенаОбласть);
		
	Иначе
		
		НомерСтроки	= ГраницыВыделения.КонецСтроки;
		НомерКолонки = ГраницыВыделения.КонецКолонки;
		
		НомерСимвола = ИТКВ_РедакторКодаКлиентСервер.НомерСимволаПоКурсору(Текст, НомерСтроки, НомерКолонки);

		НомерСимволаНачало = ПоискСтрокиОграниченнойСимволом(Текст, СимволГраница, НомерСимвола, -1, Многострочный);
		НомерСимволаКонец = ПоискСтрокиОграниченнойСимволом(Текст, СимволГраница, НомерСимвола, 1, Многострочный);
		
		НоваяСтрока = Ложь;
		Если НомерСимволаНачало = Неопределено
				ИЛИ НомерСимволаКонец = Неопределено Тогда
				
			НоваяСтрока = Истина;
				
		Иначе
			
			Строка = Сред(Текст, НомерСимволаНачало, НомерСимволаКонец - НомерСимволаНачало);
			Если КорректнаяСтрокаВКовычкахИзКода(Строка) Тогда
					
				Строка = ИТКВ_КодКлиентСервер.СтрокуВЗначение(Строка);
				
				КурсорНачала = ИТКВ_РедакторКодаКлиентСервер.КурсорПоНомеруСимвола(Текст, НомерСимволаНачало);
				Граница.НачалоСтроки = КурсорНачала.НомерСтроки;
				Граница.НачалоКолонки = КурсорНачала.НомерКолонки;
				
				КурсорКонца = ИТКВ_РедакторКодаКлиентСервер.КурсорПоНомеруСимвола(Текст, НомерСимволаКонец);
				Граница.КонецСтроки = КурсорКонца.НомерСтроки;
				Граница.КонецКолонки = КурсорКонца.НомерКолонки;
				
			Иначе
				НоваяСтрока = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоваяСтрока Тогда
			
			Строка = "";
			ЗаполнитьЗначенияСвойств(Граница, ГраницыВыделения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Граница", Граница);
	Результат.Вставить("ВыделенаОбласть", ВыделенаОбласть);
	Результат.Вставить("Строка", Строка);
	
	Возврат Результат;
	
КонецФункции

Функция ПоискСтрокиОграниченнойСимволом(Текст, СимволГраница, Номер, Направление = 1, Многострочный) Экспорт
	
	Результат = Номер;
	
	Если Направление = 1 Тогда
		НомерСимвола = Номер;
		ГраницаСимволов = СтрДлина(Текст);
	Иначе
		НомерСимвола = Номер - 1;
		ГраницаСимволов = 1;
	КонецЕсли;
	
	Символ = Неопределено;
	Пока ?(Направление = 1, НомерСимвола <= ГраницаСимволов, НомерСимвола >= ГраницаСимволов) Цикл
		
		Символ = Сред(Текст, НомерСимвола, 1);
		Если НЕ Многострочный
				И Символ = Символы.ПС Тогда
			Прервать;
		КонецЕсли;
		
		Если Символ <> СимволГраница Тогда
			НомерСимвола = НомерСимвола + Направление;
			Продолжить;
		КонецЕсли;
		
		Если НомерСимвола = ГраницаСимволов Тогда
			СледующийСимвол = Неопределено;
		Иначе
			СледующийСимвол = Сред(Текст, НомерСимвола + Направление, 1);
		КонецЕсли;
		
		Если СледующийСимвол = СимволГраница Тогда
			
			НомерСимвола = НомерСимвола + 2 * Направление;
			
		Иначе
			
			Результат = НомерСимвола;
			Если Направление = 1 Тогда
				Результат = Результат + 1;
			КонецЕсли;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Символ <> СимволГраница Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КорректнаяСтрокаВКовычкахИзКода(Строка)
	
	Результат = Истина;
	
	КоличествоСтрок = СтрЧислоСтрок(Строка);
	Для НомерСтроки = 2 По КоличествоСтрок Цикл
		
		ТекстСтроки = СокрЛ(СтрПолучитьСтроку(Строка, НомерСтроки));
		Если НЕ СтрНачинаетсяС(ТекстСтроки, "|") Тогда
			
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПоГранице(Текст, Граница, ВыделенаОбласть = Ложь)
	
	Строка = СтрПолучитьСтроку(Текст, Граница.НачалоСтроки);
	Если Граница.НачалоСтроки = Граница.КонецСтроки Тогда // Границы в рамках одной строки
		
		Если ВыделенаОбласть Тогда
			Результат = Сред(Строка, Граница.НачалоКолонки, Граница.КонецКолонки - Граница.НачалоКолонки);
		Иначе
			Результат = Сред(Строка, Граница.НачалоКолонки - 1, Граница.КонецКолонки - Граница.НачалоКолонки - 1);
		КонецЕсли;
		Возврат Результат
		
	КонецЕсли;
	
	Результат = Сред(Строка, Граница.НачалоКолонки + 1);
	
	Для НомерСтроки = Граница.НачалоСтроки + 1 По Граница.КонецСтроки - 1 Цикл
		
		Строка = СтрПолучитьСтроку(Текст, Граница.НачалоСтроки);
		Результат = Результат + Символы.ПС + Строка;
		
	КонецЦикла;
	
	Строка = СтрПолучитьСтроку(Текст, Граница.КонецСтроки);
	Результат = Результат + Лев(Строка, Граница.КонецКолонки - 1);
	
	Возврат Результат;
	
КонецФункции

Процедура ПрименитьНастройкиРедактораКОбъекту(defaultView, Настройки)
	
	defaultView.minimap(Настройки.ОтображатьКарту);
	
	РежимКод = (defaultView.getCurrentLanguageId() = "bsl");
	
	Если РежимКод Тогда
		
		ПутьКФайлуШаблоновКода = ИТКВ_ОбщийКлиентСервер.Свойство(Настройки, "ПутьКФайлуШаблоновКода");
		Если ЗначениеЗаполнено(ПутьКФайлуШаблоновКода) Тогда
			
			ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуШаблоновКода);
			ТекстФайлаШаблонов = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
			defaultView.parseSnippets(ТекстФайлаШаблонов);
			
		Иначе
			
			defaultView.setDefaultSnippets();
			
		КонецЕсли;
		
	КонецЕсли;

	defaultView.switchLang(Настройки.ЯзыкПрограммирования);
	
	Если Настройки.ОтображатьНомераСтрок Тогда
		defaultView.showLineNumbers();
	Иначе
		defaultView.hideLineNumbers();
	КонецЕсли;
	
	defaultView.renderWhitespace(Настройки.ОтображатьПробелыИТабуляции);
	
	Если Настройки.ОтображатьСостояние Тогда
		defaultView.showStatusBar();
	Иначе
		defaultView.hideStatusBar();
	КонецЕсли;
	
	// Установка шрифта
	Шрифт = Настройки.Шрифт;
	РазмерШрифта = Шрифт.Размер;
	
	defaultView.setFontFamily(Шрифт.Имя);
	defaultView.setFontSize(РазмерШрифта);
	
	Если Шрифт.Полужирный = Истина Тогда
		Жирность = "bold";
	Иначе
		Жирность = "normal";
	КонецЕсли;
	defaultView.setFontWeight(Жирность);
		
	Интервал = 1.35;
	defaultView.setLineHeight(РазмерШрифта * Интервал);
	
КонецПроцедуры

Функция ФиксированныеНастройкиРедактора(Элемент)
	
	ДополнительнаяИнформация = ИТКВ_РедакторКодаКлиентСервер.ДополнительнаяИнформация(Элемент);
	
	Результат = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительнаяИнформация, "ФиксированныеНастройки", Новый Структура);
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаСобытияGET_METADATA(Элемент, ПараметрыСобытия)
	
	МетаданныеСобытия = ПараметрыСобытия.metadata;
	ТриггерСобытия = ПараметрыСобытия.trigger;
	
	ОписаниеМодуля = ОписаниеМодуля(МетаданныеСобытия);
	Если ЗначениеЗаполнено(ОписаниеМодуля) Тогда
		
		ВыгруженныеФайлы = ИТКВ_ФайлыКонфигурацииВызовСервера.ПутьКФайлам();
		Если НЕ ЗначениеЗаполнено(ВыгруженныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ДополнительныеПараметры.Вставить("ОписаниеМодуля", ОписаниеМодуля);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОбработкуПодсказкиВыгруженногоМодуля", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПолучениеТекстаВыгруженногоМодуля(ОписаниеОповещения, ВыгруженныеФайлы, ОписаниеМодуля);

		Возврат;
		
	КонецЕсли;
	
	defaultView = ДокументHTML(Элемент);
	
	ЭлементыМетаданных = ИТКВ_РедакторКодаВызовСервера.ОбработкаСобытияПолученияМетаданных(МетаданныеСобытия);
	Для Каждого ЭлементМетаданных Из ЭлементыМетаданных Цикл
		
		ОписаниеМетаданных = ЭлементМетаданных.ОписаниеМетаданных;
		ОбластьОбновления = ЭлементМетаданных.ОбластьОбновления;
		
		Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
			defaultView.updateMetadata(ОписаниеМетаданных, ОбластьОбновления);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТриггерСобытия = "suggestion" Тогда
		
		defaultView.triggerSuggestions();
		
	ИначеЕсли ТриггерСобытия = "snippet"  Тогда

		defaultView.updateSnippetByGUID(ПараметрыСобытия.snippet_guid);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РежимЯзыкаМонако(ТипЯзыка)
	
	Если ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораВстроенный() Тогда
		
		Результат = "bsl";
		
	ИначеЕсли ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораЗапросы() Тогда
		
		Результат = "bsl_query";
		
	ИначеЕсли ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораXML() Тогда
		
		Результат = "xml";
    ИначеЕсли ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораXML() Тогда
		
		Результат = "xml"
		
	ИначеЕсли ТипЯзыка = ИТКВ_Перечисления.ТипЯзыкаРедактораВыраженияСКД() Тогда
		
		Результат = "dcs_query";
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

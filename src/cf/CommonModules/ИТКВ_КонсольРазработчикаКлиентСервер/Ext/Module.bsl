#Область ПрограммныйИнтерфейс

// Возвращает представление
//
// Возвращаемое значение:
//   Строка	- Представление
//
Функция Представление() Экспорт
	
	Возврат НСтр("ru = 'Консоль разработчика'; en = 'Developer console'");
	
КонецФункции

Процедура НовыйРезультат(Результат) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Пустой", Истина);
	Результат.Вставить("UID");
	Результат.Вставить("Адрес");
	Результат.Вставить("АдресДанныхРасшифровки");
	Результат.Вставить("АдресСхемыКомпоновкиДанных");
	Результат.Вставить("АдресИсполняемыхЗапросовСКД");
	Результат.Вставить("РежимВыполнения");
	Результат.Вставить("ВсеСтрокиВыведены");
	Результат.Вставить("АктуаленПоСтроке");
	Результат.Вставить("IDПроцесса");
	Результат.Вставить("НачалоВыполнения");
	Результат.Вставить("ОкончаниеВыполненияНаКлиенте");
	Результат.Вставить("ОписанияТиповПараметров");
	
КонецПроцедуры

Процедура ЗаполнениеДанныхСтроки(Строка, Имя, Тип, UID = Неопределено, НачальныеДанные = Неопределено, Картинка = Неопределено) Экспорт
	
	// Заполнение данных строки
	Если ЗначениеЗаполнено(UID) Тогда
		Строка.UID = UID;
	Иначе
		Строка.UID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Строка.Имя	= Имя;
	Строка.Тип	= Тип;
	
	Если ИТКВ_КонсольРазработчикаДанныеКлиентСервер.ЭтоОдинИзТиповСтрокиСодержащийСохраняемыеСтроки(Тип) Тогда
		Строка.Развернуто = Истина;
	КонецЕсли;
	
	Если Тип = ИТКВ_Перечисления.ЭлементДанныхГруппа() Тогда
		
		Строка.Картинка = БиблиотекаКартинок.ИТКВ_Папка;
		
	ИначеЕсли Тип = ИТКВ_Перечисления.ЭлементДанныхЗапрос() Тогда
		
		Строка.Картинка = БиблиотекаКартинок.ИТКВ_Запрос;
		
	ИначеЕсли Тип = ИТКВ_Перечисления.ЭлементДанныхСхемаКомпоновкиДанных() Тогда
		
		Строка.Картинка = БиблиотекаКартинок.ИТКВ_СхемаКомпоновкиДанных;
		
	ИначеЕсли Тип = ИТКВ_Перечисления.ЭлементДанныхПользовательскаяНастройкаСКД() Тогда
		
		Строка.Картинка = БиблиотекаКартинок.ИТКВ_ПользовательскаяНастройкаСКД;
		
	ИначеЕсли Тип = ИТКВ_Перечисления.ЭлементДанныхВариантОтчетаСКД() Тогда
		
		Строка.Картинка = БиблиотекаКартинок.ИТКВ_ВариантОтчетаСКД;
		
	ИначеЕсли Тип = ИТКВ_Перечисления.ЭлементДанныхКод() Тогда
		
		Строка.Картинка = БиблиотекаКартинок.ИТКВ_Код;
		
	ИначеЕсли Тип = ИТКВ_Перечисления.ЭлементДанныхПодзапрос() Тогда
		
		Строка.Картинка = Картинка;
		
	КонецЕсли;
	
	Если НачальныеДанные = Неопределено Тогда
		НачальныеДанные = ИТКВ_КонсольРазработчикаДанныеКлиентСервер.НовыйЭлемент(Тип);
	КонецЕсли;
	
	Строка.Данные = НачальныеДанные;
	
КонецПроцедуры

Функция СтрокиДереваДанных(Строка, ОтборТип) Экспорт
	
	Результат = Новый Массив;
	Для Каждого ВложеннаяСтрока Из Строка.ПолучитьЭлементы() Цикл
		
		Если ВложеннаяСтрока.Тип = ОтборТип Тогда
			
			Результат.Добавить(ВложеннаяСтрока);
			
		ИначеЕсли ВложеннаяСтрока.Тип = ИТКВ_Перечисления.ЭлементДанныхГруппа() Тогда
			
			СтрокиГруппы = СтрокиДереваДанных(ВложеннаяСтрока, ОтборТип);
			Для Каждого СтрокаВГруппе Из СтрокиГруппы Цикл
				
				Результат.Добавить(СтрокаВГруппе);
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает наименование выполняемой операции по режиму
//
// Параметры:
//  Режим  - Перечисление.ИТКВ_РежимВыполненияЗапроса, Перечисление.ИТКВ_РежимВыполненияСхемыКомпоновкиДанных - Режим
//
// Возвращаемое значение:
//   Строка - Наименование выполняемой операции
//
Функция НаименованиеВыполняемойОперации(Режим) Экспорт
	
	Результат = Неопределено;
	
	Если Режим = ИТКВ_Перечисления.РежимВыполненияЗапросаВыполнение() Тогда
		
		Результат = НСтр("ru = 'Выполнение запроса'; en = 'Query execution'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияЗапросаСРезультатамиВременныхТаблиц() Тогда
		
		Результат = НСтр("ru = 'Выполнение запроса (результат с временными таблицами)'; en = 'Query execution (result with temporary tables)'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияЗапросаЗамер() Тогда
		
		Результат = НСтр("ru = 'Замер времени выполнения запроса'; en = 'Measurement of request execution time'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияСКДВыполнение() Тогда
		
		Результат = НСтр("ru = 'Выполнение схемы компоновки данных'; en = 'Execution of the data composition scheme'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияСКДЗамер() Тогда
		
		Результат = НСтр("ru = 'Замер времени выполнения схемы компоновки данных'; en = 'Measurement of execution time of data composition scheme'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияСКДПолучениеИсполняемыхЗапросов() Тогда
		
		Результат = НСтр("ru = 'Получение исполняемых запросов СКД'; en = 'Receiving executable queries DCS'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияКодаВыполнение() Тогда
		
		Результат = НСтр("ru = 'Выполнение кода'; en = 'Execution code'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияКодаНаКлиенте() Тогда
		
		Результат = НСтр("ru = 'Выполнение кода на клиенте'; en = 'Executing code on the client'");
		
	ИначеЕсли Режим = ИТКВ_Перечисления.РежимВыполненияКодаЗамер() Тогда
		
		Результат = НСтр("ru = 'Замер времени выполнения кода'; en = 'Measuring code execution time'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоСложныйПараметр(ТипЗначения) Экспорт
	
	Возврат (ТипЗначения = Тип("Структура"));
	
КонецФункции

Функция КартинкаПараметраЗапроса(ТипЗначения) Экспорт
	
	Если ЭтоСложныйПараметр(ТипЗначения)
			И ТипЗначения.Вид = ИТКВ_Перечисления.СложныйПараметрЗапросаТаблицаЗначений() Тогда
		
		Результат = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
		
	Иначе
		
		Результат = ИТКВ_ТипыВызовСервера.КартинкаОписания(ТипЗначения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

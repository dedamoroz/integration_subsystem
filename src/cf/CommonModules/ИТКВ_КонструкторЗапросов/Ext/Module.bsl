#Область ПрограммныйИнтерфейс

// Задача 1
Функция МодульОбъектаFillSourcesItemsИначе(Source, Items) Экспорт
	
	Если ТипЗнч(Source) = Тип("ФиксированныйМассив") Then
		
		Items = Новый Массив;
		Для Индекс = 0 По Source.Количество() - 1 Цикл
			
			ОписаниеВнешнейТаблицы = Source[Индекс];
			
			Если ОписаниеВнешнейТаблицы.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоАдресВременногоХранилища(ОписаниеВнешнейТаблицы.Значение) Тогда
				ЗначениеВременнойТаблицы = ПолучитьИзВременногоХранилища(ОписаниеВнешнейТаблицы.Значение);
			Иначе
				ЗначениеВременнойТаблицы = ОписаниеВнешнейТаблицы.Значение;
			КонецЕсли;
			Items.Добавить(Новый Структура("Индекс, Ключ, Значение", Индекс, ОписаниеВнешнейТаблицы.Ключ, ЗначениеВременнойТаблицы));
			
		КонецЦикла;
		
		Результат = Истина;
		
	Иначе

		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Задача 1, 2
Процедура МодульОбъектаПослеAddSourceItem(Source, ItemsTree) Экспорт
	
	// Задача 1
	Если ТипЗнч(Source) = Тип("Структура") Тогда
	
		СтрокаВременнаяТаблица = ItemsTree.Add();
		СтрокаВременнаяТаблица["Type"] = 1;
		СтрокаВременнаяТаблица["Name"] = Source.Ключ;
		СтрокаВременнаяТаблица["Presentation"] = Source.Ключ;
		СтрокаВременнаяТаблица["Index"] = Source.Индекс;
		СтрокаВременнаяТаблица["Picture"] = 17;
		
		// Поля таблицы
		КолонкиВременнойТаблицы = Source.Значение.Колонки;
		Для Индекс = 0 По КолонкиВременнойТаблицы.Количество() - 1 Цикл
			
			ПолеВременнойТаблицы = КолонкиВременнойТаблицы[Индекс];
			
			СтрокаПоле = СтрокаВременнаяТаблица.GetItems().Add();
			СтрокаПоле["Type"] = 2;
			СтрокаПоле["Presentation"] = ПолеВременнойТаблицы.Имя;
			СтрокаПоле["Name"] = СтрШаблон("%1.%2", Source.Ключ, ПолеВременнойТаблицы.Имя);
			СтрокаПоле["ValueType"] = ПолеВременнойТаблицы.ТипЗначения;
			СтрокаПоле["Index"] = Индекс;
			СтрокаПоле["Picture"] = 22;
			
			// Задача 2
			СтрокаПоле[ИдентификаторКолонкиТипПоля()] = ИТКВ_Типы.КартинкаОписания(ПолеВременнойТаблицы.ТипЗначения);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Задача 1
Функция МодульОбъектаGetSourceВНачалеЦикла(Форма, Source, Indexes, Pos) Экспорт
	
	Если Indexes[Pos] = -1 Тогда
		
		Source = Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников()];
		Результат = Истина;
		
	Иначе
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Задача 1, 3, 6, 7, 15, 17, 20, 21, 22
Процедура ФормаОсновнаяПриСозданииНаСервереПередЗаполнением(Форма, СхемаЗапроса) Экспорт
	
	Элементы = Форма.Элементы;
	ИдентификаторВнешнихИсточников = ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников();
	
	Форма.Автозаголовок = Ложь;
	Форма.Заголовок = НСтр("ru = 'Конструктор запроса'; en = 'Query constructor'");
	
	ДобавитьКолонкуТипПоля(Форма, "AvailableTables");
	ДобавитьКолонкуТипПоля(Форма, "Sources");
	ДобавитьКолонкуТипПоля(Форма, "AllFieldsForGrouping");
	ДобавитьКолонкуТипПоля(Форма, "AllFieldsForConditions");
	ДобавитьКолонкуТипПоля(Форма, "AllFieldsForOrder");
	ДобавитьКолонкуТипПоля(Форма, "AllFieldsForIndex");
	ДобавитьКолонкуТипПоля(Форма, "AllFieldsForTotals");

	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("IsNestedQuery") Тогда // Не вложенный запрос
		
		Форма.Object[ИдентификаторВнешнихИсточников] = ИТКВ_ОбщийКлиентСервер.Свойство(Параметры, ИдентификаторВнешнихИсточников);
		
	Иначе
		
		// Задача 1
		// Инициализация внешних источников
		TempTablesNames = Форма.TempTablesNames;
		
		ЗначенияВнешнихИсточников = Новый Массив;
		Если Параметры.Свойство("Данные") Тогда
			
			Данные = Параметры.Данные;
			
			Для Каждого ОписаниеВнешнегоИсточника Из ИТКВ_КонсольРазработчика.ЗначенияВнешнихИсточников(Данные) Цикл
				
				Если ОписаниеВнешнегоИсточника.Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоАдресВременногоХранилища(ОписаниеВнешнегоИсточника.Значение) Тогда
					ТаблицаВнешнегоИсточника = ПолучитьИзВременногоХранилища(ОписаниеВнешнегоИсточника.Значение);
					АдресВнешнегоИсточника = ОписаниеВнешнегоИсточника.Значение;
				Иначе
					ТаблицаВнешнегоИсточника = ОписаниеВнешнегоИсточника.Значение;
					АдресВнешнегоИсточника = ПоместитьВоВременноеХранилище(ТаблицаВнешнегоИсточника, Форма.УникальныйИдентификатор);
				КонецЕсли;
				
				Если ТаблицаВнешнегоИсточника = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТаблицаВнешнегоИсточника.Колонки) Тогда
					
					ЗначенияВнешнихИсточников.Добавить(Новый Структура("Ключ, Значение", ОписаниеВнешнегоИсточника.Ключ, АдресВнешнегоИсточника));
					
					НоваяСтрока = TempTablesNames.Добавить();
					НоваяСтрока.Name = ОписаниеВнешнегоИсточника.Ключ;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Форма.Object[ИдентификаторВнешнихИсточников] = Новый ФиксированныйМассив(ЗначенияВнешнихИсточников);
		
		// Переинициализация используемых внешних источников
		//Для Каждого ПакетСхемы Из СхемаЗапроса.ПакетЗапросов Цикл 
		//	
		//	Если ТипЗнч(ПакетСхемы) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	Для Каждого ОператорСхемы Из ПакетСхемы.Операторы Цикл 
		//		
		//		//Сохраним ВыбираемыеПоля
		//		ВыбираемыеПоля = СохранитьВыбираемыеПоля(ОператорСхемы.ВыбираемыеПоля);
		//		
		//		Для Каждого ИсточникОператораСхемы Из ОператорСхемы.Источники Цикл 
		//			ДополнитьДанныеИсточниковВходнымиВнешнимиИсточниками(ОператорСхемы.Источники, ИсточникОператораСхемы, ЗначенияВнешнихИсточников);
		//		КонецЦикла;
		//		
		//		ВосстановитьВыбираемыеПоля(ОператорСхемы.ВыбираемыеПоля, ВыбираемыеПоля);
		//		
		//	КонецЦикла;
		//	
		//КонецЦикла;
		
		// Задача 3
		Форма.CurrentQuerySchemaSelectQuery = СхемаЗапроса.ПакетЗапросов.Количество() - 1; // текущий запрос последний
		
	КонецЕсли;
	
	// Задача 6
	Элементы["GroupingFields"].ИзменятьСоставСтрок = Истина;
	Элементы["GroupingFieldsPresentation"].ТолькоПросмотр = Истина;
	
	// Задача 7
	Элементы["AdditionallyTablesForChanging"].ТолькоПросмотр = Ложь;
	Элементы["AdditionallyTablesForChangingPresentation"].ТолькоПросмотр = Истина;
	
	// Задача 16
	Элементы["Indexes"].ТолькоПросмотр = Ложь;
	
	// Задача 15
	ПутьКДаннымЗаголовкаТаблицыПоля = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаТаблицыПоля();
	ПутьКДаннымЗаголовкаСвязи = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаСвязи();
	ПутьКДаннымЗаголовкаГруппировка = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаГруппировка();
	ПутьКДаннымЗаголовкаУсловия = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаУсловия();
	ПутьКДаннымЗаголовкаДополнительно = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаДополнительно();
	ПутьКДаннымЗаголовкаОбъединить = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаОбъединить();
	ПутьКДаннымЗаголовкаИндекс = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаИндекс();
	ПутьКДаннымЗаголовкаПорядок = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаПорядок();
	ПутьКДаннымЗаголовкаИтоги = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаИтоги();
	ПутьКДаннымЗаголовкаПакетЗапросов = ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаПакетЗапросов();
	
	ДобавляемыеРеквизиты = Новый Массив;
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаТаблицыПоля, "Строка(1)");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаСвязи, "Строка(1)");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаГруппировка, "Строка(1)");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаУсловия, "Число");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаДополнительно, "Строка(1)");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаОбъединить, "Строка(1)");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаИндекс, "Число");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаПорядок, "Строка(1)");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаИтоги, "Строка(1)");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ПутьКДаннымЗаголовкаПакетЗапросов, "Число");
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Элементы.TablesAndFieldsPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаТаблицыПоля;
	Элементы.JoinsPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаСвязи;
	Элементы.GroupingPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаГруппировка;
	Элементы.ConditionsPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаУсловия;
	Элементы.AdditionallyPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаДополнительно;
	Элементы.UnionsAliasesPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаОбъединить;
	Элементы.IndexPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаИндекс;
	Элементы.OrderPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаПорядок;
	Элементы.TotalsPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаИтоги;
	Элементы.QueryBatchPage.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовкаПакетЗапросов;
	
	ОбновитьЗаголовкиСтраниц(Форма);
	
	// Задача 26
	ДобавляемыеРеквизиты = Новый Массив;
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымСлужебныйЗапуск(), "Булево");
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Задача 17
	ДобавитьКомандыЭлементыПорядокУсловий(Форма);
	
	// Задача 20
	ДобавитьРеквизитыЭлементыСвязей(Форма);
	
	// Задача 21
	ДобавитьКомандуПерейтиКПолюВВыбранных(Форма);
	
	// Задача 22
	ЭлементУсловие = Элементы["ConditionsCondition"];
	ЭлементУсловие.МногострочныйРежим = Истина;
	ЭлементУсловие.АвтоВысотаЯчейки = Истина;
	ЭлементУсловие.Высота = 5;
	
КонецПроцедуры

// Задача 1, 15, 20
Процедура ФормаОсновнаяПослеFillPagesAtServer(Форма) Экспорт
	
	// Задача 15
	ОбновитьЗаголовкиСтраниц(Форма);
	
	// Задача 1
	ЗначенияВнешнихИсточников = ВнешниеИсточники(Форма);
	Если ЗначениеЗаполнено(ЗначенияВнешнихИсточников) Тогда
		
		NameВременныеТаблицы = NameВременныеТаблицыВходные();
		СтрокаВременныеТаблицы = Неопределено;
		Для Каждого СтрокаДоступныйИсточник Из Форма.AvailableTables.ПолучитьЭлементы() Цикл
			
			Если СтрокаДоступныйИсточник.Name = NameВременныеТаблицы Тогда
				СтрокаВременныеТаблицы = СтрокаДоступныйИсточник;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаВременныеТаблицы = Неопределено Тогда
			
			AvailableTables = Форма.AvailableTables;
			ЭлементыДоступныеТаблицы = AvailableTables.ПолучитьЭлементы();
			
			ИндексВставки = Неопределено;
			Для Каждого Строка Из ЭлементыДоступныеТаблицы Цикл
				
				Если Строка.Name = "Временные таблицы" Тогда
					
					ИндексВставки = Строка.Index;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Новая строка (когда есть временные вставляем перед ней
			Если ИндексВставки = Неопределено Тогда
				СтрокаВременныеТаблицы = ЭлементыДоступныеТаблицы.Добавить();
			Иначе
				СтрокаВременныеТаблицы = ЭлементыДоступныеТаблицы.Вставить(ИндексВставки);
			КонецЕсли;
			СтрокаВременныеТаблицы.Type = 1;
			СтрокаВременныеТаблицы.Name = NameВременныеТаблицы;
			СтрокаВременныеТаблицы.Presentation = NameВременныеТаблицы;
			СтрокаВременныеТаблицы.Picture = 20;
			СтрокаВременныеТаблицы.Index = -1;
			
			ПустаяСтрока = СтрокаВременныеТаблицы.ПолучитьЭлементы().Добавить();
			ПустаяСтрока.Name = "FakeFieldeItem";
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Задача 20
	Попытка
		
		ЗаполнениеСвязей(Форма);
		
	Исключение

		ШаблонТекста = НСтр("ru = 'Ошибка при заполнении связей:
                            |%1';
							|en = 'Error filling links:
                            |%1'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = СтрШаблон(ШаблонТекста, КраткоеПредставлениеОшибки);
		
		Сообщить(Текст, СтатусСообщения.ОченьВажное);
		
	КонецПопытки;

КонецПроцедуры

// Задача 1
Процедура ФормаОсновнаяВнутриApplyChangesFromCacheNoContextДобавитьВременнуюТаблицуВИсточникиОператора(ВнешниеИсточники, Source,
																										Operator, ItemIndexes, Expression = Неопределено) Экспорт
	Если ItemIndexes[0] = -1 Тогда
		
		ОписаниеВременнойТаблицы = ВнешниеИсточники[ItemIndexes[1]];
		
		ИсточникВременнаяТаблица = Operator.Источники.НайтиПоИмени(ОписаниеВременнойТаблицы.Ключ);
		Если ИсточникВременнаяТаблица = Неопределено Тогда
			
			ИсточникВременнаяТаблица = Operator.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), ОписаниеВременнойТаблицы.Ключ);
			
			Если ЭтоАдресВременногоХранилища(ОписаниеВременнойТаблицы.Значение) Тогда
				ЗначениеВременнойТаблицы = ПолучитьИзВременногоХранилища(ОписаниеВременнойТаблицы.Значение);
			Иначе
				ЗначениеВременнойТаблицы = ОписаниеВременнойТаблицы.Значение;
			КонецЕсли;
			
			Для Каждого ПолеВременнойТаблицы Из ЗначениеВременнойТаблицы.Колонки Цикл
				
				ТипЗначения = ПолеВременнойТаблицы.ТипЗначения;
				ДоступныеПоля = ИсточникВременнаяТаблица.Источник.ДоступныеПоля;
				
				// Видимо ошибка, не воспринимает составные типы
				Если ИТКВ_ТипыКлиентСервер.Количество(ТипЗначения) = 1 Тогда
					
					ПервыйТип = ТипЗначения.Типы()[0];
					ДоступныеПоля.Добавить(ПолеВременнойТаблицы.Имя, ПервыйТип);
					
				Иначе
					
					ДоступныеПоля.Добавить(ПолеВременнойТаблицы.Имя);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Source = ИсточникВременнаяТаблица;
		
		Если ItemIndexes.Количество() > 2 Тогда
			Expression = СтрШаблон("%1.%2", Source.Источник.ИмяТаблицы, Source.Источник.ДоступныеПоля[ItemIndexes[2]].Имя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Задача 1
Функция ВнешниеИсточники(Форма) Экспорт
	
	Возврат Форма.Object[ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников()];
	
КонецФункции

// Задача 1, 2, 27
Процедура ФормаРедактированиеПоляПриСозданииНаСервереПередЗаполнением(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Задача 1
	ИдентификаторВнешнихИсточников = ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников();
	Форма.Object[ИдентификаторВнешнихИсточников] = Форма.Параметры[ИдентификаторВнешнихИсточников];
	
	// Задача 2
	ДобавитьКолонкуТипПоля(Форма, "Fields");
	
	// Задача 27
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Текст", Форма["Expression"]);
	ДополнительныеСвойства.Вставить("ТипЯзыка", ИТКВ_Перечисления.ТипЯзыкаРедактораЗапросы());
	
	ИспользованиеКоманд = Новый Структура;
	ИспользованиеКоманд.Вставить("КонструкторВыделенного", Ложь);
	ИспользованиеКоманд.Вставить("ПреобразоватьВоВложенный", Ложь);
	ИспользованиеКоманд.Вставить("УбратьПереносы", Ложь);
	ИспользованиеКоманд.Вставить("ПерейтиКСтроке", Ложь);
	ДополнительныеСвойства.Вставить("ИспользованиеКоманд", ИспользованиеКоманд);
	
	ФиксированныеНастройки = ИТКВ_РедакторКодаКлиентСервер.ФиксированныеНастройкиВыражения();
	ДополнительныеСвойства.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ИТКВ_РедакторКода.Инициализация(Форма, "Выражение", Элементы.ГруппаВыражение, ДополнительныеСвойства);

КонецПроцедуры

// Задача 1
Процедура ФормаРедактированиеПараметровВиртуальныхТаблицПриСозданииНаСервере(Форма) Экспорт
	
	ИдентификаторВнешнихИсточников = ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников();
	Форма.Object[ИдентификаторВнешнихИсточников] = Форма.Параметры[ИдентификаторВнешнихИсточников];

КонецПроцедуры

// Задача 1, 2
Процедура ФормаВыбораТаблицыПриСозданииНаСервере(Форма) Экспорт
	
	// Задача 1
	ИдентификаторВнешнихИсточников = ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников();
	Форма.Object[ИдентификаторВнешнихИсточников] = Форма.Параметры[ИдентификаторВнешнихИсточников];
	
	// Удалим строку временные таблицы (входные)
	ДеревоДоступныеТаблицы = Форма["AvailableTables"];
	ДеревоДоступныеТаблицыЭлементы = ДеревоДоступныеТаблицы.ПолучитьЭлементы();
	Для Каждого Строка Из ДеревоДоступныеТаблицыЭлементы Цикл
		
		Если Строка.Name = NameВременныеТаблицыВходные() Тогда
			
			ДеревоДоступныеТаблицыЭлементы.Удалить(Строка);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Задача 2
	ДобавитьКолонкуТипПоля(Форма, "AvailableTables");

КонецПроцедуры

// Задача 2
Процедура МодульОбъектаAddSourceItemИначеЕслиAvailableField(Source, NewElement) Экспорт
	
	NewElement[ИдентификаторКолонкиТипПоля()] = ИТКВ_Типы.КартинкаОписания(Source.ValueType);
	
КонецПроцедуры

// Задача 3, 23, 24
Процедура ФормаОсновнаяПриСозданииНаСервереПослеЗаполнения(Форма, Отказ) Экспорт
	
	Параметры = Форма.Параметры;
	
	СлужебныйЗапуск = Параметры.Свойство("IsNestedQuery") ИЛИ Параметры.Свойство("QueryText");
	Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымСлужебныйЗапуск()] = СлужебныйЗапуск;
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	// 3
	ИмяТаблицы = "QueryBatch";
	ЗначениеРеквизита = Форма[ИмяТаблицы];
	
	Элементы = Форма.Элементы;
	Элементы[ИмяТаблицы].ТекущаяСтрока = ЗначениеРеквизита[ЗначениеРеквизита.Количество() - 1].ПолучитьИдентификатор();
	
	// 23
	ОформлениеПоля = Новый Структура;
	ОформлениеПоля.Вставить("Шрифт", ИТКВ_ОбщийКлиентСервер.ШрифтЖирный());

	ИТКВ_Форма.ДобавитьУсловноеОформление(УсловноеОформление, "QueryBatchName", ОформлениеПоля, "QueryBatch.Index", Новый ПолеКомпоновкиДанных("CurrentQuerySchemaSelectQuery"));
	ИТКВ_Форма.ДобавитьУсловноеОформление(УсловноеОформление, "UnionsName", ОформлениеПоля, "Unions.Index", Новый ПолеКомпоновкиДанных("CurrentQuerySchemaOperator"));
	
	// 24 
	ИмяДействия = ИТКВ_КонструкторЗапросовКлиентСервер.ОсновноеИмяДействия();
	Префикс = ИТКВ_ТуллкитКлиентСервер.Префикс();

	Элементы["CurrentQuerySchemaSelectQuery"].Видимость = Истина;
	Элементы["CurrentQuerySchemaOperator"].Видимость = Истина;
	Элементы["ShowQuery"].Видимость = Ложь;
	
	// Добавление кнопки запрос
	ИмяКоманды = "ShowQuery";
	Поля = Новый Структура("ИмяКоманды", ИмяКоманды);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, Префикс + ИмяКоманды, "Кнопка", Поля, Элементы["Commands"], Элементы["CurrentQuerySchemaSelectQuery"]);
	
	// Добавление кнопок Назад и Далее
	// < Назад
	ИмяКоманды = Префикс + "ЗапросПредыдущаяСтраница";
	ИТКВ_Форма.ДобавитьКоманду(Форма, ИмяКоманды, ИмяДействия, НСтр("ru = '< Назад '; en = '< Back'"));
											
	Поля = Новый Структура;
	Поля.Вставить("ИмяКоманды", ИмяКоманды);
	Поля.Вставить("Доступность", Ложь);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКоманды, "Кнопка", Поля, Элементы["Group1"], Элементы["ShowQuery"]);
	
	// Далее
	ИмяКоманды = Префикс + "ЗапросСледующаяСтраница";
	ИТКВ_Форма.ДобавитьКоманду(Форма, ИмяКоманды, ИмяДействия, НСтр("ru = 'Далее >'; en = 'Next >'"));
											
	Поля = Новый Структура;
	Поля.Вставить("ИмяКоманды", ИмяКоманды);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКоманды, "Кнопка", Поля, Элементы["Group1"], Элементы["ShowQuery"]);
	
	// 25
	Элементы["AvailableFields"].ЧередованиеЦветовСтрок = Истина;
	Элементы["Conditions"].ЧередованиеЦветовСтрок = Истина;
	Элементы["Aliases"].ЧередованиеЦветовСтрок = Истина;
	Элементы["Indexes"].ЧередованиеЦветовСтрок = Истина;
	Элементы["Order"].ЧередованиеЦветовСтрок = Истина;
	Элементы["AllFieldsForTotals"].ЧередованиеЦветовСтрок = Истина;
	Элементы["TotalsGroupingFields"].ЧередованиеЦветовСтрок = Истина;
	Элементы["TotalsExpressions"].ЧередованиеЦветовСтрок = Истина;
	Элементы["QueryBatch"].ЧередованиеЦветовСтрок = Истина;
	
КонецПроцедуры

// Задача 10, 12, 27
Процедура ФормаРедактированиеТекстаПослеПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Задача 1
	ИдентификаторВнешнихИсточников = ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников();
	Форма.Object[ИдентификаторВнешнихИсточников] = Форма.Параметры[ИдентификаторВнешнихИсточников];
	
	// Задача 10
	Форма.Ширина = 120;
	Форма.Высота = 40;
	
	// Задача 12, 27
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("Текст", Форма["QueryText"]);
	ДополнительныеСвойства.Вставить("ТипЯзыка", ИТКВ_Перечисления.ТипЯзыкаРедактораЗапросы());
	
	ИспользованиеКоманд = Новый Структура;
	ИспользованиеКоманд.Вставить("Конструктор", Ложь);
	ДополнительныеСвойства.Вставить("ИспользованиеКоманд", ИспользованиеКоманд);

	ИТКВ_РедакторКода.Инициализация(Форма, "ТекстЗапроса", Элементы.ГруппаТекстЗапроса, ДополнительныеСвойства);
	
КонецПроцедуры

Функция КартинкаИсточникаСвязи(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
		
		Результат = КартинкаИсточникаСвязи(Источник.ИмяТаблицы);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
		
		Результат = БиблиотекаКартинок.КонструкторЗапросаВложенныйЗапрос
		
	Иначе
		
		Если СтрНайти(Источник, ".") Тогда
			
			Попытка
				
				Результат = БиблиотекаКартинок[ИТКВ_Строки.РазборПрочитатьИдентификатор(Источник)];
				
			Исключение
				
				Результат = Новый Картинка;
				
			КонецПопытки;
			
		Иначе
			
			Результат = БиблиотекаКартинок.КонструкторЗапросаВременнаяТаблица;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПользовательскиеОбъектыПодсказки(Форма) Экспорт
	
	МодульОбъекта = Форма.РеквизитФормыВЗначение("Object");
	РедактированиеВыражения = Булево(СтрНайти(Форма.ИмяФормы, "ArbitraryExpression"));
	
	Результат = ИТКВ_РедакторКода.НовыеПользовательскиеОбъекты();
	Кэш = ИТКВ_РедакторКода.КэшТиповПользовательскихОбъектов();
	
	// Внешние источники
	ВнешниеИсточники = МодульОбъекта[ИТКВ_КонструкторЗапросовКлиентСервер.ИдентификаторЗначенийВнешнихИсточников()];
	Для Каждого ОписаниеВнешнегоИсточника Из ВнешниеИсточники Цикл
		
		ВнешнийИсточник = ПолучитьИзВременногоХранилища(ОписаниеВнешнегоИсточника.Значение);
		ИТКВ_РедакторКода.ЗагрузитьПользовательскиеДанныеПоВнешнемуИсточнику(Результат, Кэш, ОписаниеВнешнегоИсточника.Ключ, ВнешнийИсточник);

	КонецЦикла;
	
	Если РедактированиеВыражения Тогда
		
		СхемаЗапроса = ПолучитьИзВременногоХранилища(Форма["QueryWizardAddress"]);
		
		// Параметры
		Параметры = СхемаЗапроса.НайтиПараметры();
		Для Каждого Параметр Из Параметры Цикл
			ИТКВ_РедакторКода.ДобавитьПользовательскийОбъект(Результат, "&" + Параметр.Имя);
		КонецЦикла;
		
		ЗапросСхемы = МодульОбъекта.GetSchemaQuery(СхемаЗапроса, Форма["CurrentQuerySchemaSelectQuery"], Форма["NestedQueryPositionAddress"]);
		ОператорСхемы = ЗапросСхемы.Операторы[Форма["CurrentQuerySchemaOperator"]];
		
		// Источники
		ИмяПараметраВиртуальнойТаблицы = Форма["PropertyName"];
		Если ЗначениеЗаполнено(ИмяПараметраВиртуальнойТаблицы) Тогда
			
			ИсточникВиртуальнаяТаблица = ОператорСхемы.Источники[Форма["TableIndex"]];
			СобратьДанныеИсточников(ИсточникВиртуальнаяТаблица, Результат, Кэш, ИмяПараметраВиртуальнойТаблицы);
			
		Иначе
			
			Для Каждого Источник Из ОператорСхемы.Источники Цикл
				СобратьДанныеИсточников(Источник, Результат, Кэш);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Задача 30
Процедура ОбновитьПоляВременныхТаблиц(Форма, СхемаЗапроса, ОператорСхемы) Экспорт
	
	Для Каждого ИсточникСхемы Из ОператорСхемы.Источники Цикл

		Источник = ИсточникСхемы.Источник;
		Если ТипЗнч(Источник) <> Тип("ТаблицаСхемыЗапроса")
				ИЛИ СтрНайти(Источник.ИмяТаблицы, ".") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
			
			Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗапросПакета.ТаблицаДляПомещения <> Источник.ИмяТаблицы Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗапросПакета.Колонки.Количество() <= Источник.ДоступныеПоля.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			// ДоступныеПоля изменить не получилось т.к. для таблицы только чтение
			// Пришлось переинициализировать схему запроса
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
			
			НоваяСхемаЗапроса = Новый СхемаЗапроса;
			НоваяСхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			
			СхемаЗапроса = НоваяСхемаЗапроса;
			
			МодульОбъекта = Форма.РеквизитФормыВЗначение("Object");
			ЗапросСхемы = МодульОбъекта.GetSchemaQuery(СхемаЗапроса, Форма["CurrentQuerySchemaSelectQuery"], Форма["NestedQueryPositionAddress"]);
			ОператорСхемы = ЗапросСхемы.Операторы.Get(Форма["CurrentQuerySchemaOperator"]);
			ПоместитьВоВременноеХранилище(СхемаЗапроса, Форма["QueryWizardAddress"]);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКолонкуТипПоля(Форма, ИмяКоллекции)
	
	ИмяРеквизитаКолонки = ИдентификаторКолонкиТипПоля();
	ЭлементРодитель = Форма.Элементы[ИмяКоллекции];
	
	// Добавляем реквизит и колонку типа поля
	ДобавляемыеРеквизиты = Новый Массив;
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ИмяРеквизитаКолонки, "Картинка", , ИмяКоллекции);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Поля = Новый Структура;
	Поля.Вставить("ПутьКДанным", СтрШаблон("%1.%2", ИмяКоллекции, ИмяРеквизитаКолонки));
	Поля.Вставить("КартинкаШапки", БиблиотекаКартинок.ИТКВ_ТипТип);
	Поля.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКоллекции + ИмяРеквизитаКолонки, "ПолеКартинки", Поля, ЭлементРодитель);
	
	// Модифицируем элемент таблица
	ЭлементРодитель.ЧередованиеЦветовСтрок = Истина;
	ЭлементРодитель.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	
КонецПроцедуры

Функция ИдентификаторКолонкиТипПоля()
	
	Возврат "ITK_Картинка";
	
КонецФункции

Процедура ОбновитьЗаголовкиСтраниц(Форма) Экспорт
	
	МодульОбъекта = Форма.РеквизитФормыВЗначение("Object");
	
	Попытка
		РежимКомпоновкиДанных = Форма["DataCompositionMode"];
	Исключение
		РежимКомпоновкиДанных = Ложь;
	КонецПопытки;
		
	СхемаЗапроса = ПолучитьИзВременногоХранилища(Форма["QueryWizardAddress"]);
	ЗапросСхемы = МодульОбъекта.GetSchemaQuery(СхемаЗапроса, Форма["CurrentQuerySchemaSelectQuery"], Форма["NestedQueryPositionAddress"]);
	
	// Пакет запросов
	Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаПакетЗапросов()] = СхемаЗапроса.ПакетЗапросов.Количество();
	
	Если ТипЗнч(ЗапросСхемы) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		Возврат;
	КонецЕсли;
	
	ОператорСхемы = ЗапросСхемы.Операторы[Форма.CurrentQuerySchemaOperator];
	
	// Таблицы и поля
	ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыТаблицыПоля(Форма, ОператорСхемы.ВыбираемыеПоля);
	
	// Связи 
	ДанныеСвязей = ДанныеСвязей(ОператорСхемы.Источники);
	ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыСвязи(Форма, ДанныеСвязей.ЕстьСвязи, ДанныеСвязей.Источников);
	
	// Группировка
	ЗаголовокГруппировка = "";
	Если ЗначениеЗаполнено(ОператорСхемы.Группировка) Тогда
			
		ЗаголовокГруппировка = "*";
		
	КонецЕсли;
	Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаГруппировка()] = ЗаголовокГруппировка;
	
	// Условия
	ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыУсловия(Форма, ОператорСхемы.Отбор);
	
	// Дополнительно
	Параметры = Новый Структура;
	Параметры.Вставить("ВыбиратьРазрешенные", ЗапросСхемы.ВыбиратьРазрешенные);
	Параметры.Вставить("ВыбиратьРазличные", ОператорСхемы.ВыбиратьРазличные);
	Параметры.Вставить("ВыбиратьДляИзменения", ОператорСхемы.ВыбиратьДляИзменения);
	
	Параметры.Вставить("КоличествоПолучаемыхЗаписей", ОператорСхемы.КоличествоПолучаемыхЗаписей);
	Параметры.Вставить("ТаблицаДляПомещения", ЗапросСхемы.ТаблицаДляПомещения);
	Параметры.Вставить("ТаблицыДляИзменения", ОператорСхемы.ТаблицыДляИзменения);

	ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыДополнительно(Форма, Параметры);
	
	// Объединить
	ЗаголовокОбъединить = "";
	Если ЗапросСхемы.Операторы.Количество() > 1 Тогда
			
		ЗаголовокОбъединить = "*";
		
	КонецЕсли;
	Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаОбъединить()] = ЗаголовокОбъединить;
	
	// Индекс
	Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаИндекс()] = ЗапросСхемы.Индекс.Количество();
	
	// Порядок
	ЗаголовокПорядок = "";
	Если ЗапросСхемы.Автопорядок
			ИЛИ ЗначениеЗаполнено(ЗапросСхемы.Порядок) Тогда
			
		ЗаголовокПорядок = "*";
		
	КонецЕсли;
	Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаПорядок()] = ЗаголовокПорядок;
	
	Если РежимКомпоновкиДанных Тогда
		Возврат;
	КонецЕсли;
		
	// Итоги
	ЗаголовокИтоги = "";
	Если ЗапросСхемы.ОбщиеИтоги
			ИЛИ ЗначениеЗаполнено(ЗапросСхемы.КонтрольныеТочкиИтогов)
			ИЛИ ЗначениеЗаполнено(ЗапросСхемы.ВыраженияИтогов) Тогда
			
		ЗаголовокИтоги = "*";
		
	КонецЕсли;
	Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымЗаголовкаИтоги()] = ЗаголовокИтоги;
	
КонецПроцедуры

Процедура ДобавитьКомандыЭлементыПорядокУсловий(Форма)
	
	Префикс = ИТКВ_КонструкторЗапросовКлиентСервер.Префикс();
	Элементы = Форма.Элементы;
	Элемент = Элементы["Conditions"];

	ИмяДействия = ИТКВ_КонструкторЗапросовКлиентСервер.ОсновноеИмяДействия();
	ИмяКоманднойПанели = Префикс + "УсловияКоманднаяПанель";
	ИмяКонтекстногоМеню = Префикс + "УсловияКонтекстноеМеню";
	ИмяГруппы = "ГруппаПорядок";
	
	ГруппаКоманднойПанели = ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКоманднойПанели + ИмяГруппы, "Группа", , Элемент.КоманднаяПанель);
	ГруппаКонтекстногоМеню = ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКонтекстногоМеню + ИмяГруппы, "Группа", , Элемент.КонтекстноеМеню);
	
	// Сдвинуть вверх
	ИмяКоманды = Префикс + "СдвинутьУсловиеВверх";
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Картинка", БиблиотекаКартинок.ПереместитьВверх);
	ИТКВ_Форма.ДобавитьКоманду(Форма, ИмяКоманды, ИмяДействия, НСтр("ru = 'Переместить вверх'; en = 'Move up'"), ПараметрыКоманды);
											
	Поля = Новый Структура("ИмяКоманды", ИмяКоманды);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКоманднойПанели + ИмяКоманды, "Кнопка", Поля, ГруппаКоманднойПанели);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКонтекстногоМеню + ИмяКоманды, "Кнопка", Поля, ГруппаКонтекстногоМеню);
	
	// Сдвинуть вниз
	ИмяКоманды = Префикс + "СдвинутьУсловиеВниз";

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Картинка", БиблиотекаКартинок.ПереместитьВниз);
	ИТКВ_Форма.ДобавитьКоманду(Форма, ИмяКоманды, ИмяДействия, НСтр("ru = 'Переместить вниз'; en = 'Move down'"), ПараметрыКоманды);
											
	Поля = Новый Структура("ИмяКоманды", ИмяКоманды);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКоманднойПанели + ИмяКоманды, "Кнопка", Поля, ГруппаКоманднойПанели);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКонтекстногоМеню + ИмяКоманды, "Кнопка", Поля, ГруппаКонтекстногоМеню);
	
КонецПроцедуры

Процедура ДобавитьКомандуПерейтиКПолюВВыбранных(Форма)
	
	Префикс = ИТКВ_КонструкторЗапросовКлиентСервер.Префикс();
	Элементы = Форма.Элементы;

	ИмяДействия = ИТКВ_КонструкторЗапросовКлиентСервер.ОсновноеИмяДействия();
	
	ИмяКоманды = Префикс + "ПерейтиКПолюВВыбранных";
	ЗаголовокКоманды = НСтр("ru = 'Перейти к полю в выбранных'; en = 'Go to field in selected'");
	ИТКВ_Форма.ДобавитьКоманду(Форма, ИмяКоманды, ИмяДействия, ЗаголовокКоманды);
											
	Поля = Новый Структура("ИмяКоманды", ИмяКоманды);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяКоманды, "Кнопка", Поля, Элементы["Aliases"].КонтекстноеМеню);
	
КонецПроцедуры

Функция ДанныеСвязей(Источники)
	
	ЕстьСвязи = Ложь;
	Для Каждого Источник Из Источники Цикл
		
		Если ЗначениеЗаполнено(Источник.Соединения) Тогда
			
			ЕстьСвязи = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ЕстьСвязи, Источников", ЕстьСвязи, Источники.Количество());
	
КонецФункции

Процедура ДобавитьРеквизитыЭлементыСвязей(Форма)
	
	ИмяРеквизитаСвязи = ИТКВ_КонструкторЗапросовКлиентСервер.ИмяРеквизитаСвязи();
	Элементы = Форма.Элементы;
	
	Элементы["Group13"].Видимость = Ложь;
	Элементы["Joins"].Видимость = Ложь;
	
	// Создание реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, ИмяРеквизитаСвязи, "ТаблицаЗначений");
	
	МаксимальнаяДлинаИмениМетаданных = ИТКВ_МетаданныеКлиентСерверПовтИсп.МаксимальнаяДлинаИмени();
	ОписаниеТиповИмяМетаданных = ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(МаксимальнаяДлинаИмениМетаданных);
	
	Для Сч = 1 По 2 Цикл
		
		Заголовок = НСтр("ru = 'Таблица'; en = 'Table'") + " " + Сч;
		ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, "Таблица" + Сч, ОписаниеТиповИмяМетаданных, Заголовок, ИмяРеквизитаСвязи);
		
		Заголовок = НСтр("ru = 'Все'; en = 'All'") + " " + Сч;
		ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, "Все" + Сч, "Булево", Заголовок, ИмяРеквизитаСвязи);
		
		ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, "Картинка" + Сч, "Картинка", , ИмяРеквизитаСвязи);
		
	КонецЦикла;
	
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, "ИндексСтроки", ИТКВ_ТипыКлиентСервер.ОписаниеЧисло(10), , ИмяРеквизитаСвязи);
	
	Заголовок = НСтр("ru = 'Условие'; en = 'Condition'");
	ИТКВ_Форма.ДобавитьРеквизит(ДобавляемыеРеквизиты, "Условие", ИТКВ_ТипыКлиентСервер.ОписаниеСтрока(), Заголовок, ИмяРеквизитаСвязи);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создание элементов
	Поля = Новый Структура;
	Поля.Вставить("ПутьКДанным", ИмяРеквизитаСвязи);
	Поля.Вставить("ИзменятьПорядокСтрок", Ложь);
	Поля.Вставить("АвтоВводНовойСтроки", Ложь);
	Поля.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	Поля.Вставить("РазрешитьПеретаскивание", Ложь);
	Поля.Вставить("РежимВыделения", РежимВыделенияТаблицы.Одиночный);
	
	ТаблицаСвязи = ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяРеквизитаСвязи, "Таблица", Поля, Элементы["JoinsPage"]);
	УстановитьДействиеСвязей(ТаблицаСвязи, "ПриНачалеРедактирования");
	УстановитьДействиеСвязей(ТаблицаСвязи, "ПередОкончаниемРедактирования");
	УстановитьДействиеСвязей(ТаблицаСвязи, "ПриОкончанииРедактирования");
	УстановитьДействиеСвязей(ТаблицаСвязи, "ПередУдалением");
	
	ДобавитьГруппуСвязиТаблица(Форма, ИмяРеквизитаСвязи, ТаблицаСвязи, 1);
	ДобавитьГруппуСвязиТаблица(Форма, ИмяРеквизитаСвязи, ТаблицаСвязи, 2);
	
	// Колонка Условие
	ИмяКолонки = "Условие";
	
	Поля = Новый Структура;
	Поля.Вставить("ПутьКДанным", ИмяРеквизитаСвязи + "." + ИмяКолонки);
	Поля.Вставить("МногострочныйРежим", Истина);
	Поля.Вставить("КнопкаВыбора", Истина);
	КолонкаУсловие = ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяРеквизитаСвязи + ИмяКолонки, "ПолеВвода", Поля, ТаблицаСвязи);
	УстановитьДействиеСвязей(КолонкаУсловие, "НачалоВыбора");
	
КонецПроцедуры

Процедура ДобавитьГруппуСвязиТаблица(Форма, ИмяРеквизитаСвязи, ТаблицаСвязи, Номер)
	
	// Таблица
	ИмяКолонки = "Таблица" + Номер;
	
	Поля = Новый Структура;
	Поля.Вставить("Группировка", ГруппировкаКолонок.ВЯчейке);
	ГруппаТаблица = ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяРеквизитаСвязи + "Группа" + ИмяКолонки, "Группа", Поля, ТаблицаСвязи);
	
	Поля = Новый Структура;
	Поля.Вставить("ПутьКДанным", ИмяРеквизитаСвязи + "." + ИмяКолонки);
	Поля.Вставить("Ширина", 25);
	Поля.Вставить("АвтоОтметкаНезаполненного", Истина);
	Поля.Вставить("КнопкаВыбора", Истина);
	Поля.Вставить("РедактированиеТекста", Ложь);
	КолонкаТаблица = ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяРеквизитаСвязи + ИмяКолонки, "ПолеВвода", Поля, ГруппаТаблица);
	УстановитьДействиеСвязей(КолонкаТаблица, "НачалоВыбора");
	
	// Картинка
	ИмяКолонки = "Картинка" + Номер;
	
	Поля = Новый Структура;
	Поля.Вставить("ПутьКДанным", ИмяРеквизитаСвязи + "." + ИмяКолонки);
	Поля.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяРеквизитаСвязи + ИмяКолонки, "ПолеВвода", Поля, ГруппаТаблица);
	
	// Все
	ИмяКолонки = "Все" + Номер;
	
	Поля = Новый Структура;
	Поля.Вставить("ПутьКДанным", ИмяРеквизитаСвязи + "." + ИмяКолонки);
	ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяРеквизитаСвязи + ИмяКолонки, "ПолеФлажка", Поля, ТаблицаСвязи);
	
КонецПроцедуры

Процедура ЗаполнениеСвязей(Форма)
	
	Связи = Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ИмяРеквизитаСвязи()];
	Связи.Очистить();
	
	МодульОбъекта = Форма.РеквизитФормыВЗначение("Object");
	СхемаЗапроса = ПолучитьИзВременногоХранилища(Форма["QueryWizardAddress"]);
	Запрос = МодульОбъекта.GetSchemaQuery(СхемаЗапроса, Форма["CurrentQuerySchemaSelectQuery"], Форма["NestedQueryPositionAddress"]);
	
	Операторы = Запрос.Операторы;
	CurrentQuerySchemaOperator = Форма["CurrentQuerySchemaOperator"];
	Если CurrentQuerySchemaOperator >= Операторы.Количество() Тогда
		CurrentQuerySchemaOperator = 0;
	КонецЕсли;

	Оператор = Операторы.Получить(CurrentQuerySchemaOperator);
	
	Для Каждого ОписаниеИсточника Из Оператор.Источники Цикл
		
		Источник = ОписаниеИсточника.Источник;
		Таблица1 = Источник.Псевдоним;
		
		ПредыдущаяТаблица2 = "";
		Для Каждого ОписаниеСоединения Из ОписаниеИсточника.Соединения Цикл
			
			ТипСоединения = ОписаниеСоединения.ТипСоединения;
			ИсточникаСоединения = ОписаниеСоединения.Источник.Источник;
			
			Таблица2 = ИсточникаСоединения.Псевдоним;
			Если ПредыдущаяТаблица2 <> Таблица2 Тогда
				
				НоваяСтрока = Связи.Добавить();
				НоваяСтрока.Картинка1 = ИТКВ_КонструкторЗапросов.КартинкаИсточникаСвязи(Источник);
				НоваяСтрока.Таблица1 = Таблица1;
				НоваяСтрока.Все1 = (ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее ИЛИ ТипСоединения = ТипСоединенияСхемыЗапроса.ПолноеВнешнее);
				НоваяСтрока.Картинка2 = ИТКВ_КонструкторЗапросов.КартинкаИсточникаСвязи(ИсточникаСоединения);
				НоваяСтрока.Таблица2 = Таблица2;
				НоваяСтрока.Все2 = (ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее	ИЛИ ТипСоединения = ТипСоединенияСхемыЗапроса.ПолноеВнешнее);
				НоваяСтрока.Условие = ОписаниеСоединения.Условие;
				
			Иначе
				
				НоваяСтрока.Условие = НоваяСтрока.Условие + " И " + ОписаниеСоединения.Условие;
				
			КонецЕсли;
			
			ПредыдущаяТаблица2 = НоваяСтрока.Таблица2;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДействиеСвязей(Элемент, ИмяДействия)
	
	ИмяОбработчика = "Подключаемый" + Элемент.Имя + ИмяДействия;
	Элемент.УстановитьДействие(ИмяДействия, ИмяОбработчика);
	
КонецПроцедуры

Процедура СобратьДанныеИсточников(Источник, Результат, Кэш, ИмяПараметраВиртуальнойТаблицы = "")

	// Основной источник
	ОсновнойИсточник = Источник.Источник;
	
	ПараметрВиртуальнойТаблицы = ЗначениеЗаполнено(ИмяПараметраВиртуальнойТаблицы);
	Если ПараметрВиртуальнойТаблицы Тогда
		
		ДоступныеПоля = ДоступныеПоляВиртуальныхТаблицИсточника(ОсновнойИсточник, ИмяПараметраВиртуальнойТаблицы);
		Для Каждого ИмяПоля Из ДоступныеПоля Цикл
			
			Поле = ОсновнойИсточник.ДоступныеПоля.Найти(ИмяПоля);
			
			ОписаниеПоля = ИТКВ_РедакторКода.ОписаниеПользовательскогоОбъекта(Кэш, Поле.ТипЗначения);
			Результат.Вставить(ИмяПоля, ОписаниеПоля);
			
		КонецЦикла;
		
	Иначе
		
		Поля = Новый Структура;
		Для Каждого Поле Из ОсновнойИсточник.ДоступныеПоля Цикл
			
			Если ТипЗнч(Поле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Поля.Вставить(Поле.Имя, Поле.ТипЗначения);
			
		КонецЦикла;
		
		ОписаниеПолей = ИТКВ_РедакторКода.ОписаниеПользовательскогоОбъекта(Кэш, , Поля);
		Результат.Вставить(ОсновнойИсточник.Псевдоним, ОписаниеПолей);
		
	КонецЕсли;
	
	// Соединения
	Для Каждого Соединение Из Источник.Соединения Цикл
		СобратьДанныеИсточников(Соединение.Источник, Результат, Кэш);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДанныеИсточниковВходнымиВнешнимиИсточниками(Источники, Источник, ЗначенияВнешнихИсточников)
	
	// Основной источник
	ОсновнойИсточник = Источник.Источник;
	Если ТипЗнч(ОсновнойИсточник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		
		ЗначениеВнешнегоИсточника = Неопределено;
		Для Каждого ОписаниеВнешнегоИсточника Из ЗначенияВнешнихИсточников Цикл
			
			Если ОписаниеВнешнегоИсточника.Ключ = ОсновнойИсточник.ИмяТаблицы Тогда
				ЗначениеВнешнегоИсточника = ОписаниеВнешнегоИсточника.Значение;
			КонецЕсли;
			
		КонецЦикла;

		Если ЗначениеЗаполнено(ЗначениеВнешнегоИсточника) Тогда
			
			ДоступныеПоля = ОсновнойИсточник.ДоступныеПоля;
			
			ВнешнийИсточник = ПолучитьИзВременногоХранилища(ЗначениеВнешнегоИсточника);
			Для Каждого Колонка Из ВнешнийИсточник.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				ТипКолонки = Колонка.ТипЗначения;
				НайденноеПоле = ДоступныеПоля.Найти(ИмяКолонки);
				
				Если НайденноеПоле = Неопределено
						ИЛИ ЗначениеЗаполнено(НайденноеПоле.ТипЗначения.Типы())
						ИЛИ ИТКВ_ТипыКлиентСервер.Количество(ТипКолонки) <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = ДоступныеПоля.Индекс(НайденноеПоле);
				ДоступныеПоля.Удалить(Индекс);
				
				ДоступныеПоля.Вставить(Индекс, ИмяКолонки, ТипКолонки.Типы()[0]);
				
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;
	
	// Соединения
	Для Каждого Соединение Из Источник.Соединения Цикл
		ДополнитьДанныеИсточниковВходнымиВнешнимиИсточниками(Соединение, Соединение.Источник, ЗначенияВнешнихИсточников);
	КонецЦикла;
	
КонецПроцедуры

Функция NameВременныеТаблицыВходные()
	
	Возврат НСтр("ru = 'Временные таблицы (входные)'; en = 'Temporary tables (input)'");
	
КонецФункции

Функция СохранитьВыбираемыеПоля(ВыбираемыеПоля)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Поле");
	Результат.Колонки.Добавить("Тип");
	Результат.Колонки.Добавить("Поля");
	
	Для Каждого Поле Из ВыбираемыеПоля Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Тип = ТипЗнч(Поле);
		
		Если ТипЗнч(Поле) = Тип("ВложеннаяТаблицаСхемыЗапроса") Тогда
			
			НоваяСтрока.Поле = Поле.Имя;
			НоваяСтрока.Поля = СохранитьВыбираемыеПоля(Поле.Поля);
			
		Иначе
			НоваяСтрока.Поле = Строка(Поле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьВыбираемыеПоля(ВыбираемыеПоля, СохраненныеВыбираемыеПоля)
	
	ВыбираемыеПоля.Очистить();
	
	Для Индекс = 0 По СохраненныеВыбираемыеПоля.Количество() - 1 Цикл
		
		СохраненноеПоле = СохраненныеВыбираемыеПоля[Индекс];
		
		Если СохраненноеПоле.Тип = Тип("ВложеннаяТаблицаСхемыЗапроса") Тогда
			
			Для Каждого ВложенноеПоле Из СохраненноеПоле.Поля Цикл
				ВыбираемыеПоля.Добавить(ВложенноеПоле.Поле, Индекс);
			КонецЦикла;
			
		Иначе
			
			ВыбираемыеПоля.Добавить(СохраненноеПоле.Поле);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ДоступныеПоляВиртуальныхТаблицИсточника(Источник, ИмяПараметраВиртуальнойТаблицы)
	
	ПолноеИмяТаблицыИсточника = Источник.ИмяТаблицы;
	ИмяКоллекции = ИТКВ_Метаданные.ИмяКоллекции(ПолноеИмяТаблицыИсточника);
	ИмяВиртуальнойТаблицы = ИТКВ_Строки.РазборПрочитатьДоСимвола(ПолноеИмяТаблицыИсточника, ".", , НаправлениеПоиска.СКонца);
	
	Результат = Новый Массив;
	Если ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрНакопления(ИмяКоллекции)
			ИЛИ (ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрБухгалтерии(ИмяКоллекции)
					И ИмяПараметраВиртуальнойТаблицы = "Условие"
					И (ИмяВиртуальнойТаблицы = "ОборотыДтКт"
						ИЛИ ИмяВиртуальнойТаблицы = "Остатки"
						ИЛИ ИмяВиртуальнойТаблицы = "ОстаткиИОбороты")) Тогда
		
		Для Каждого Поле Из Источник.ДоступныеПоля Цикл
			
			Если НЕ Поле.Роль.Измерение Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Добавить(Поле.Имя);
			
		КонецЦикла;
		
	ИначеЕсли ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрСведений(ИмяКоллекции)
				ИЛИ (ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрРасчета(ИмяКоллекции)
						И ИмяВиртуальнойТаблицы = "ФактическийПериодДействия") Тогда
		
		Для Каждого Поле Из Источник.ДоступныеПоля Цикл
			Результат.Добавить(Поле.Имя);
		КонецЦикла;
		
	ИначеЕсли ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрРасчета(ИмяКоллекции) Тогда
		
		Если ИмяВиртуальнойТаблицы = "База" Тогда
			
			Для Каждого Поле Из Источник.ДоступныеПоля Цикл
				
				ИмяПоля = Поле.Имя;
				
				Если СтрЗаканчиваетсяНа(ИмяПоля, "Разрез")
						ИЛИ СтрЗаканчиваетсяНа(ИмяПоля, "База") Тогда
					Продолжить;
				КонецЕсли;
				
				Результат.Добавить(ИмяПоля);
				
			КонецЦикла;
			
		ИначеЕсли ИмяВиртуальнойТаблицы = "ДанныеГрафика" Тогда
			
			Для Каждого Поле Из Источник.ДоступныеПоля Цикл
				
				ИмяПоля = Поле.Имя;
				
				Если СтрНачинаетсяС(ИмяПоля, "Значение") Тогда
					Продолжить;
				КонецЕсли;
				
				Результат.Добавить(ИмяПоля);
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрБухгалтерии(ИмяКоллекции) Тогда
		
		Если ИмяВиртуальнойТаблицы = "ДвиженияССубконто" Тогда
			
			Если ИмяПараметраВиртуальнойТаблицы = "Упорядочивание" Тогда
				
				Для Каждого Поле Из Источник.ДоступныеПоля Цикл
					
					ИмяПоля = Поле.Имя;
					
					Если СтрНачинаетсяС(ИмяПоля, "Субконто")
							ИЛИ СтрНачинаетсяС(ИмяПоля, "ВидСубконто")
							ИЛИ ИмяПоля = "МоментВремени" Тогда
						Продолжить;
					КонецЕсли;
					
					Результат.Добавить(ИмяПоля);
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого Поле Из Источник.ДоступныеПоля Цикл
					
					ИмяПоля = Поле.Имя;
					
					Если ИмяПоля = "МоментВремени" Тогда
						Продолжить;
					КонецЕсли;
					
					Результат.Добавить(ИмяПоля);
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ИмяВиртуальнойТаблицы = "Обороты"
					ИЛИ ИмяВиртуальнойТаблицы = "ОборотыДтКт"
					ИЛИ ИмяВиртуальнойТаблицы = "Остатки" Тогда
			
			Если ИмяПараметраВиртуальнойТаблицы = "УсловиеСчета" Тогда
				ИмяПоляСчет = "Счет";
			ИначеЕсли ИмяПараметраВиртуальнойТаблицы = "КорСчет" Тогда
				ИмяПоляСчет = "КорСчет";
			ИначеЕсли ИмяПараметраВиртуальнойТаблицы = "УсловиеСчетаДт" Тогда
				ИмяПоляСчет = "СчетДт";
			ИначеЕсли ИмяПараметраВиртуальнойТаблицы = "УсловиеСчетаКт" Тогда
				ИмяПоляСчет = "СчетКт";
			Иначе
				ИмяПоляСчет = Неопределено;
			КонецЕсли;
			
			Для Каждого Поле Из Источник.ДоступныеПоля Цикл
				
				ИмяПоля = Поле.Имя;
				Если ИмяПоля = ИмяПоляСчет Тогда
					Результат.Добавить(ИмяПоля);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

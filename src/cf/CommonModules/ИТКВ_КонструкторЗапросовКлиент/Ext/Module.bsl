#Область ПрограммныйИнтерфейс

// Задача 4
Процедура ОсновнаяФормаВнутриAddConditionFromFields(NewItem, FieldName, FieldPresentation) Экспорт
	
	Если Не ЗначениеЗаполнено(FieldPresentation) Тогда
		NewItem["Condition"] = FieldName;
	КонецЕсли;
	
КонецПроцедуры

// Задача 15
Процедура ОсновнаяФормаПередSetPageState(Форма, ИмяСтраницы, State) Экспорт
	
	Если State = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Если ИмяСтраницы = "AvailableFieldsPage" Тогда
		
		ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыТаблицыПоля(Форма, Форма["AvailableFields"].ПолучитьЭлементы());
		
	ИначеЕсли ИмяСтраницы = "JoinsPage" Тогда
		
		ДанныеСвязей = ДанныеСвязей(Форма["Joins"].ПолучитьЭлементы());
		ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыСвязи(Форма, ДанныеСвязей.ЕстьСвязи, ДанныеСвязей.Источников);
		
	ИначеЕсли ИмяСтраницы = "ConditionsPage" Тогда
		
		ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыУсловия(Форма, Форма["Conditions"].ПолучитьЭлементы());
		
	ИначеЕсли ИмяСтраницы = "AdditionallyItemsPage" Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("ВыбиратьРазрешенные", Форма["AdditionallyPermitted"]);
		Параметры.Вставить("ВыбиратьРазличные", Форма["AdditionallyWithoutDuplicate"]);
		Параметры.Вставить("ВыбиратьДляИзменения", Форма["LockingData"]);
		
		Параметры.Вставить("КоличествоПолучаемыхЗаписей", Форма["AdditionallyFirstCount"]);
		Параметры.Вставить("ТаблицаДляПомещения", Форма["TempTableName"]);
		Параметры.Вставить("ТаблицыДляИзменения", Форма["AdditionallyTablesForChanging"].ПолучитьЭлементы());

		ИТКВ_КонструкторЗапросовКлиентСервер.ОбновитьЗаголовокСтраницыДополнительно(Форма, Параметры);
		
	ИначеЕсли ИмяСтраницы = "UnionsPage" Тогда // ITK23
		
		OperatorsNames = Форма.OperatorsNames;
		Count = OperatorsNames.GetItems().Count();
		Элементы.CurrentQuerySchemaOperator.ChoiceList.Clear();
		
		OperatorsNamesValues = OperatorsNames.GetItems().Get(Форма.CurrentQuerySchemaSelectQuery).GetItems();
		Count = OperatorsNamesValues.Count();
		For Pos = 0 To Count - 1 Do
			Элементы.CurrentQuerySchemaOperator.ChoiceList.Add(Pos, OperatorsNamesValues.Get(Pos)["Name"]);
		EndDo;
		
	ИначеЕсли ИмяСтраницы = "QueryBatchPage" Тогда // ITK23

		НовыйПакет = Ложь;
		Элементы.CurrentQuerySchemaSelectQuery.ChoiceList.Clear();
		For Pos = 0 To Форма.QueryBatch.Count() - 1 Do
			ИмяПакета = Форма.QueryBatch.Get(Pos)["Name"];
			Элементы.CurrentQuerySchemaSelectQuery.ChoiceList.Add(Pos, ИмяПакета);
			
			Если СтрНайти(ИмяПакета, "* Новый пакет") Тогда
				НовыйПакет = Истина;
			КонецЕсли;
			
		EndDo;
		
		ТекущиеДанные = Элементы.QueryBatch.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И Не НовыйПакет Тогда
			Форма.CurrentQuerySchemaSelectQuery = ТекущиеДанные.Index;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Задача 17
Процедура ОсновнаяФормаОбработатьПодключаемуюКоманду(Форма, Имя) Экспорт
	
	Если СтрНайти(Имя, "СдвинутьУсловиеВверх") Тогда
		
		СдвинутьУсловие(Форма, -1);
		
	ИначеЕсли СтрНайти(Имя, "СдвинутьУсловиеВниз") Тогда
		
		СдвинутьУсловие(Форма, 1);
		
	ИначеЕсли СтрНайти(Имя, "ЗапросПредыдущаяСтраница") Тогда
		
		ЗапросПереключениеСтраницы(Форма, -1);
		
	ИначеЕсли СтрНайти(Имя, "ЗапросСледующаяСтраница") Тогда
		
		ЗапросПереключениеСтраницы(Форма, 1);
		
	КонецЕсли;
	
КонецПроцедуры

// Задача 20
Процедура ЗаполнитьСписокВыбораИсточникаСвязей(Форма, ДанныеВыбора, СтандартнаяОбработка, ПолеИсключения) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Элементы = Форма.Элементы;
	Источники = Форма["Sources"];
	
	ТекущиеДанные = Элементы["ITKСвязи"].ТекущиеДанные;
	ИмяИсключения = ТекущиеДанные[ПолеИсключения];
	
	ДанныеВыбора = ИТКВ_КонструкторЗапросовВызовСервера.СписокВыбораИсточникаСвязей(Источники, ИмяИсключения);
	
КонецПроцедуры

// Задача 21
Функция НайтиСтрокуВВыбранныхПолях(Форма, Родитель, Поле, Имя, Индекс) Экспорт
	
	ОписаниеПоля = ОписаниеПоляПредставления(Форма, Родитель, Поле, Имя, Индекс);
	
	// Ищем и активируем нужную строку
	ВыбранныеПоляИмя = "AvailableFields";
	ВыбранныеПоля = Форма[ВыбранныеПоляИмя];
	
	// Ищем родителя
	Родитель = ВыбранныеПоля;
	Если ЗначениеЗаполнено(ОписаниеПоля.Родитель) Тогда
		
		Для Каждого СтрокаВыбранноеПоле Из ВыбранныеПоля.ПолучитьЭлементы() Цикл
			
			Если ОписаниеПоля.Родитель = СтрокаВыбранноеПоле["Presentation"] Тогда
				
				Родитель = СтрокаВыбранноеПоле;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Ищем строку
	Результат = Неопределено;
	
	Номер = 1;
	Для Каждого СтрокаВыбранноеПоле Из Родитель.ПолучитьЭлементы() Цикл
		
		Если СтрокаВыбранноеПоле["Presentation"] = ОписаниеПоля.Поле Тогда
			
			Если Номер = ОписаниеПоля.Номер Тогда
				
				Результат = СтрокаВыбранноеПоле.ПолучитьИдентификатор();
				Прервать;
				
			КонецЕсли;
			
			Номер = Номер + 1;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Задача 3, 26
Процедура ФормаОсновнаяПриОткрытииПосле(Форма, Отказ) Экспорт
	
	Элементы = Форма.Элементы;
	
	СлужебныйЗапуск = Форма[ИТКВ_КонструкторЗапросовКлиентСервер.ПутьКДаннымСлужебныйЗапуск()];
	Если Не СлужебныйЗапуск Тогда

		Заголовок = ИТКВ_ТуллкитКлиентСервер.Представление();
		Текст = НСтр("ru = 'Обработка служебная и не предназначена для запуска отдельно';
						|en = 'Processing is service and not intended to be run separately'");
		ПоказатьПредупреждение( , Текст, , Заголовок);
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если ИТКВ_ОбщийКлиентСервер.ПоддерживаетсяПлатформой("8.3.14") Тогда
		
		Элементы["TotalsPage"].Видимость = НЕ Форма["DataCompositionMode"];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СдвинутьУсловие(Форма, Направление)
	
	ЭлементУсловия = Форма.Элементы.Conditions;
	Условия = Форма["Conditions"].ПолучитьЭлементы();
	Индекс = Условия.Индекс(ЭлементУсловия.ТекущиеДанные);
	
	Если (Направление = 1 И Условия.Количество() > Индекс + 1)
			ИЛИ (Направление = -1 И Индекс > 0) Тогда
		
		Условия.Сдвинуть(Индекс, Направление);
		
	КонецЕсли;
	
	Форма.SetPageState("ConditionsPage", True);
	
КонецПроцедуры

Процедура ЗапросПереключениеСтраницы(Форма, Направление)
	
	Префикс = ИТКВ_ТуллкитКлиентСервер.Префикс();
	ИмяПредыдущаяСтраница = Префикс + "ЗапросПредыдущаяСтраница";
	ИмяСледующаяСтраница = Префикс + "ЗапросСледующаяСтраница";
	
	ЭлементСтраницы = Форма.Элементы["Query"];
	НовыйИндекс = ИндексСледующейЗакладки(ЭлементСтраницы, Направление);
	
	Форма.Элементы[ИмяПредыдущаяСтраница].Доступность = (НовыйИндекс > 0);
	Форма.Элементы[ИмяСледующаяСтраница].Доступность = (НовыйИндекс < (ЭлементСтраницы.ПодчиненныеЭлементы.Количество() - 1));
	
	Форма.ТекущийЭлемент = ЭлементСтраницы.ПодчиненныеЭлементы[НовыйИндекс];
	
КонецПроцедуры

Функция ИндексСледующейЗакладки(ЭлементСтраницы, Направление)
	
	Индекс = ЭлементСтраницы.ПодчиненныеЭлементы.Индекс(ЭлементСтраницы.ТекущаяСтраница);
	
	Пока Истина Цикл
		
		Индекс = Индекс + Направление;
		СледующаяСтраница = ЭлементСтраницы.ПодчиненныеЭлементы[Индекс];
		
		Если СледующаяСтраница.Видимость Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Индекс;
	
КонецФункции

Функция ДанныеСвязей(Связи)
	
	Источники = Связи[0].ПолучитьЭлементы();
	
	ЕстьСвязи = Ложь;
	Для Каждого СтрокаИсточник Из Источники Цикл
		
		Если ЗначениеЗаполнено(СтрокаИсточник.ПолучитьЭлементы()) Тогда
			
			ЕстьСвязи = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Новый Структура("ЕстьСвязи, Источников", ЕстьСвязи, Источники.Количество());

КонецФункции

Функция ОписаниеПоляПредставления(Форма, СтрокаРодитель, Поле, Имя, Индекс)
	
	Результат = Новый Структура;
	Результат.Вставить("Поле", Поле);
	
	Если СтрокаРодитель = Неопределено Тогда
		
		СтрокаРодитель = Форма["Aliases"];
		Родитель = Неопределено;
		
	Иначе
		
		Родитель = СтрокаРодитель[Имя];
		
	КонецЕсли;
	Результат.Вставить("Родитель", Родитель);
	
	Номер = 0;
	Строки = СтрокаРодитель.ПолучитьЭлементы();
	Для ИндексПоля = 0 По Индекс Цикл
		
		Строка = Строки[ИндексПоля];
	
		Если Строка[Имя] = Поле Тогда
			
			Номер = Номер + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	Результат.Вставить("Номер", Номер);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

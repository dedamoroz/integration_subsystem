#Область ПрограммныйИнтерфейс

// Добавляет колонку в таблицу значений на форме
//
// Параметры:
//	Приемник - Форма - Форма
//	Имя - Строка - Имя колонки
//	ТипЗначения - ОписаниеТипов - Описание типов
//	ИмяРодителя - Строка - Имя реквизита/элемента родителя
//
Процедура ДобавитьКолонкуВТаблицуЗначений(Приемник, Имя, ТипЗначения, ИмяРодителя) Экспорт
	
	ДобавитьРеквизитВТаблицуЗначений(Приемник, Имя, ТипЗначения, ИмяРодителя);
	ДобавитьЭлементКолонкуВТаблицуЗначений(Приемник, Имя, ТипЗначения, ИмяРодителя)
	
КонецПроцедуры

Процедура ДобавитьРеквизитВТаблицуЗначений(Приемник, Имя, ТипЗначения, ИмяРодителя) Экспорт
	
	Если ТипЗначения.СодержитТип(Тип("Тип"))
			ИЛИ ТипЗначения.СодержитТип(Тип("МоментВремени"))
			ИЛИ ТипЗначения.СодержитТип(Тип("Граница")) Тогда
		ДопустимыеТипы = Новый ОписаниеТипов; // Некоторые типы работают в ТЗ только если определить тип: Произвольный
	Иначе
		ДопустимыеТипы = ИТКВ_ТипыКлиентСервер.ОписаниеБезNull(ТипЗначения);
	КонецЕсли;
	
	ДобавлятьРеквизитыНаФорму = (ТипЗнч(Приемник) <> Тип("Массив"));
	
	Если ДобавлятьРеквизитыНаФорму Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавитьРеквизит(ДобавляемыеРеквизиты, Имя, ДопустимыеТипы, Имя, ИмяРодителя);
		Приемник.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
	Иначе
		
		ДобавитьРеквизит(Приемник, Имя, ДопустимыеТипы, Имя, ИмяРодителя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементКолонкуВТаблицуЗначений(Форма, Имя, ТипЗначения, ИмяЭлементаРодителя, ИмяРеквизита = Неопределено) Экспорт
	
	Если ИмяРеквизита = Неопределено Тогда
		ИмяРеквизита = ИмяЭлементаРодителя;
	КонецЕсли;
	
	ДопустимыеТипы = ИТКВ_ТипыКлиентСервер.ОписаниеБезNull(ТипЗначения);
	
	ЭлементыФормы = Форма.Элементы;
	НоваяКолонка = ЭлементыФормы.Добавить(ИмяЭлементаРодителя + Имя, Тип("ПолеФормы"), ЭлементыФормы[ИмяЭлементаРодителя]);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ПутьКДанным = ИмяРеквизита + "." + Имя;;
	НоваяКолонка.КартинкаШапки = ИТКВ_Типы.КартинкаОписания(ДопустимыеТипы);
	НоваяКолонка.Подсказка = ИТКВ_Типы.ПодсказкаОписания(Имя, ДопустимыеТипы, Истина);
	
	Если ДопустимыеТипы.СодержитТип(Тип("Строка")) Тогда
		
		НоваяКолонка.КнопкаВыбора = Истина;
		НоваяКолонка.МногострочныйРежим = Истина;
		
	КонецЕсли;
	
	Если НЕ ИТКВ_Типы.РедактируетсяВТаблицеЗначений(ДопустимыеТипы) Тогда
		НоваяКолонка.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ДопустимыеТипы.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяКолонка.ДоступныеТипы = ДопустимыеТипы;
	НоваяКолонка.ВыбиратьТип = (ИТКВ_ТипыКлиентСервер.Количество(ДопустимыеТипы) <> 1);
	НоваяКолонка.УстановитьДействие("НачалоВыбора", "Подключаемый_ТаблицаЗначенийРеквизитНачалоВыбора");
	НоваяКолонка.УстановитьДействие("Очистка", "Подключаемый_ТаблицаЗначенийРеквизитОчистка");
	
КонецПроцедуры

// Добавляет условное оформление
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Условное оформление
//	ИмяПоля - Строка - Имя оформляемого поля
//	Оформление - Структура - Оформление
//	ЛевоеЗначение - Строка - Имя поля отбора
//	ПравоеЗначение - Произвольный - Значение отбора
//	ВидСравнения - ВидСравнения - Вид сравнения отбора
//
Процедура ДобавитьУсловноеОформление(УсловноеОформление, Поля, Оформление, ЛевоеЗначение, ПравоеЗначение,
										ВидСравнения = Неопределено, ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Если ЗначениеЗаполнено(ИдентификаторПользовательскойНастройки) Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	КонецЕсли;
	
	// Добавление оформляемых полей
	Если ТипЗнч(Поля) = Тип("Массив") Тогда
		
		Для Каждого Поле Из Поля Цикл
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поле);
			
		КонецЦикла;
		
	Иначе
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поля);
		
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	Если ЗначениеЗаполнено(ВидСравнения) Тогда
		ОтборЭлемента.ВидСравнения = ВидСравнения;
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = ПравоеЗначение;
	
	Для Каждого ЭлементОформления Из Оформление Цикл
		Элемент.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ, ЭлементОформления.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет условное оформление группой
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Условное оформление
//	ИмяПоля - Строка - Имя оформляемого поля
//	Оформление - Структура - Оформление
//	Условия - Массив(Структура) - Условия
//				*Поле - Строка - Имя поля
//				*Значение - Произвольный - Значение
//	Тип - ТипГруппыЭлементовОтбораКомпоновкиДанных - Тип
//
Процедура ДобавитьУсловноеОформлениеГруппой(УсловноеОформление, ИмяПоля, Оформление, Условия, Тип = Неопределено) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Если ЗначениеЗаполнено(Тип) Тогда
		ОтборГруппа.ТипГруппы = Тип;
	КонецЕсли;
	
	Для Каждого Условие Из Условия Цикл
		
		ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Условие.Поле);
		ОтборЭлемента.ПравоеЗначение = Условие.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементОформления Из Оформление Цикл
		Элемент.Оформление.УстановитьЗначениеПараметра(ЭлементОформления.Ключ, ЭлементОформления.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список выбора элемента, тип списка максимальное количество выводимых строк
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы
Процедура ЗаполнитьСписокВыбораМаксимальноеКоличествоВыводимыхСтрок(Элемент) Экспорт
	
	Список = Элемент.СписокВыбора;
	Список.Добавить(0, НСтр("ru = 'Не ограничено'; en = 'Not limited'"));
	Список.Добавить(1000, НСтр("ru = '1000 строк'; en = '1000 rows'"));
	Список.Добавить(3000, НСтр("ru = '3000 строк'; en = '3000 rows'"));
	Список.Добавить(5000, НСтр("ru = '5000 строк'; en = '5000 rows'"));
	Список.Добавить(10000, НСтр("ru = '10000 строк'; en = '10000 rows'"));
	
КонецПроцедуры

// Заполняет список выбора элемента, тип списка язык программирования
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы
//   ДобавлятьОпределяетсяАвтоматически - Булево - Добавлять пункт определяется автоматически
Процедура ЗаполнитьСписокВыбораЯзыкПрограммирования(Элемент, ДобавлятьОпределяетсяАвтоматически = Ложь) Экспорт
	
	Список = Элемент.СписокВыбора;
	
	Если ДобавлятьОпределяетсяАвтоматически Тогда
		Список.Добавить("", НСтр("ru = 'Определяется автоматически'; en = 'Is determined automatically'"));
	КонецЕсли;
	
	Список.Добавить(ИТКВ_ОбщийКлиентСервер.КодЯзыкаРусский(), "Русский", , БиблиотекаКартинок.ИТКВ_ФлагРоссии);
	Список.Добавить(ИТКВ_ОбщийКлиентСервер.КодЯзыкаАнглийский(), "English", , БиблиотекаКартинок.ИТКВ_ФлагВеликобритании);
	
КонецПроцедуры

// Обновить список выбора элемента, тип объекта
//
// Параметры:
//   Элемент - ЭлементФормы - Элемент формы
//   КодЯзыкаПрограммирования - Строка - Код языка программирования
//
Процедура ОбновитьСписокВыбораТипОбъекта(Элемент, КодЯзыкаПрограммирования) Экспорт
	
	ТипыОбъектов = ИТКВ_МетаданныеКлиентСерверПовтИсп.ДоступныеТипыОбъекта(КодЯзыкаПрограммирования);
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого ТипОбъекта Из ТипыОбъектов Цикл
		
		ИмяКоллекции = ИТКВ_Метаданные.ИмяКоллекции(ТипОбъекта);
		КоллекцияМетаданных = ИТКВ_МетаданныеПовтИсп.КоллекцияМетаданныхПоИмени(ИмяКоллекции);
		
		Если ЗначениеЗаполнено(КоллекцияМетаданных) Тогда
			СписокВыбора.Добавить(ТипОбъекта, , , ИТКВ_МетаданныеКлиентСерверПовтИсп.Картинка(ТипОбъекта));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет реквизит в приемник
//
// Параметры:
//	Приемник - Массив - Приемник реквизитов
//	Имя - Строка - Имя
//	Тип - ОписаниеТипов - Тип значения
//	Заголовок - Строка - Заголовок
//	Путь - Строка - Путь
//	СохраняемыеДанные - Булево - СохраняемыеДанные
//
Процедура ДобавитьРеквизит(Приемник, Имя, Знач Тип = Неопределено, Заголовок = "", Путь = "", СохраняемыеДанные = Ложь) Экспорт
	
	Если Тип = Неопределено Тогда
		
		Тип = Новый ОписаниеТипов;
		
	ИначеЕсли ТипЗнч(Тип) = Тип("Строка") Тогда
		
		Тип = ИТКВ_ТипыКлиентСервер.ОписаниеИзСтроки(Тип);
		
	КонецЕсли;
	
	Если НЕ ИТКВ_Типы.РедактируетсяВТаблицеЗначений(Тип) Тогда
		
		Тип = ИТКВ_ТипыКлиентСервер.ОписаниеСтрока();
		
	КонецЕсли;
	 
	Приемник.Добавить(Новый РеквизитФормы(Имя, Тип, Путь, Заголовок, СохраняемыеДанные));
	
КонецПроцедуры

// Добавляет элемент на форму
//
// Параметры:
//	Форма - Форма - Форма
//	Имя - Строка - Имя
//	Тип - Строка - Тип элемента
//	Поля - Структура - Поля заполнения
//	Родитель - Элемент - Элемент родитель
//
// Возвращаемое значение:
//   Элемент - Элемент
//
Функция ДобавитьЭлемент(Форма, Имя, Тип, Поля = Неопределено, Родитель = Неопределено, Элемент = Неопределено) Экспорт
	
	ОписаниеЭлемента = ОписаниеСоздаваемогоЭлемента(Тип, Родитель);
	Тип = ОписаниеЭлемента.Тип;
	Вид = ОписаниеЭлемента.Вид;
	
	// Создание элемента
	Если Элемент = Неопределено
			И Родитель = Неопределено Тогда
			
		Результат = Форма.Элементы.Добавить(Имя, Тип);
		
	ИначеЕсли Элемент = Неопределено Тогда
		
		Результат = Форма.Элементы.Добавить(Имя, Тип, Родитель);
		
	Иначе
		
		Результат = Форма.Элементы.Вставить(Имя, Тип, Родитель, Элемент);
		
	КонецЕсли;
	
	// Заполнение свойств
	Если ЗначениеЗаполнено(Вид) Тогда
		
		Результат.Вид = Вид;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поля) Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Поля);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКоманду(Форма, Имя, ИмяДействия, Заголовок = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НоваяКоманда = Форма.Команды.Добавить(Имя);
	
	НоваяКоманда.Действие = ИмяДействия;
	НоваяКоманда.Заголовок = Заголовок;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	НоваяКоманда.Подсказка = ИТКВ_ОбщийКлиентСервер.Свойство(ДополнительныеПараметры, "Подсказка", Заголовок);
	
	ЗаполнитьЗначенияСвойств(НоваяКоманда, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура УдалитьПодчиненныеЭлементы(Форма, Элемент) Экспорт
	
	Пока ЗначениеЗаполнено(Элемент.ПодчиненныеЭлементы) Цикл
		
		Форма.Элементы.Удалить(Элемент.ПодчиненныеЭлементы[0]);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьКоманды(Форма, Префикс) Экспорт
	
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Форма.Команды Цикл
		
		Если СтрНачинаетсяС(Команда.Имя, Префикс) Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		
		Форма.Команды.Удалить(Команда);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОшибкиНастроекОтчетаИнициализировать(Форма, ЭлементРодитель, Количество = 5) Экспорт
	
	ИмяОсновногоРеквизита = ИТКВ_ФормаКлиентСервер.ОшибкиНастроекОтчетаИмяОсновногоРеквизита();
	
	// Добавление реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавитьРеквизит(ДобавляемыеРеквизиты, ИмяОсновногоРеквизита, ИТКВ_ТипыКлиентСервер.ОписаниеИзСтроки("СписокЗначений"));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавление элементов
	Для Номер = 1 По Количество Цикл
		
		Поля = Новый Структура;
		Поля.Вставить("Заголовок", СтрШаблон("ru = 'Ошибка настроек отчета (%1)'; en = 'Report settings error (%1)'", Номер));
		Поля.Вставить("ОтображатьЗаголовок", Ложь);
		Поля.Вставить("Группировка", ИТКВ_ФормаКлиентСервер.ГруппировкаПодчиненныхЭлементовГоризонтальная());
		Поля.Вставить("Видимость", Ложь);
		Группа = ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяОсновногоРеквизита + "Группа" + Номер, "Группа", Поля, ЭлементРодитель);

		Поля = Новый Структура;
		Поля.Вставить("Заголовок", НСтр("ru = 'Картинка'; en = 'Picture'"));
		Поля.Вставить("Ширина", 2);
		Поля.Вставить("Высота", 1);
		ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяОсновногоРеквизита + "Картинка" + Номер, "ДекорацияКартинка", Поля, Группа);
		
		Поля = Новый Структура;
		Поля.Вставить("Заголовок", НСтр("ru = 'Текст ошибки'; en = 'Error text'"));
		Поля.Вставить("Шрифт", ИТКВ_ОбщийКлиентСервер.ШрифтЖирный());
		ИТКВ_Форма.ДобавитьЭлемент(Форма, ИмяОсновногоРеквизита + "Текст" + Номер, "ДекорацияНадпись", Поля, Группа);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеСоздаваемогоЭлемента(Тип, Родитель)
	
	Если Тип = "Группа" Тогда
		
		ЭтоГруппаКнопок = (ТипЗнч(Родитель) = Тип("ГруппаФормы"))
								И (Родитель.Вид = ВидГруппыФормы.КоманднаяПанель
										ИЛИ Родитель.Вид = ВидГруппыФормы.КонтекстноеМеню
										ИЛИ Родитель.Вид = ВидГруппыФормы.Подменю
										ИЛИ Родитель.Вид = ВидГруппыФормы.ГруппаКнопок);
		Если ЭтоГруппаКнопок Тогда
				
			Вид = ВидГруппыФормы.ГруппаКнопок;
			
		ИначеЕсли ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			
			Вид = ВидГруппыФормы.ГруппаКолонок;
			
		Иначе
				
			Вид = ВидГруппыФормы.ОбычнаяГруппа;
			
		КонецЕсли;
		Тип = Тип("ГруппаФормы");
		
	ИначеЕсли Тип = "ДекорацияКартинка" Тогда
		
		Вид = ВидДекорацииФормы.Картинка;
		Тип = Тип("ДекорацияФормы");
		
	ИначеЕсли Тип = "ДекорацияНадпись" Тогда
		
		Вид = ВидДекорацииФормы.Надпись;
		Тип = Тип("ДекорацияФормы");
		
	ИначеЕсли Тип = "Страница" Тогда
		
		Вид = ВидГруппыФормы.Страница;
		Тип = Тип("ГруппаФормы");
		
	ИначеЕсли Тип = "Таблица" Тогда
		
		Вид = Неопределено;
		Тип = Тип("ТаблицаФормы");
		
	ИначеЕсли Тип = "Подменю" Тогда
		
		Вид = ВидГруппыФормы.Подменю;
		Тип = Тип("ГруппаФормы");
		
	ИначеЕсли Тип = "ПолеВвода"
				ИЛИ Тип = "ПолеТекстовогоДокумента"
				ИЛИ Тип = "ПолеHTMLДокумента"
				ИЛИ Тип = "ПолеТабличногоДокумента"
				ИЛИ Тип = "ПолеКартинки"
				ИЛИ Тип = "ПолеНадписи"
				ИЛИ Тип = "ПолеИндикатора"
				ИЛИ Тип = "ПолеФлажка" Тогда
		
		Вид = ВидПоляФормы[Тип];
		Тип = Тип("ПолеФормы");
		
	ИначеЕсли Тип = "Кнопка" Тогда
		
		Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Тип = Тип("КнопкаФормы");
		
	ИначеЕсли Тип = "ГиперСсылка" Тогда
		
		Вид = ВидКнопкиФормы.Гиперссылка;
		Тип = Тип("КнопкаФормы");
		
	ИначеЕсли Тип = "КоманднаяПанель" Тогда
		
		Вид = ВидГруппыФормы.КоманднаяПанель;
		Тип = Тип("ГруппаФормы");
		
	Иначе
		
		ВызватьИсключение "";
		
	КонецЕсли;
	
	Возврат Новый Структура("Вид, Тип", Вид, Тип);
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Получает имя коллекции метаданных
//
// Параметры:
//  Объект  - ОбъектаМетаданных, Тип, Строка  - Объект метаданных
//  Язык  - Строка - Язык
//
// Возвращаемое значение:
//   Строка - имя коллекции метаданных
//
Функция ИмяКоллекции(Объект, Язык = Неопределено) Экспорт
	
	Если Язык = Неопределено Тогда
		Язык = ИТКВ_ОбщийКлиентСервер.КодТекущегоЯзыка();
	КонецЕсли;
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ИмяКоллекции(Имя, Язык);
	
КонецФункции

Функция ИмяОбъектаКоллекции(Объект, Язык = Неопределено, Тип = Неопределено) Экспорт
	
	Если Язык = Неопределено Тогда
		Язык = ИТКВ_ОбщийКлиентСервер.КодТекущегоЯзыка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тип)
			И ЭтоТипТочкаМаршрутаБизнесПроцесса(Тип) Тогда
			
		Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ИмяОбъектаТочкаМаршрутаБизнесПроцесса();
		
	КонецЕсли;
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ИмяОбъектаКоллекции(Имя, Язык);
	
КонецФункции

Функция ПолноеИмя(Объект, Язык = Неопределено) Экспорт
	
	Возврат ИмяОбъектаКоллекции(Объект) + "." + Объект.Имя;
	
КонецФункции

Функция ЭтоСправочник(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоСправочник(Имя);
	
КонецФункции

Функция ЭтоДокумент(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоДокумент(Имя);
	
КонецФункции

Функция ЭтоПланВидовХарактеристик(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоПланВидовХарактеристик(Имя);
	
КонецФункции

Функция ЭтоПланВидовРасчета(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоПланВидовРасчета(Имя);
	
КонецФункции

Функция ЭтоПланСчетов(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоПланСчетов(Имя);
	
КонецФункции

Функция ЭтоПланОбмена(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоПланОбмена(Имя);
	
КонецФункции

Функция ЭтоРегистрСведений(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрСведений(Имя);
	
КонецФункции

Функция ЭтоРегистрБухгалтерии(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоРегистрБухгалтерии(Имя);
	
КонецФункции

Функция ЭтоБизнесПроцесс(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоБизнесПроцесс(Имя);
	
КонецФункции

Функция ЭтоЗадача(Объект) Экспорт
	
	Имя = ИмяМетаданных(Объект);
	Возврат ИТКВ_МетаданныеКлиентСерверПовтИсп.ЭтоЗадача(Имя);

КонецФункции

Функция ОбъектСИерархией(Объект) Экспорт
	
	Возврат	(ИТКВ_Метаданные.ЭтоСправочник(Объект)
				И Объект.Иерархический
				И Объект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов)
			ИЛИ (ИТКВ_Метаданные.ЭтоПланВидовХарактеристик(Объект)
				И Объект.Иерархический);
	
КонецФункции

Функция КлючиРегистраСведений(Объект) Экспорт
	
	Результат = Новый Массив;
	
	ТипыКлючей = ТипыКлючейРегистраСведений(Объект);
	Для Каждого ТипКлюча Из ТипыКлючей Цикл
		
		Результат.Добавить(ТипКлюча.Представление);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыКлючейРегистраСведений(Объект) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = Объект;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Объект);
	КонецЕсли;
	
	// Добавляем период, если регистр периодический
	Периодический = (ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
	Если Периодический Тогда
		
		ТипЗначения = ИТКВ_ТипыКлиентСервер.ОписаниеДата();
		Результат.Добавить(ТипЗначения, "Период");
		
	КонецЕсли;
	
	// Добавляем измерения
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Результат.Добавить(Измерение.Тип, Измерение.Имя);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НаборЗаписейПоКлючу(Ключ) Экспорт
	
	ПолноеИмяМетаданных = Ключ.Метаданные().ПолноеИмя();
	
	Менеджер = МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
	Результат = Менеджер.СоздатьНаборЗаписей();
	
	// Заполнить отбор
	Для Каждого ЭлементОтбора Из Результат.Отбор Цикл
		
		ЭлементОтбора.Установить(Ключ[ЭлементОтбора.Имя]);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокИменИзКоллекции(Коллекция, Исключения = "") Экспорт
	
	Результат = Новый Массив;
	СписокИсключений = СтрРазделить(Исключения, ",");
	
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		
		Если СписокИсключений.Найти(ЭлементКоллекции.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ЭлементКоллекции.Имя);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеКлючаЗаписейРегистраСведений(Объект) Экспорт
	
	ОбъектМетаданных = Объект.Метаданные();
	
	ЗначенияИзмерений = Новый Массив;
	
	Ключи = КлючиРегистраСведений(ОбъектМетаданных);
	Для Каждого Ключ Из Ключи Цикл
		
		ЗначениеИзмерения = Объект[Ключ];
		ЗначенияИзмерений.Добавить(СтрШаблон("%1 ""%2""", Ключ, СокрЛП(ЗначениеИзмерения)));
		
	КонецЦикла;
	
	Возврат СтрШаблон("%1 (%2)", ОбъектМетаданных.Представление(), СтрСоединить(ЗначенияИзмерений, ", "));
	
КонецФункции

Функция ОписаниеТиповСоответствуютОтбору(ОписаниеТипов, Отбор) Экспорт
	
	Если Отбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокиОтбора = СтрРазделить(Отбор, ", ", Ложь);
	Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
		
		ЧастиОтбора = СтрРазделить(СтрокаОтбора, ".");
		Если ЧастиОтбора.Количество() = 1 Тогда
			
			ИмяКоллекции = ЧастиОтбора[0];
			ИмяОбъектаКоллекции = Неопределено;
			ИмяОбъекта = Неопределено;
			
		Иначе
			
			ИмяКоллекции = Неопределено;
			ИмяОбъектаКоллекции = ЧастиОтбора[0];
			ИмяОбъекта = ЧастиОтбора[1];
			
		КонецЕсли;
			
		Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				
			Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
				
				Если ИмяКоллекции = ИТКВ_Метаданные.ИмяКоллекции(ОбъектМетаданных) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			Иначе
				
				Если ИмяОбъекта = ОбъектМетаданных.Имя
						И ИмяОбъектаКоллекции = ИТКВ_Метаданные.ИмяОбъектаКоллекции(ОбъектМетаданных) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
						
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СоответствуютОтбору(ИмяОбъектаКоллекции, ИмяОбъектаМетаданных, Отбор) Экспорт
	
	Если Отбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь;
	ИмяКоллекции = ИТКВ_МетаданныеКлиентСерверПовтИсп.ИмяКоллекции(ИмяОбъектаКоллекции);
	
	СтрокиОтбора = СтрРазделить(Отбор, ", ", Ложь);
	Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
		
		ЧастиОтбора = СтрРазделить(СтрокаОтбора, ".");
		Если ЧастиОтбора.Количество() = 1 Тогда
			
			Если ИмяКоллекции = ЧастиОтбора[0] Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
			
		Иначе
			
			Если (ИмяОбъектаКоллекции = ЧастиОтбора[0]
					И ИмяОбъектаМетаданных = ЧастиОтбора[1]) Тогда
					
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТипВсеСсылкиКоллекции(Имя) Экспорт
	
	Если ИТКВ_Строки.НекорректныйИдентификатор(Имя) Тогда
		ВызватьИсключение "Некорректный менеджер";
	КонецЕсли;
	
	Результат = ИТКВ_МетаданныеПовтИсп.ТипВсеСсылкиКоллекции(Имя);
	Результат = Новый ОписаниеТипов(Результат, ИТКВ_Типы.ТипыКоллекцииРасширений(Метаданные[Имя]));
	
	Возврат Результат;
	
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
// 
// Пример:
//  МенеджерСправочника = МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	ИмяОбъектаКоллекцииМетаданных = ЧастиИмени[0];
	ИмяОбъектаМетаданных = ЧастиИмени[1];
	ИмяКоллекцииМетаданных = ИмяКоллекции(ИмяОбъектаКоллекцииМетаданных);
	
	Менеджер = ИТКВ_МетаданныеПовтИсп.МенеджерПоИмени(ИмяКоллекцииМетаданных);
	Результат = Менеджер[ИмяОбъектаМетаданных];
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоТабличнаяЧастьОбъекта(Значение) Экспорт
	
	ТипЗначения = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	Возврат СтрНайти(ПолноеИмяОбъектаМетаданных, ".ТабличнаяЧасть.")
				ИЛИ СтрНайти(ПолноеИмяОбъектаМетаданных, ".TabularSection.");

КонецФункции

Функция ВходитВСоставПодсистемы(Подсистема, ОбъектМетаданных) Экспорт
	
	Если Подсистема = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Подсистема.Состав.Содержит(ОбъектМетаданных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Ложь;
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		
		Результат = ВходитВСоставПодсистемы(ПодчиненнаяПодсистема, ОбъектМетаданных);
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КоллекцияПолейРедактируетсяВТаблицеЗначений(Коллекция) Экспорт
	
	Результат = Истина;
	Для Каждого Поле Из Коллекция Цикл
		
		Если НЕ ИТКВ_Типы.РедактируетсяВТаблицеЗначений(Поле.Тип) Тогда
			
			Результат = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбщийРеквизитИспользуетсяВОбъекте(ОбщийРеквизит, ОбъектМетаданных) Экспорт
	
	ЭлементСостава = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
	
	СвойстваОбъектов = Метаданные.СвойстваОбъектов;
	ИспользованиеОбщегоРеквизита = СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
				
	Возврат ЭлементСостава <> Неопределено
				И (ЭлементСостава.Использование = ИспользованиеОбщегоРеквизита.Использовать);
	
КонецФункции

Функция ИспользованиеПоляОбъекта(ОбъектМетаданных) Экспорт
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Если СтрНачинаетсяС(ПолноеИмя, "ОбщийРеквизит")
			ИЛИ СтрНачинаетсяС(ПолноеИмя, "CommonAttribute") Тогда
			
		Возврат Истина;
			
	КонецЕсли;
	
	Возврат ОбъектМетаданных.Использование;
	
КонецФункции

Функция Предопределенные(ОбъектМетаданных) Экспорт
	
	Результат = Новый СписокЗначений;
	Если ЭтоПланСчетов(ОбъектМетаданных)
			И ЗначениеЗаполнено(ОбъектМетаданных.ДлинаКода) Тогда
			
		ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		ШаблонТекста = "ВЫБРАТЬ
		|	Таблица.Код,
		|	Таблица.ИмяПредопределенныхДанных КАК Имя
		|ИЗ
		|	%1 КАК Таблица
		|ГДЕ
		|	Таблица.Предопределенный
		|УПОРЯДОЧИТЬ ПО
		|	Код,
		|	Имя";
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон(ШаблонТекста, ПолноеИмяОбъектаМетаданных);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		ШаблонПредставления = "%1 (%2)";
		Пока Выборка.Следующий() Цикл
			
			ИмяПредопределенного = Выборка["Имя"];
			
			Представление = СтрШаблон(ШаблонПредставления, ИмяПредопределенного, СокрЛП(Выборка.Код));
			Результат.Добавить(ИмяПредопределенного, Представление);
			
		КонецЦикла;
			
	Иначе
		
		ИменаПредопределенных = ОбъектМетаданных.ПолучитьИменаПредопределенных();
		ИменаПредопределенных = Новый Массив(ИменаПредопределенных);
		Результат.ЗагрузитьЗначения(ИменаПредопределенных);
		Результат.СортироватьПоЗначению();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФункциональныеОпцииОбъекта(Объект) Экспорт
	
	КэшФункциональныхОпций = ИТКВ_МетаданныеПовтИсп.КэшФункциональныхОпций();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПолноеИмяОбъектаМетаданных", Объект.ПолноеИмя());
	НайденныеСтроки = КэшФункциональныхОпций.НайтиСтроки(Отбор);
	
	Результат = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Результат.Добавить(Строка.ИмяФункциональнойОпции);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоТипТочкаМаршрутаБизнесПроцесса(Тип) Экспорт
	
	ПолноеИмяXMLТипа = XMLТип(Тип).ИмяТипа;
	Возврат СтрНачинаетсяС(ПолноеИмяXMLТипа, "BusinessProcessRoutePointRef");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяМетаданных(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		
		ИмяОбъекта = Объект.ПолноеИмя();
		
	ИначеЕсли ТипЗнч(Объект) = Тип("Тип") Тогда
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Объект);
		
		Если ОбъектМетаданных = Неопределено Тогда
			
			ВызватьИсключение СтрШаблон("Неподдерживаемый тип: %1", Объект);
			
		Иначе
			
			ИмяОбъекта = Объект.ПолноеИмя();
			
		КонецЕсли;
		
	Иначе
		
		ИмяОбъекта = Объект;
		
	КонецЕсли;
	
	ЧастиОбъекта = СтрРазделить(ИмяОбъекта, ".");
	
	Возврат ЧастиОбъекта[0];
	
КонецФункции

#КонецОбласти
